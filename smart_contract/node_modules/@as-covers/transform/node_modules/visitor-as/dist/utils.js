"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringBuilder = exports.isMethodNamed = exports.className = exports.isUserEntry = exports.cloneNode = exports.getName = exports.toString = exports.not = exports.isLibrary = exports.getDecorator = exports.hasDecorator = exports.isDecorator = exports.decorates = void 0;
const as_1 = require("../as");
const astBuilder_1 = require("./astBuilder");
const cloneDeep = require("lodash.clonedeep");
function decorates(node, name) {
    return node.name.text === name;
}
exports.decorates = decorates;
function isDecorator(name) {
    return (node) => decorates(node, name);
}
exports.isDecorator = isDecorator;
function hasDecorator(node, name) {
    var _a;
    let decl;
    if (node instanceof as_1.DeclarationStatement) {
        decl = node;
    }
    else {
        decl = node.declaration;
    }
    // because it could be undefined
    return ((_a = decl.decorators) === null || _a === void 0 ? void 0 : _a.some(isDecorator(name))) == true;
}
exports.hasDecorator = hasDecorator;
function getDecorator(node, name) {
    var _a;
    return (_a = node.decorators) === null || _a === void 0 ? void 0 : _a.find(isDecorator(name));
}
exports.getDecorator = getDecorator;
function isLibrary(node) {
    return node.isLibrary || node.internalPath.startsWith("~lib/rt/");
}
exports.isLibrary = isLibrary;
function not(fn) {
    return (t) => !fn(t);
}
exports.not = not;
function toString(node) {
    return astBuilder_1.ASTBuilder.build(node);
}
exports.toString = toString;
function getName(node) {
    if (node instanceof as_1.TypeNode) {
        return node.range.toString();
    }
    if (node instanceof as_1.ClassDeclaration || node instanceof as_1.InterfaceDeclaration) {
        return className(node);
    }
    return node.name.range.toString();
}
exports.getName = getName;
function cloneNode(node) {
    return cloneDeep(node);
}
exports.cloneNode = cloneNode;
function isUserEntry(source) {
    return source.sourceKind == as_1.SourceKind.USER_ENTRY;
}
exports.isUserEntry = isUserEntry;
function className(_class) {
    let name = _class.name.range.toString();
    const typeParameters = _class.typeParameters;
    if (typeParameters) {
        name += `<${typeParameters.map(getName).join(", ")}>`;
    }
    return name;
}
exports.className = className;
function isMethodNamed(name) {
    return (stmt) => stmt.kind == as_1.NodeKind.METHODDECLARATION && toString(stmt.name) === name;
}
exports.isMethodNamed = isMethodNamed;
class StringBuilder {
    constructor() {
        this.sb = [];
    }
    push(s) {
        this.sb.push(s);
    }
    finish(separator = "\n") {
        let res = this.sb.join(separator);
        this.sb = [];
        return res;
    }
    get last() { return this.sb[this.sb.length - 1]; }
}
exports.StringBuilder = StringBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOEJBWWU7QUFDZiw2Q0FBMEM7QUFFMUMsTUFBTSxTQUFTLEdBQW1CLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTlELFNBQWdCLFNBQVMsQ0FBQyxJQUFtQixFQUFFLElBQVk7SUFDekQsT0FBOEIsSUFBSSxDQUFDLElBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0FBQ3pELENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxJQUFZO0lBQ3RDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUZELGtDQUVDO0FBR0QsU0FBZ0IsWUFBWSxDQUMxQixJQUFnRSxFQUNoRSxJQUFZOztJQUVaLElBQUksSUFBSSxDQUFDO0lBQ1QsSUFBSSxJQUFJLFlBQVkseUJBQW9CLEVBQUU7UUFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQztLQUNiO1NBQU07UUFDTCxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztLQUN6QjtJQUNELGdDQUFnQztJQUNoQyxPQUFPLE9BQUEsSUFBSSxDQUFDLFVBQVUsMENBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBSyxJQUFJLENBQUM7QUFDMUQsQ0FBQztBQVpELG9DQVlDO0FBRUQsU0FBZ0IsWUFBWSxDQUMxQixJQUEwQixFQUMxQixJQUFZOztJQUVaLE9BQU8sTUFBQSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFFLENBQUM7QUFDbkQsQ0FBQztBQUxELG9DQUtDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLElBQVk7SUFDcEMsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BFLENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLEdBQUcsQ0FBSSxFQUFxQjtJQUMxQyxPQUFPLENBQUMsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRkQsa0JBRUM7QUFFRCxTQUFnQixRQUFRLENBQUMsSUFBVTtJQUNqQyxPQUFPLHVCQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFGRCw0QkFFQztBQU9ELFNBQWdCLE9BQU8sQ0FBQyxJQUE2QjtJQUNuRCxJQUFJLElBQUksWUFBWSxhQUFRLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQzlCO0lBQ0QsSUFBSSxJQUFJLFlBQVkscUJBQWdCLElBQUksSUFBSSxZQUFZLHlCQUFvQixFQUFFO1FBQzVFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNwQyxDQUFDO0FBUkQsMEJBUUM7QUFFRCxTQUFnQixTQUFTLENBQWlCLElBQU87SUFDL0MsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUZELDhCQUVDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLE1BQWM7SUFDeEMsT0FBTyxNQUFNLENBQUMsVUFBVSxJQUFJLGVBQVUsQ0FBQyxVQUFVLENBQUM7QUFDcEQsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLE1BQWdEO0lBQ3hFLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDN0MsSUFBSSxjQUFjLEVBQUU7UUFDbEIsSUFBSSxJQUFJLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUN2RDtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQVBELDhCQU9DO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVk7SUFDeEMsT0FBTyxDQUFDLElBQTBCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksYUFBUSxDQUFDLGlCQUFpQixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDO0FBQ2pILENBQUM7QUFGRCxzQ0FFQztBQUVELE1BQWEsYUFBYTtJQUExQjtRQUNVLE9BQUUsR0FBYSxFQUFFLENBQUM7SUFhNUIsQ0FBQztJQVhDLElBQUksQ0FBQyxDQUFTO1FBQ1osSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSTtRQUNyQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELElBQUssSUFBSSxLQUFhLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FDekQ7QUFkRCxzQ0FjQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERlY29yYXRvck5vZGUsXG4gIElkZW50aWZpZXJFeHByZXNzaW9uLFxuICBEZWNsYXJhdGlvblN0YXRlbWVudCxcbiAgU291cmNlLFxuICBOb2RlLFxuICBTb3VyY2VLaW5kLFxuICBDbGFzc0RlY2xhcmF0aW9uLFxuICBUeXBlTm9kZSxcbiAgTm9kZUtpbmQsXG4gIE5hbWVkVHlwZU5vZGUsXG4gIEludGVyZmFjZURlY2xhcmF0aW9uLFxufSBmcm9tIFwiLi4vYXNcIjtcbmltcG9ydCB7IEFTVEJ1aWxkZXIgfSBmcm9tIFwiLi9hc3RCdWlsZGVyXCI7XG5cbmNvbnN0IGNsb25lRGVlcDogPFQ+KHQ6IFQpID0+IFQgPSByZXF1aXJlKFwibG9kYXNoLmNsb25lZGVlcFwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29yYXRlcyhub2RlOiBEZWNvcmF0b3JOb2RlLCBuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICg8SWRlbnRpZmllckV4cHJlc3Npb24+bm9kZS5uYW1lKS50ZXh0ID09PSBuYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWNvcmF0b3IobmFtZTogc3RyaW5nKTogKG5vZGU6IERlY29yYXRvck5vZGUpID0+IGJvb2xlYW4ge1xuICByZXR1cm4gKG5vZGUpID0+IGRlY29yYXRlcyhub2RlLCBuYW1lKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaGFzRGVjb3JhdG9yKFxuICBub2RlOiBEZWNsYXJhdGlvblN0YXRlbWVudCB8IHtkZWNsYXJhdGlvbjogRGVjbGFyYXRpb25TdGF0ZW1lbnR9LFxuICBuYW1lOiBzdHJpbmdcbik6IGJvb2xlYW4ge1xuICBsZXQgZGVjbDtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBEZWNsYXJhdGlvblN0YXRlbWVudCkge1xuICAgIGRlY2wgPSBub2RlO1xuICB9IGVsc2Uge1xuICAgIGRlY2wgPSBub2RlLmRlY2xhcmF0aW9uOyBcbiAgfSBcbiAgLy8gYmVjYXVzZSBpdCBjb3VsZCBiZSB1bmRlZmluZWRcbiAgcmV0dXJuIGRlY2wuZGVjb3JhdG9ycz8uc29tZShpc0RlY29yYXRvcihuYW1lKSkgPT0gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlY29yYXRvcihcbiAgbm9kZTogRGVjbGFyYXRpb25TdGF0ZW1lbnQsXG4gIG5hbWU6IHN0cmluZ1xuKTogRGVjb3JhdG9yTm9kZSB7XG4gIHJldHVybiBub2RlLmRlY29yYXRvcnM/LmZpbmQoaXNEZWNvcmF0b3IobmFtZSkpITtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlicmFyeShub2RlOiBTb3VyY2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIG5vZGUuaXNMaWJyYXJ5IHx8IG5vZGUuaW50ZXJuYWxQYXRoLnN0YXJ0c1dpdGgoXCJ+bGliL3J0L1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdDxUPihmbjogKHQ6IFQpID0+IGJvb2xlYW4pOiAodDogVCkgPT4gYm9vbGVhbiB7XG4gIHJldHVybiAodDogVCkgPT4gIWZuKHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcobm9kZTogTm9kZSk6IHN0cmluZyB7XG4gIHJldHVybiBBU1RCdWlsZGVyLmJ1aWxkKG5vZGUpO1xufVxuXG5pbnRlcmZhY2UgTmFtZWQge1xuICBuYW1lOiBJZGVudGlmaWVyRXhwcmVzc2lvbjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZShub2RlOiBOb2RlICYgTmFtZWQgfCBUeXBlTm9kZSk6IHN0cmluZyB7XG4gIGlmIChub2RlIGluc3RhbmNlb2YgVHlwZU5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5yYW5nZS50b1N0cmluZygpO1xuICB9XG4gIGlmIChub2RlIGluc3RhbmNlb2YgQ2xhc3NEZWNsYXJhdGlvbiB8fCBub2RlIGluc3RhbmNlb2YgSW50ZXJmYWNlRGVjbGFyYXRpb24pIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2RlLm5hbWUucmFuZ2UudG9TdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lTm9kZTxUIGV4dGVuZHMgTm9kZT4obm9kZTogVCk6IFQge1xuICByZXR1cm4gY2xvbmVEZWVwKG5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVc2VyRW50cnkoc291cmNlOiBTb3VyY2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIHNvdXJjZS5zb3VyY2VLaW5kID09IFNvdXJjZUtpbmQuVVNFUl9FTlRSWTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsYXNzTmFtZShfY2xhc3M6IENsYXNzRGVjbGFyYXRpb24gfCAgSW50ZXJmYWNlRGVjbGFyYXRpb24pOiBzdHJpbmcge1xuICBsZXQgbmFtZSA9IF9jbGFzcy5uYW1lLnJhbmdlLnRvU3RyaW5nKCk7XG4gIGNvbnN0IHR5cGVQYXJhbWV0ZXJzID0gX2NsYXNzLnR5cGVQYXJhbWV0ZXJzO1xuICBpZiAodHlwZVBhcmFtZXRlcnMpIHtcbiAgICBuYW1lICs9IGA8JHt0eXBlUGFyYW1ldGVycy5tYXAoZ2V0TmFtZSkuam9pbihcIiwgXCIpfT5gO1xuICB9XG4gIHJldHVybiBuYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNZXRob2ROYW1lZChuYW1lOiBzdHJpbmcpOiAoXzogRGVjbGFyYXRpb25TdGF0ZW1lbnQpID0+IGJvb2xlYW4ge1xuICByZXR1cm4gKHN0bXQ6IERlY2xhcmF0aW9uU3RhdGVtZW50KSA9PiBzdG10LmtpbmQgPT0gTm9kZUtpbmQuTUVUSE9EREVDTEFSQVRJT04gJiYgdG9TdHJpbmcoc3RtdC5uYW1lKSA9PT0gbmFtZTtcbn1cblxuZXhwb3J0IGNsYXNzIFN0cmluZ0J1aWxkZXIge1xuICBwcml2YXRlIHNiOiBzdHJpbmdbXSA9IFtdO1xuXG4gIHB1c2goczogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zYi5wdXNoKHMpO1xuICB9XG5cbiAgZmluaXNoKHNlcGFyYXRvciA9IFwiXFxuXCIpOiBzdHJpbmcge1xuICAgIGxldCByZXMgPSB0aGlzLnNiLmpvaW4oc2VwYXJhdG9yKTtcbiAgICB0aGlzLnNiID0gW107XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIGdldCAgbGFzdCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5zYlt0aGlzLnNiLmxlbmd0aCAtMV19XG59Il19