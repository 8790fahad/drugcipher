/**
 * Generic enum for basic types.
 * - Function (0)
 * - Block (1)
 * - Expression (2)
 */
export declare enum CoverPointType {
    Function = 0,
    Block = 1,
    Expression = 2
}
/**
 * TODO: later.
 */
export declare type CoverageRenderConfiguration = {
    width: number;
};
/**
 * Data model. Represents file name, line, column, type (enum), and id.
 */
export declare class CoverPoint {
    file: string;
    line: number;
    col: number;
    id: number;
    type: CoverPointType;
    covered: boolean;
    constructor(file: string, line: number, col: number, id: number, type: CoverPointType);
}
/**
 * Model for reports.
 * Calculates input (CoverPoint[]) and outputs statistics
 */
declare class CoverPointReport {
    fileName: string;
    coverPoints: CoverPoint[];
    private calculated;
    private total;
    private totalCovered;
    private expressionTotal;
    private expressionCovered;
    expressionCoveredFinite: boolean;
    private blockTotal;
    private blockCovered;
    blockCoveredFinite: boolean;
    private functionTotal;
    private functionCovered;
    functionCoveredFinite: boolean;
    /** Calculates the statistics. */
    private calculateStats;
    /** Sets this.fileName to a string. */
    constructor(fileName: string);
    /**  Gets the covered percentage as a string. */
    get coveredPercent(): string;
    /** Gets the covered block percentage as a string.*/
    get coveredBlockPercent(): string;
    /** Gets the covered expression percentage as a string. */
    get coveredExpressionPercent(): string;
    /** Gets the covered function percentage as a string.*/
    get coveredFunctionPercent(): string;
    /** Outputs the total number of covered points.*/
    get coveredPointsNumber(): number;
    /** Outputs the total number of uncovered points.*/
    get uncoveredPointsNumber(): number;
}
/**
 * Covers option interface
 */
interface ICoversOptions {
    files?: Array<string>;
}
/**
 * The main class. It houses the initializer, imports, and bindings.
 */
export declare class Covers {
    options: ICoversOptions;
    private coverPoints;
    private loader;
    constructor(options?: ICoversOptions);
    /**
     * Installs the as-covers imports into the loaded's imports object.
     * @param imports - loader
     * @returns - loader
     */
    installImports(imports: any): any;
    /**
     * Sets this.loader to the loader. Lets this access the external loader.
     * @param loader - loader
     */
    registerLoader(loader: any): void;
    /**
     * Tells Covers that a specific line/column should be executed (cover(id)).
     * Adds id to main coverPoints
     * @param filePtr - The pointer to the filename
     * @param id - A specific hash representing the file, col, and line.
     * @param line - Specifies which line it should occur on
     * @param col - Specifies which column it should occur on
     * @param coverType - Enum value. Function, Exression, or Block.
     */
    private coverDeclare;
    /**
     * Lets Covers know if a cover point has been executed.
     * @param id - The id of the point.
     */
    private cover;
    /**
     * Clears all coverPoints.
     * Useful if user wants to clear everything.
     * Will result in an error if anything is executed afterwards.
     */
    reset(): void;
    /**
     * Basic report.
     * Splits everything up into files and calculates statistics.
     * Gets the total statistics and pushes it to the end.
     * @returns Map<string, CoverPointReport>
     */
    createReport(): Map<string, CoverPointReport>;
    /**
     * Returns a table that can be logged.
     * Provides a basic visual overview of statistics.
     * @returns string - Table
     */
    stringify(): string;
    /**
     * Outputs report as YAML
     * @returns String
     */
    toYAML(): string;
    /**
     * Outputs report as CSV
     * @returns String
     */
    toCSV(): string;
    /**
     * Output a JSON report.
     * Provides a report that can be easily read or saved. (.json)
     * @returns Object
     */
    toJSON(): Object;
}
export {};
