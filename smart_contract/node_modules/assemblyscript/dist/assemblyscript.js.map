{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/extra/ast.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/passes/findusedlocals.ts","webpack://assemblyscript/./src/passes/pass.ts","webpack://assemblyscript/./src/passes/rtrace.ts","webpack://assemblyscript/./src/passes/shadowstack.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/terminal.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/webpack/runtime/global","webpack://assemblyscript/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__911__","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","isLong","obj","prototype","__isLong__","Object","defineProperty","value","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","range","name","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","text","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","property","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","tag","parts","rawParts","TemplateLiteralExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","expr","CompiledExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","k","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","assert","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","CommonFlags","NONE","flag","nameNode","IDENTIFIER","nameStr","charCodeAt","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","join","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","TEMPLATE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","COMPILED","Statement","sourceKind","normalizedPath","SOURCE","Array","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","PATH_DELIMITER","simplePath","source","LIBRARY_SUBST","LIBRARY","LIBRARY_ENTRY","off","end","push","l","r","m","s","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","LIBRARY_PREFIX","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","len","cur","isTrivialAlphanum","decorator","BuiltinNames","start","started","argumentsLength","setArgumentsLength","abort","trace","seed","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","clz","ctz","popcnt","rotl","rotr","abs","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","call_indirect","instantiate","idof","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","i64_add","f32_add","f64_add","i32_sub","i64_sub","f32_sub","f64_sub","i32_mul","i64_mul","f32_mul","f64_mul","i32_div_s","i32_div_u","i64_div_s","i64_div_u","f32_div","f64_div","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_load8x8_s","v128_load8x8_u","v128_load16x4_s","v128_load16x4_u","v128_load32x2_s","v128_load32x2_u","v128_load8_splat","v128_load16_splat","v128_load32_splat","v128_load64_splat","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_sat","v128_sub_sat","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_popcnt","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_extend_low","v128_extend_high","i8x16","i16x8","i32x4","i64x2","f32x4","f64x2","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_sat_s","i8x16_add_sat_u","i8x16_sub_sat_s","i8x16_sub_sat_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_all_true","i8x16_bitmask","i8x16_popcnt","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i8x16_shuffle","i8x16_swizzle","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_sat_s","i16x8_add_sat_u","i16x8_sub_sat_s","i16x8_sub_sat_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_extend_low_i8x16_s","i16x8_extend_low_i8x16_u","i16x8_extend_high_i8x16_s","i16x8_extend_high_i8x16_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_extend_low_i16x8_s","i32x4_extend_low_i16x8_u","i32x4_extend_high_i16x8_s","i32x4_extend_high_i16x8_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_mul","i64x2_abs","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_all_true","i64x2_bitmask","i64x2_eq","i64x2_ne","i64x2_lt_s","i64x2_lt_u","i64x2_le_s","i64x2_le_u","i64x2_gt_s","i64x2_gt_u","i64x2_ge_s","i64x2_ge_u","i64x2_extend_low_i32x4_s","i64x2_extend_low_i32x4_u","i64x2_extend_high_i32x4_s","i64x2_extend_high_i32x4_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","i31_new","i31_get","data_end","stack_pointer","heap_base","rtti_base","visit_globals","visit_members","tostack","isFinite","ERROR","WARNING","INFO","Function","memory_size","memory_grow","memory_copy","memory_fill","memory_data","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Int64Array","Uint64Array","Float32Array","Float64Array","String_raw","wasiAbort","wasiTrace","wasiSeed","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","arg0","compileExpression","operands","Type","currentType","isValue","unary","UnaryOp","ClzI32","options","isWasm64","ClzI64","error","DiagnosticCode","Operation_0_cannot_be_applied_to_type_1","reportNode","typeArgumentsRange","builtin_ctz","CtzI32","CtzI64","builtin_popcnt","PopcntI32","PopcntI64","builtin_rotl","arg1","flow","currentFlow","temp1","getTempLocal","findUsedLocals","setLocalFlag","index","LocalFlags","WRAPPED","temp2","ret","binary","BinaryOp","OrI32","ShlI32","local_tee","AndI32","ShrU32","local_get","NativeType","I32","SubI32","freeTempLocal","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","auto","XorI32","AddI32","ShrI32","usizeType","XorI64","AddI64","ShrI64","nativeSizeType","I64","AbsF32","AbsF64","builtin_max","isNumericLiteral","op","GtI32","GtU32","GtI64","GtU64","MaxF32","MaxF64","nativeType","toNativeType","builtin_min","LtI32","LtU32","LtI64","LtU64","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32ToI32","ReinterpretF64ToI64","ReinterpretI32ToF32","ReinterpretI64ToF64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","isIntegerValue","numOperands","immOffset","immAlign","byteSize","evaluateImmediateOffset","evaluateImmediateAlign","isSignedIntegerValue","builtin_store","void","contextIsExact","inType","convertExpression","builtin_add","isNumericValue","makeAdd","builtin_sub","makeSub","builtin_mul","makeMul","builtin_div","makeDiv","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","AtomicRMWOp","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","arg2","builtin_atomic_wait","builtin_diagnostic","category","checkTypeAbsent","emitDiagnostic","User_defined_0","DiagnosticCategory","nop","builtin_conversion","builtin_i8x16","precomp","runExpression","ExpressionRunnerFlags","PreserveSideeffects","writeI8","getConstValueI32","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","idx","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","SIMDExtractOp","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","SIMDReplaceOp","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","isPowerOf2","mask","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleI8x16","builtin_v128_load_splat","simd_load","SIMDLoadOp","Load8Splat","Load16Splat","Load32Splat","Load64Splat","builtin_v128_load_ext","Load8x8S","Load8x8U","Load16x4S","Load16x4U","Load32x2S","Load32x2U","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI16x8","MulI32x4","MulI64x2","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_sat","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_sat","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqI64x2","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeI64x2","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtI64x2","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeI64x2","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtI64x2","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeI64x2","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsI64x2","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","builtin_v128_extend_low","ExtendLowI8x16ToI16x8","ExtendLowU8x16ToU16x8","ExtendLowI16x8ToI32x4","ExtendLowU16x8ToU32x4","ExtendLowI32x4ToI64x2","ExtendLowU32x4ToU64x2","builtin_v128_extend_high","ExtendHighI8x16ToI16x8","ExtendHighU8x16ToU16x8","ExtendHighI16x8ToI32x4","ExtendHighU16x8ToU32x4","ExtendHighI32x4ToI64x2","ExtendHighU32x4ToU64x2","builtin_v128_shl","simd_shift","SIMDShiftOp","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","BitmaskI64x2","builtin_v128_popcnt","PopcntI8x16","ensureVisitMembersOf","instance","visitRef","program","nativeSizeSize","visitInstance","base","call","internalName","None","hasVisitImpl","isDeclaredInLibrary","visitPrototype","lookupInSelf","ElementKind","FUNCTION_PROTOTYPE","resolver","resolveFunction","compileFunction","visitSignature","visitThisType","thisType","parameterTypes","isStrictlyAssignableTo","needsTempValue","_values","Map_values","j","member","FIELD","parent","fieldOffset","memoryOffset","if","addFunction","createType","flatten","typeToRuntimeFlags","alignLog2","is","evaluateConstantType","Expected_0_type_arguments_but_got_1","Expected_0_arguments_but_got_1","argumentsRange","usize64","getConstValueI64High","getConstValueI64Low","usize32","naturalAlign","align","_0_must_be_a_power_of_two","feature","hasFeature","Feature_0_is_not_enabled","featureToString","setCurrentTypeOnError","Type_0_is_not_generic","expected","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","i64_is_i32","i64_low","i64_is_u32","i64_high","thisOperand","builtins","Map","function_builtins","set","isFloatValue","isBooleanValue","classReference","getClass","isAssignableTo","stringInstance","extends","arrayPrototype","isNullableReference","element","lookupExpression","ReportMode","SWALLOW","getExpressionId","ExpressionId","Const","signatureReference","Type_0_has_no_call_signatures","i64_new","getClassOrWrapper","firstOperand","isLiteralKind","String_literal_expected","fieldName","classMembers","has","get","Type_0_has_no_property_1","nextMemoryOffset","resultType","isInternalReference","getSignature","ensureStaticString","id","hasDecorator","DecoratorFlags","maybeDropCondition","LocalGet","NeF32","getLocalGetIndex","F32","temp","NeF64","F64","EqF32","SubF32","EqF64","SubF64","isAny","makeIsTrueish","compileCallDirect","offset","elementType","valuesOperand","Array_literal_expected","numElements","exprs","isStatic","makeZero","buf","writeStaticBuffer","byteLength","addAlignedMemorySegment","i31ref","fromType","isChangeableTo","Type_0_cannot_be_changed_to_type_1","nonNullableType","noAssert","evaled","Default","getExpressionType","getConstValueF32","getConstValueF64","makeAbort","EqzI32","EqzI64","ref_is","RefIsOp","RefIsNull","alreadyUnchecked","unset","indexArg","operandExprs","nativeParamTypes","classInstance","This_expression_is_not_constructable","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","functionPrototype","ftype","requiredParameters","functionArg","shift","thisArg","_this_cannot_be_referenced_in_current_location","compileCallIndirect","Not_implemented_0","isizeType","writeI16","writeI32","writeF32","writeF64","AndV128","OrV128","XorV128","AndnotV128","builtin_v128_bitwise_unary","NotV128","simd_ternary","builtin_v128_bitwise_ternary","SIMDTernaryOp","Bitselect","AnyTrueV128","runtimeFeatures","elementsByName","global","INLINED","constantIntegerValue","global_get","block","managedClasses","nextId","_keys","Map_keys","instanceId","isPointerfree","return","current","switch","SubI64","count","data","abvInstance","arrayBufferViewInstance","abvPrototype","setPrototype","mapPrototype","staticArrayPrototype","lastId","getArrayValueType","getTypeArgumentsTo","rttiFlags","segment","addGlobal","instanceofInstance","stmts","instances","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","funcref","externref","anyref","eqref","dataref","u8x16","u16x8","u32x4","u64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_EXPORT_RUNTIME","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","ASC_VERSION_MAJOR","ASC_VERSION_MINOR","ASC_VERSION_PATCH","I8","I16","Isize","U8","U16","U32","U64","Usize","Bool","V128","Funcref","Externref","Anyref","Eqref","I31ref","Dataref","String","StaticArray","Set","ArrayBufferView","ArrayBuffer","Mathf","NativeMath","NativeMathf","TemplateStringsArray","ipow32","ipow64","alloc","realloc","free","new_","renew","link","collect","typeinfo","instanceof_","visit","newBuffer","newArray","Feature","Target","Typeinfo","TypeinfoFlags","ExportNames","target","WASM32","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","sourceMap","explicitStart","memoryBase","tableBase","globalAliases","features","noUnsafe","pedantic","lowMemoryLimit","exportRuntime","stackSize","bundleMajorVersion","bundleMinorVersion","bundlePatchVersion","optimizeLevelHint","shrinkLevelHint","WASM64","isize64","isize32","Constraints","RuntimeFeatures","memory","table","runtimeFunctions","runtimeGlobals","Compiler","DiagnosticEmitter","diagnostics","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","_reusableCallExpression","create","setLowMemoryUnused","featureFlags","FeatureFlags","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","makeNativeFunction","Signature","currentBody","shadowStack","ShadowStackPass","compile","hasShadowStack","initialize","actualFunction","startFunctionBody","files","filesByName","file","USER_ENTRY","compileFile","compileExports","ensureModuleExports","requireFunction","hasExport","addFunctionExport","requireGlobal","compileGlobal","addGlobalExport","functionsToCompile","Set_values","clear","compileClassInstanceOf","VIRTUAL","INSTANCE","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","delete","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","UNLIMITED_MEMORY","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","functionTableNames","addFunctionTable","UNLIMITED_TABLE","global_set","ensureArgumentsLength","startIsEmpty","isWasi","unshift","funcRef","nativeParams","nativeResults","typesToNativeTypes","additionalLocals","finalize","setStart","walkModule","lookup","RtraceMemory","elementName","ensureModuleExport","exportsStar","prefix","functionInstances","instanceName","GENERIC","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","identifierNode","CLASS_PROTOTYPE","classPrototype","classInstances","PROPERTY_PROTOTYPE","propertyInstance","CONST","STATIC","READONLY","exportName","Cannot_export_a_mutable_global","ENUMVALUE","enumValue","isImmutable","functionInstance","hasManagedOperands","noteExport","getManagedOperandIndices","PROPERTY","getterInstance","setterInstance","fieldInstance","getterExportName","compileFieldGetter","internalGetterName","internalGetterSignature","setterExportName","compileFieldSetter","internalSetterName","internalSetterSignature","isUnmanaged","ENUM","INTERFACE_PROTOTYPE","NAMESPACE","TYPEDEFINITION","subPrefix","implicitExport","SCOPED","memberName","PRIVATE","compileMembers","compileEnum","resolveClass","compileClass","resolveProperty","compileProperty","compileElement","exportStar","normalizedPathWithoutExtension","pathWithIndex","File_0_not_found","startFunction","startSignature","previousBody","previousFlow","compileTopLevelStatement","locals","localsByIndex","numLocals","varTypes","ERRORED","initExpr","typeNode","initializerNode","RESOLVED","resolvedType","resolveType","Type_expected","setType","checkTypeSupported","atEnd","Type_0_is_not_assignable_to_type_1","AMBIENT","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","GlobalGet","fromName","getGlobalGetName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","constantValueKind","constantFloatValue","compileInlineConstant","Decorator_0_is_not_valid_here","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","setConstantIntegerValue","MODULE_EXPORT","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","addFunctionImport","getFunction","ABSTRACT","INTERFACE","Function_implementation_is_missing_or_not_immediately_following_the_declaration","thisLocal","lookupLocal","bodyStartIndex","compileStatements","GET","SET","canOverflow","isNonnull","allocStmts","makeConditionalAllocation","makeFieldInitializationInConstructor","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","instanceMembers","compileField","getterRef","nativeValueType","nativeThisType","setterRef","bodyExpr","linkInstance","compilePropertyGetter","compilePropertySetter","buffer","alignment","MemorySegment","computeBlockStart64","stringValue","ptr","ensureStaticStringPtr","stringSegment","totalOverhead","segments","createBuffer","addRuntimeMemorySegment","writeI64","arrayBufferInstance","OBJECTInstance","writeField","bufferSegment","arrayInstance","bufferLength","readI32","arrayLength","bufferAddress","STUB","memorySegment","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","Nop","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","Block","getBlockName","getBlockChildCount","getBlockChildAt","needsExplicitUnreachable","outerFlow","innerFlow","fork","freeScopedLocals","inherit","labelNode","breakLabel","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","drop","tcond","local_set","Flow","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritNonnullIfTrue","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritNonnullIfFalse","inheritMutual","valueExpression","constraints","inlineReturnLabel","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","message","newArgs","numDeclarations","initializers","uniqueMap","contextualTypeArguments","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","local","Local","parentFunction","setConstantFloatValue","scopedLocals","existing","errorRelated","Duplicate_identifier_0","_const_declarations_must_be_initialized","LET","existingLocal","getScopedLocal","isNative","addScopedLocal","CONSTANT","addLocal","makeLocalAssignment","isShortIntegerValue","doCompileWhileStatement","computeSmallIntegerShift","computeSmallIntegerMask","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","compiled","wrap","ensureSmallIntegerWrap","explicit","makeRuntimeNonNullCheck","isExternalReference","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32ToF64","DemoteF64ToF32","saturating","isLongIntegerValue","TruncSatF32ToI64","TruncF32ToI64","TruncSatF32ToI32","TruncF32ToI32","TruncSatF32ToU64","TruncF32ToU64","TruncSatF32ToU32","TruncF32ToU32","TruncSatF64ToI64","TruncF64ToI64","TruncSatF64ToI32","TruncF64ToI32","TruncSatF64ToU64","TruncF64ToU64","TruncSatF64ToU32","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64ToI32","ExtendI32ToI64","ExtendU32ToU64","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","PREFIX","AS","NONNULL","exceptVoid","info","Expression_is_never_null","leftExpr","leftType","rightExpr","rightType","commonType","compound","Token","LESSTHAN","overload","lookupOverload","OperatorKind","LT","compileBinaryOverload","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","makeLt","GREATERTHAN","GT","makeGt","LESSTHAN_EQUALS","LE","makeLe","GREATERTHAN_EQUALS","GE","makeGe","EQUALS_EQUALS_EQUALS","EQUALS_EQUALS","EQ","operatorTokenToString","makeEq","EXCLAMATION_EQUALS_EQUALS","EXCLAMATION_EQUALS","NE","makeNe","EQUALS","compileAssignment","PLUS_EQUALS","PLUS","ADD","The_0_operator_cannot_be_applied_to_type_1","MINUS_EQUALS","MINUS","SUB","ASTERISK_EQUALS","ASTERISK","MUL","ASTERISK_ASTERISK_EQUALS","ASTERISK_ASTERISK","POW","makePow","SLASH_EQUALS","SLASH","DIV","PERCENT_EQUALS","PERCENT","REM","makeRem","LESSTHAN_LESSTHAN_EQUALS","LESSTHAN_LESSTHAN","intType","BITWISE_SHL","makeShl","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN","BITWISE_SHR","makeShr","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","BITWISE_SHR_U","makeShru","AMPERSAND_EQUALS","AMPERSAND","BITWISE_AND","makeAnd","BAR_EQUALS","BAR","BITWISE_OR","makeOr","CARET_EQUALS","CARET","BITWISE_XOR","makeXor","AMPERSAND_AMPERSAND","rightFlow","cloneExpression","BAR_BAR","targetType","getTypeOfElement","makeAssignment","currentThisExpression","currentElementExpression","LtF32","LtF64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","ref_eq","NeI32","AddF32","AddF64","MulI32","MulI64","MulF32","MulF64","Cannot_find_name_0","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI64","ShrU64","AndI64","OrI64","operatorInstance","valueExpr","thisExpression","LOCAL","Variable_0_used_before_its_declaration","checkUnsafe","propertyPrototype","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","INDEXED_SET","INDEXED_GET","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","Indexed_access_may_involve_bounds_checking","indexExpression","tee","isLocalFlag","isConstructor","setThisFieldFlag","FieldFlags","INITIALIZED","fieldParent","makeFieldAssignment","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","localIndex","unsetLocalFlag","field","fieldType","nativeFieldType","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","_super_can_only_be_referenced_in_a_derived_class","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","maybeInferCall","inlinedValue","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Expression_cannot_be_represented_by_a_type","createCallExpression","resolveTypeArguments","callee","BuiltinContext","fn","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","hasRest","minimum","maximum","relatedReportNode","isLibrary","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","includes","makeCallInline","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","paramType","paramExpr","immediatelyDropped","numParameters","createInline","usedLocals","argumentLocal","getParameterName","addScopedAlias","initType","checkFieldInitializationInFlow","original","stub","varargsStub","originalSignature","originalParameterTypes","originalParameterDeclarations","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","numNames","ofN","Optional_parameter_must_have_an_initializer","virtualStub","ref","overloadPrototypes","overloads","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","isBound","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","boundPrototype","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","n","needsVarargsStub","calledName","addCase","extendees","getAllExtendees","a","b","extendee","removeFunction","render","isConstZero","Function_0_is_virtual_and_will_not_be_inlined","theOperands","slice","allOptionalsAreConstant","compilesToConst","resolved","lastOperand","getSideEffects","SideEffects","WritesGlobal","lastOperandType","operandsTostack","makeCallIndirect","numExpressions","targetExpression","resolveExpression","indexedGet","clone","isNamed","isSemanticallyAnonymous","FunctionPrototype","nextAnonymousId","contextualSignature","signatureNode","numPresentParameters","parameterNode","isTypeOmitted","thisTypeNode","outer","worked","ensureRuntimeFunction","fname","asNullable","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","lookupIdentifierExpression","localType","globalType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime","namedType","hasTypeArguments","resolveTypeName","makeInstanceofClass","expectedType","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","intValue","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileTemplateLiteral","compileObjectLiteral","numParts","stringType","addStaticBuffer","joinInstance","getMethod","indexedSetInstance","makeToString","tsaArrayInstance","templateStringsArrayInstance","first","arraySegment","partExprs","rawExprs","addStaticArrayHeader","rawHeaderSegment","createCompiledExpression","nativeRange","compileCallExpressionLike","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","arrayAddress","newArrayInstance","nativeArrayType","dataStartMember","bufferSize","newBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","ctorPrototype","constructorPrototype","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_does_not_exist_on_type_1","Property_0_is_private_and_only_accessible_within_class_1","PROTECTED","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","resolveClassInclTypeArguments","constructorInstance","baseClass","baseCtor","makeNativeFunctionDeclaration","setResolvedInstance","relatedNode","didCheckFieldInitialization","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","ctorInstance","ctxType","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","Unreachable","PLUS_PLUS","POSTFIX_INC","getLocalSetValue","compileUnaryOverload","makeOne","MINUS_MINUS","POSTFIX_DEC","setValue","NegF32","NegF64","PREFIX_INC","PREFIX_DEC","EXCLAMATION","NOT","TILDE","BITWISE_NOT","makeNegOne","TYPEOF","compileTypeof","typeString","REPORT","Extend8I32","Extend16I32","addDebugInfoFile","debugInfoRef","debugLocations","supported","parameterReportNode","v128_zero","ref_null","toStringInstance","toStringSignature","identifierAndSignatureRange","toStringReturnType","allocInstance","newInstance","thisIndex","makeAllocation","thisLocalIndex","fieldPrototype","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","lineAt","columnAt","mangleInternalName","arg","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","sb","indentLevel","build","indent","typeToString","originalName","walk","TSDBuilder","remainingMembers","isInterface","extendsNode","code","diagnosticCategoryToString","PEDANTIC","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_CYAN","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","DiagnosticMessage","relatedRange","replace","thisRange","otherRange","thisRelatedRange","otherRelatedRange","formatDiagnosticContext","isLineBreak","isColorsEnabled","COLOR_RESET","useColors","showContext","wasColorsEnabled","setColorsEnabled","relatedSource","withRange","seenInSource","seenMessagesAtPos","ASTBuilder","visitNode","finish","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","elements","visitArguments","numArgs","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitTemplateLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","visitRawString","quote","last","lastCharPos","isDefault","serializeExternalModifiers","numImplementsTypes","numMembers","numValues","serializeAccessModifiers","numTypeParameters","firstDeclaration","REST","OPTIONAL","DECLARE","PUBLIC","FlowFlags","ConditionKind","localFlags","thisFieldFlags","inlineFunction","initThisFieldFlags","nextInlineId","resetBreakContext","branch","except","temps","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempAnyrefs","tempEqrefs","tempI31refs","tempDatarefs","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","scopedAlias","scope","localsByName","defaultIfInlined","actualParent","actualClass","fieldFlags","nextBreakId","stack","breakStack","otherFlags","conditionKind","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","key","before","after","LocalSet","isLocalTee","getLocalSetIndex","iff","If","getIfFalse","getIfCondition","getIfTrue","Unary","getUnaryOp","getUnaryValue","Binary","getBinaryOp","getBinaryLeft","getBinaryRight","exprType","canConversionOverflow","Load","signed","isLoadSigned","getLoadBytes","Select","getSelectThen","getSelectElse","Call","instancesByName","getCallTarget","levels","formatDiagnosticMessage","Options","alias","DEFAULT_STACK_SIZE","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","FEATURE_GC","FEATURE_MEMORY64","optimizeLevel","shrinkLevel","Program","diagnosticsOffset","getSource","isEntry","parser","parseFile","nextFile","getDependee","util","Auto","ExternalKind","SIMDLoadStoreLaneOp","RefAsOp","BrOnOp","useShadowStack","sizeType","hasTemporaryFunction","cachedStringsToPointers","cachedPointersToStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","i64_is","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","_BinaryenRefEq","_last","isWam64","ClzSize","CtzSize","PopcntSize","EqzSize","_BinaryenUnary","AddSize","SubSize","MulSize","DivISize","DivUSize","RemISize","RemUSize","AndSize","OrSize","XorSize","ShlSize","ShrISize","ShrUSize","RotlSize","RotrSize","EqSize","NeSize","LtISize","LtUSize","LeISize","LeUSize","GtISize","GtUSize","GeISize","GeUSize","_BinaryenBinary","_BinaryenMemorySize","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","replacement","_BinaryenAtomicCmpxchg","timeout","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","allocPtrArray","_BinaryenBlock","single","Return","Throw","singleType","_BinaryenBreak","_BinaryenDrop","ReadsLocal","ReadsGlobal","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","tableName","_BinaryenUnreachable","dest","_BinaryenMemoryCopy","_BinaryenMemoryFill","eventName","_BinaryenThrow","_BinaryenRethrow","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","_BinaryenSIMDShuffle","c","_BinaryenSIMDTernary","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIs","_BinaryenRefAs","_BinaryenRefFunc","_BinaryenI31New","_BinaryenI31Get","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","func","_BinaryenSetStart","cStr1","cStr2","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","_BinaryenGetExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","tableRef","_BinaryenGetTable","_BinaryenTableSetInitial","_BinaryenTableSetMax","_BinaryenAddTable","_BinaryenAddActiveElementSegment","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetFastMath","_BinaryenSetFastMath","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenGetAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","_BinaryenModuleGetFeatures","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","debugInfo","setOptimizeLevel","setShrinkLevel","setDebugInfo","setFastMath","clearPassArguments","setAlwaysInlineMaxSize","setFlexibleInlineMaxSize","setOneCallerInlineMaxSize","setAllowInliningFunctionsWithLoops","getLowMemoryUnused","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","__i32_load8_u","readBuffer","watFormat","cached","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenLocalGetGetIndex","globalName","_BinaryenGlobalGetGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","labelPostfix","labels","defaultLabel","lastCase","output","Break","numChildren","Dependee","Parser","sources","backlog","seenlog","donelog","onComment","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","dependee","Source","USER","tn","Tokenizer","skip","ENDOFFILE","parseTopLevelStatement","skipStatement","startPos","AT","tokenPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","DEFAULT","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","peek","nextTokenPos","parseEnum","parseVariable","VAR","parseFunction","state","mark","abstractStart","abstractEnd","nextTokenOnNewLine","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","IdentifierHandling","PREFER","parseNamespace","parseExportImport","parseImport","TYPE","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","DOT","Identifier_expected","acceptParenthesized","suppressErrors","token","OPENPAREN","isNullableSignature","tryParseFunctionType","CLOSEPAREN","_0_expected","Unexpected_token","innerType","parseType","createNamedType","STRINGLITERAL","parseTypeName","parameter","notNullStart","notNull","OPENBRACKET","bracketStart","CLOSEBRACKET","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","DOT_DOT_DOT","COLON","QUESTION","A_rest_parameter_cannot_be_optional","param","createParameter","createOmittedType","EQUALS_GREATERTHAN","createFunctionType","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","SEMICOLON","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","createVariableDeclaration","OPENBRACE","CLOSEBRACE","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","nextToken","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","EXTENDS","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createFunctionDeclaration","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","IMPLEMENTS","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","isGetter","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","ALWAYS","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","createNamespaceDeclaration","parseExportMember","FROM","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","OF","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","ELSE","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","CASE","createSwitchCase","_case_or_default_expected","createThrowStatement","CATCH","FINALLY","createTryStatement","createTypeDeclaration","createVoidStatement","createWhileStatement","YIELD","DELETE","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","TEMPLATELITERAL","parseTemplateLiteral","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","INTEGERLITERAL","readInteger","checkForIdentifierStartAfterNumericLiteral","createIntegerLiteralExpression","FLOATLITERAL","readFloat","createFloatLiteralExpression","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Unexpected_end_of_text","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","readStringStart","readStringEnd","readingTemplateString","createTemplateLiteralExpression","potentiallyGeneric","skipBlock","depth","IN","Precedence","FindUsedLocalsVisitor","Visitor","used","localGet","localSet","singleton","visitor","_currentExpression","currentExpression","previousExpression","visitLabel","visitBlock","visitIf","Loop","visitLoop","_BinaryenBreakGetValue","visitBreak","Switch","_BinaryenSwitchGetDefaultName","_BinaryenSwitchGetNumNames","_BinaryenSwitchGetNameAt","_BinaryenSwitchGetCondition","_BinaryenSwitchGetValue","visitSwitch","visitCallPre","visitName","visitCall","CallIndirect","visitCallIndirectPre","_BinaryenCallIndirectGetTarget","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","visitCallIndirect","visitIndex","visitLocalGet","visitLocalSet","visitGlobalGet","GlobalSet","_BinaryenGlobalSetGetName","_BinaryenGlobalSetGetValue","visitGlobalSet","visitLoad","Store","visitStore","visitConst","visitUnary","visitBinary","visitSelect","Drop","visitDrop","visitReturn","MemorySize","visitMemorySize","MemoryGrow","visitMemoryGrow","visitNop","visitUnreachable","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","visitAtomicRMW","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","visitAtomicCmpxchg","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","visitAtomicWait","AtomicNotify","_BinaryenAtomicNotifyGetPtr","_BinaryenAtomicNotifyGetNotifyCount","visitAtomicNotify","AtomicFence","visitAtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","visitSIMDExtract","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","visitSIMDReplace","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","visitSIMDShuffle","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","visitSIMDTernary","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","visitSIMDShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","visitSIMDLoad","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","visitMemoryInit","DataDrop","visitDataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","visitMemoryCopy","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","visitMemoryFill","Pop","visitPop","RefNull","visitRefNull","RefIs","_BinaryenRefIsGetValue","visitRefIs","RefFunc","_BinaryenRefFuncGetFunc","visitRefFunc","RefEq","_BinaryenRefEqGetLeft","_BinaryenRefEqGetRight","visitRefEq","Try","_BinaryenTryGetBody","numCatchBodies","_BinaryenTryGetNumCatchBodies","_BinaryenTryGetCatchBodyAt","visitTry","visitEvent","_BinaryenThrowGetEvent","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","visitThrow","Rethrow","visitRethrow","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","visitTupleMake","TupleExtract","_BinaryenTupleExtractGetTuple","visitTupleExtract","I31New","_BinaryenI31NewGetValue","visitI31New","I31Get","_BinaryenI31GetGetI31","visitI31Get","CallRef","visitCallRef","RefTest","visitRefTest","RefCast","visitRefCast","BrOn","visitBrOn","RttCanon","visitRttCanon","RttSub","visitRttSub","StructNew","visitStructNew","StructGet","visitStructGet","StructSet","visitStructSet","ArrayNew","visitArrayNew","ArrayGet","visitArrayGet","ArraySet","visitArraySet","ArrayLen","visitArrayLen","RefAs","visitRefAs","replaceChild","search","child","_BinaryenBlockSetChildAt","_BinaryenIfSetCondition","_BinaryenIfSetIfTrue","_BinaryenIfSetIfFalse","_BinaryenLoopSetBody","_BinaryenBreakSetCondition","_BinaryenBreakSetValue","_BinaryenSwitchSetCondition","_BinaryenSwitchSetValue","_BinaryenCallSetOperandAt","_BinaryenCallIndirectSetTarget","_BinaryenCallIndirectSetOperandAt","_BinaryenLocalSetSetValue","_BinaryenGlobalSetSetValue","_BinaryenLoadSetPtr","_BinaryenStoreSetPtr","_BinaryenStoreSetValue","_BinaryenUnarySetValue","_BinaryenBinarySetLeft","_BinaryenBinarySetRight","_BinaryenSelectSetIfTrue","_BinaryenSelectSetIfFalse","_BinaryenSelectSetCondition","_BinaryenDropSetValue","_BinaryenReturnSetValue","_BinaryenMemoryGrowSetDelta","_BinaryenAtomicRMWSetPtr","_BinaryenAtomicRMWSetValue","_BinaryenAtomicCmpxchgSetPtr","_BinaryenAtomicCmpxchgSetExpected","repl","_BinaryenAtomicCmpxchgSetReplacement","_BinaryenAtomicWaitSetPtr","_BinaryenAtomicWaitSetExpected","_BinaryenAtomicWaitSetTimeout","_BinaryenAtomicNotifySetPtr","_BinaryenAtomicNotifySetNotifyCount","_BinaryenSIMDExtractSetVec","_BinaryenSIMDReplaceSetVec","_BinaryenSIMDReplaceSetValue","_BinaryenSIMDShuffleSetLeft","_BinaryenSIMDShuffleSetRight","_BinaryenSIMDTernarySetA","_BinaryenSIMDTernarySetB","_BinaryenSIMDTernarySetC","_BinaryenSIMDShiftSetVec","_BinaryenSIMDShiftSetShift","_BinaryenSIMDLoadSetPtr","_BinaryenMemoryInitSetDest","_BinaryenMemoryInitSetOffset","_BinaryenMemoryInitSetSize","_BinaryenMemoryCopySetDest","_BinaryenMemoryCopySetSource","_BinaryenMemoryCopySetSize","_BinaryenMemoryFillSetDest","_BinaryenMemoryFillSetValue","_BinaryenMemoryFillSetSize","_BinaryenRefIsSetValue","_BinaryenRefEqSetLeft","_BinaryenRefEqSetRight","_BinaryenTrySetBody","catchBody","_BinaryenTrySetCatchBodyAt","_BinaryenThrowSetOperandAt","_BinaryenTupleMakeSetOperandAt","_BinaryenTupleExtractSetTuple","_BinaryenI31NewSetValue","i31Expr","_BinaryenI31GetSetI31","_currentFunction","_currentGlobal","currentFunction","currentGlobal","walkFunctions","walkGlobals","moduleRef","_BinaryenGetNumFunctions","walkFunction","_BinaryenGetFunctionByIndex","_BinaryenGetNumGlobals","walkGlobal","_BinaryenGetGlobalByIndex","init","_BinaryenFunctionSetBody","parentExpressionOrNull","_BinaryenExpressionFinalize","Pass","seenStores","ptrType","readStringCached","checkRT","matchPattern","needsSlot","slotMaps","tempMaps","exportMap","hasStackCheckFunction","callSlotOffset","callSlotStack","slotMap","slotIndex","managedOperandIndices","tempMap","_BinaryenFunctionGetNumLocals","ptrBinaryAdd","ptrBinarySub","ptrConst","makeStackCheck","frameSize","remain","nativeSource","numSlots","match","noteSlot","getSharedTemp","ptrSize","updateCallOperands","callIndirect","replaceCurrent","numVars","vars","exportRef","_BinaryenExportGetKind","internalNameRef","_BinaryenExportGetValue","externalNameRef","_BinaryenExportGetName","expandType","numParams","wrapperName","wrapperNameRef","makeStackOffset","instrumentReturns","InstrumentReturns","makeStackFill","bodyType","updateFunction","updateExport","parentPass","AL_MASK","AL_SIZE","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","fromDecorator","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","INVALID","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","nextClassId","nextSignatureId","initialized","elementsByDeclaration","wrapperClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_objectInstance","_templateStringsArrayInstance","_allocInstance","_reallocInstance","_freeInstance","_newInstance","_renewInstance","_linkInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_newBufferInstance","_newArrayInstance","_BLOCKInstance","_OBJECTInstance","nativeDummySignature","Resolver","nativeFile","File","requireClass","BLOCKInstance","blockOverhead","objectOverhead","currentOffset","payloadSize","blockSize","computeBlockStart","blockMinsize","decoratorFlags","registerNativeType","TypeDefinition","makeNativeTypeDeclaration","registerConstantInteger","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","starExports","foreignFile","lookupForeignFile","ensureExportStar","madeProgress","queuedImport","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","queuedExport","ensureExport","globalElement","isDeclaredElement","registerWrapperClass","thisPrototype","baseElement","basePrototype","Class_0_is_final_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","firstChar","markModuleExports","thisInstanceMembers","baseInstanceMembers","thisMember","baseMember","thisMethod","baseMethod","visibilityEquals","Overload_signatures_must_all_be_public_private_or_protected","baseMethodInstances","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","nextPrototype","markModuleExport","className","classElement","wrappedType","isIntegerInclReference","Global","makeNativeVariableDeclaration","merged","tryMerge","lookupExport","fileQueuedExports","queuedExportForeignPath","otherFile","acceptedFlags","fromKind","Duplicate_decorator","ClassPrototype","checkDecorators","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","FieldPrototype","addInstance","checkOperatorOverloads","firstArg","_0_is_not_a_valid_operator","Duplicate_function_implementation","operatorKind","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","InterfacePrototype","initializeFieldAsProperty","Namespace","copyMembers","Element","shadowType","FILE","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isPublic","vis","declaredElements","DeclaredElement","selfProperty","selfGetter","selfSetter","typedElements","TypedElement","aliasNamespaces","ensureGlobal","makeNativeNamespaceDeclaration","ns","copyExportsToNamespace","inSelf","ConstantValueKind","VariableLikeElement","i64_zero","boundPrototypes","bound","instanceKey","nameInclTypeParameters","parameterType","parameterName","createParent","registerConcreteElement","getDefaultParameterName","postfix","setDebugLocation","FIELD_PROTOTYPE","_internalGetterName","_internalSetterName","_internalGetterSignature","_internalSetterSignature","toBound","_isInterface","basePtototype","Class","interfaces","_id","implementers","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","uncheckedOverload","overhead","computeBlockSize","baseOffset","typeKind","writeI32AsI64","writeI64AsI32","extendedPrototype","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","exceptIfMember","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","srcMembers","destMembers","asGlobal","cachedDefaultParameterNames","resolveClassPending","ctxElement","ctxTypes","reportMode","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_cannot_be_nullable","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","parameterTypeNode","returnTypeNode","typeArgument","prev","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","oldCtxTypes","ctxFlow","resolveFunctionInclTypeArguments","typeParameterNames","argumentNodes","argumentExpression","propagateInferredGenericTypes","resolvedTypeArguments","typeParameterNode","inferredType","resolvedDefaultType","Type_argument_expected","ensureResolvedLazyGlobal","isTypedElement","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","targetNode","propertyName","variableLikeElement","wrapper","baseInstance","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_bool","Type_0_is_illegal_in_this_context","superLocal","fltType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","isClass","varType","varElement","thenType","elseType","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","baseMembers","instanceMemberPrototypes","properties","fieldTypeNode","baseField","Field","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","overloadKind","overloadPrototype","IndexSignature","pending","dependsOnInstance","_values2","Property","tokenFromKeyword","ASYNC","AWAIT","DEBUGGER","IS","KEYOF","MODULE","PACKAGE","WITH","tokenIsAlsoIdentifier","identifierHandling","unsafeNext","maxTokenLength","chr","isDecimalDigit","commentStartPos","LINE","TRIPLE","closed","testInteger","isIdentifierStart","posBefore","isIdentifierPart","maybeKeywordToken","isWhiteSpace","Invalid_character","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","reusableState","State","isTaggedTemplate","Unterminated_string_literal","readEscapeSequence","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_4","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","startIfTaggedTemplate","An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","TypeKind","TypeFlags","_nonNullableType","_nullableType","nullableType","signednessIsRelevant","currentClass","targetClass","targetFunction","isVectorValue","signednessIsImportant","validWat","nullablePostfix","numTypes","signatureTypes","numParameterTypes","nativeTypes","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","indices","optionalStart","restIndex","cloneParameterTypes","readI64","i32_as_f32","f32_as_i32","i64_as_f64","valueI64","f64_as_i64","overrides","cloned","v","x","separator","ipos","dirname","origin","COLOR_GRAY","COLOR_GREEN","COLOR_BLUE","COLOR_WHITE","colorsEnabled","isEnabled","color","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","midVal","unmanaged","g","toText","wrapModule","emitStackIR","emitText","toAsmjs","emitAsmjs","keys","i64_one","i64_neg_one","i64_pow","rightLo","rightHi","i64_div","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shr","i64_not","i64_eq","i64_ne","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","minSafeF64","maxSafeF64","i64_is_f64","fround","globalScope","window","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","Infinity","NaN","clz32","round","y","sign","isTrueish","CHUNKSIZE","apply","fromCodePoint","at","charAt","configurable","replacment","split","arraySort","sort","comparator","forEach","Ctr","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","globalThis"],"mappings":"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GACA,iHACA,iHACA,mHACA,qHACA,uHACA,iMACA,iFACA,2FACA,+DACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,2FACA,uEACA,mDACA,+EACA,mGACA,uKACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,yDACA,uGACA,qHACA,yEACA,yLACA,qIACA,2GACA,+KACA,uIACA,uIACA,+GACA,iGACA,yHACA,2EACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,sJACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,0FACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,sNACA,8FACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA/KF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAmL1B,kCAAuCyrD,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KA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4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCACA,2CAIA,2BACA,+BAtIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAyIjB,SAAY0lC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4CnnG,GAE1C,OADA4K,OAAO5K,EAAKrI,QACJqI,EAAKwL,WAAW,IACtB,KAAK,IAAY,MAAe,UAARxL,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsCuoG,GACpC,OAAQA,GACN,KAAK9mC,EAAMiyC,OAAQ,MAAO,SAC1B,KAAKjyC,EAAM21C,GAAI,MAAO,KACtB,KAAK31C,EAAM9zD,WAAY,MAAO,aAC9B,KAAK8zD,EAAM7zD,IAAK,MAAO,MACvB,KAAK6zD,EAAMuZ,OAAQ,MAAO,SAC1B,KAAKvZ,EAAM9uD,KAAM,MAAO,OACxB,KAAK8uD,EAAMgyC,MAAO,MAAO,QACzB,KAAKhyC,EAAMsoC,YAAa,MAAO,MAC/B,K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,OAASS,EAAM,GACb,GAAIT,EAAejD,WAAW0D,IAAQi9H,EACpC,OAAO19H,EAAezW,UAAU,EAAGkX,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BT,EAAwB69H,GAClD,OAAI79H,EAAeyC,WAAW,QACrBzC,EAEFwC,EACLo7H,EAAQC,GAAU,EAAAl9H,eAAiBX,IAKvC,a,4PC3Ga,EAAA89H,WAAa,QAEb,EAAAptD,UAAY,QAEZ,EAAAqtD,YAAc,QAEd,EAAAttD,aAAe,QAEf,EAAAutD,WAAa,QAEb,EAAAztD,cAAgB,QAEhB,EAAAC,WAAa,QAEb,EAAAytD,YAAc,QAEd,EAAA3sD,YAAc,OAG3B,IAAI4sD,GAAgB,EAGpB,6BACE,OAAOA,GAIT,4BAAiCC,GAG/B,OADAD,EAAgBC,EADCA,GAMnB,oBAAyBtrI,EAAcurI,GACrC,OAAOF,EAAgBE,EAAQvrI,EAAO,EAAAy+E,YAAcz+E,I,yBCyItD,SAAgBykI,EAAe3wC,GAC7B,OAAOA,GAAK,IAAeA,GAAK,G,iNA7KlC,SAAkB03C,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B13C,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,mBAKA,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,sBAA2BA,GACzB,OAAO2wC,EAAe3wC,KAAY,GAAJA,IAAW,KAAmB,GAAJA,IAAW,KAIrE,6BAAkCxW,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkCwW,GAChC,IAAI23C,EAAS,GAAJ33C,EACT,OAAO23C,GAAM,IAAcA,GAAM,KACrB,IAAL33C,GACK,IAALA,GACAA,EAAI,SA8KqBxW,EA9KYwW,GA+K9B,KAAOxW,EAAO,QACrBouD,EAAmBpuD,EAAaquD,IAFzC,IAAkCruD,GA1KlC,4BAAiCwW,GAC/B,MAAM23C,EAAS,GAAJ33C,EACX,OAAO23C,GAAM,IAAcA,GAAM,KAC1B33C,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBxW,EAzKYwW,GA0K7B,KAAOxW,EAAO,QACrBouD,EAAmBpuD,EAAasuD,IAFzC,IAAiCtuD,GArKjC,MAAMquD,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__911__) {\nreturn ","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\nimport {\n  ExpressionRef\n} from \"./module\";\n\nimport {\n  Type\n} from \"./types\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n  COMPILED,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createTemplateLiteralExpression(\n    tag: Expression | null,\n    parts: string[],\n    rawParts: string[],\n    expressions: Expression[],\n    range: Range\n  ): TemplateLiteralExpression {\n    return new TemplateLiteralExpression(tag, parts, rawParts, expressions, range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  static createCompiledExpression(\n    expr: ExpressionRef,\n    type: Type,\n    range: Range\n  ): Expression {\n    return new CompiledExpression(expr, type, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  TEMPLATE,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a template literal expression. */\nexport class TemplateLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Tag expression, if any. */\n    public tag: Expression | null,\n    /** String parts. */\n    public parts: string[],\n    /** Raw string parts. */\n    public rawParts: string[],\n    /** Expression parts. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.TEMPLATE, range);\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n/** Represents a special pre-compiled expression. If the expression has side-effects, special care has to be taken. */\nexport class CompiledExpression extends Expression {\n  constructor(\n    /** Compiled expression. */\n    public expr: ExpressionRef,\n    /** Type of the compiled expression. */\n    public type: Type,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMPILED, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  RefIsOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  findUsedLocals,\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const div = \"~lib/builtins/div\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n  export const i32_div_s = \"~lib/builtins/i32.div_s\";\n  export const i32_div_u = \"~lib/builtins/i32.div_u\";\n  export const i64_div_s = \"~lib/builtins/i64.div_s\";\n  export const i64_div_u = \"~lib/builtins/i64.div_u\";\n  export const f32_div = \"~lib/builtins/f32.div\";\n  export const f64_div = \"~lib/builtins/f64.div\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_load8x8_s = \"~lib/builtins/v128.load8x8_s\";\n  export const v128_load8x8_u = \"~lib/builtins/v128.load8x8_u\";\n  export const v128_load16x4_s = \"~lib/builtins/v128.load16x4_s\";\n  export const v128_load16x4_u = \"~lib/builtins/v128.load16x4_u\";\n  export const v128_load32x2_s = \"~lib/builtins/v128.load32x2_s\";\n  export const v128_load32x2_u = \"~lib/builtins/v128.load32x2_u\";\n  export const v128_load8_splat = \"~lib/builtins/v128.load8_splat\";\n  export const v128_load16_splat = \"~lib/builtins/v128.load16_splat\";\n  export const v128_load32_splat = \"~lib/builtins/v128.load32_splat\";\n  export const v128_load64_splat = \"~lib/builtins/v128.load64_splat\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_sat = \"~lib/builtins/v128.add_sat\";\n  export const v128_sub_sat = \"~lib/builtins/v128.sub_sat\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_popcnt = \"~lib/builtins/v128.popcnt\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_extend_low = \"~lib/builtins/v128.extend_low\";\n  export const v128_extend_high = \"~lib/builtins/v128.extend_high\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_sat_s = \"~lib/builtins/i8x16.add_sat_s\";\n  export const i8x16_add_sat_u = \"~lib/builtins/i8x16.add_sat_u\";\n  export const i8x16_sub_sat_s = \"~lib/builtins/i8x16.sub_sat_s\";\n  export const i8x16_sub_sat_u = \"~lib/builtins/i8x16.sub_sat_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_popcnt = \"~lib/builtins/i8x16.popcnt\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n  export const i8x16_shuffle = \"~lib/builtins/i8x16.shuffle\";\n  export const i8x16_swizzle = \"~lib/builtins/i8x16.swizzle\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_sat_s = \"~lib/builtins/i16x8.add_sat_s\";\n  export const i16x8_add_sat_u = \"~lib/builtins/i16x8.add_sat_u\";\n  export const i16x8_sub_sat_s = \"~lib/builtins/i16x8.sub_sat_s\";\n  export const i16x8_sub_sat_u = \"~lib/builtins/i16x8.sub_sat_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_extend_low_i8x16_s = \"~lib/builtins/i16x8.extend_low_i8x16_s\";\n  export const i16x8_extend_low_i8x16_u = \"~lib/builtins/i16x8.extend_low_i8x16_u\";\n  export const i16x8_extend_high_i8x16_s = \"~lib/builtins/i16x8.extend_high_i8x16_s\";\n  export const i16x8_extend_high_i8x16_u = \"~lib/builtins/i16x8.extend_high_i8x16_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_extend_low_i16x8_s = \"~lib/builtins/i32x4.extend_low_i16x8_s\";\n  export const i32x4_extend_low_i16x8_u = \"~lib/builtins/i32x4.extend_low_i16x8_u\";\n  export const i32x4_extend_high_i16x8_s = \"~lib/builtins/i32x4.extend_high_i16x8_s\";\n  export const i32x4_extend_high_i16x8_u = \"~lib/builtins/i32x4.extend_high_i16x8_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\";\n  export const i64x2_mul = \"~lib/builtins/i64x2.mul\";\n  export const i64x2_abs = \"~lib/builtins/i64x2.abs\";\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\";\n  export const i64x2_bitmask = \"~lib/builtins/i64x2.bitmask\";\n  export const i64x2_eq = \"~lib/builtins/i64x2.eq\";\n  export const i64x2_ne = \"~lib/builtins/i64x2.ne\";\n  export const i64x2_lt_s = \"~lib/builtins/i64x2.lt_s\";\n  export const i64x2_lt_u = \"~lib/builtins/i64x2.lt_u\";\n  export const i64x2_le_s = \"~lib/builtins/i64x2.le_s\";\n  export const i64x2_le_u = \"~lib/builtins/i64x2.le_u\";\n  export const i64x2_gt_s = \"~lib/builtins/i64x2.gt_s\";\n  export const i64x2_gt_u = \"~lib/builtins/i64x2.gt_u\";\n  export const i64x2_ge_s = \"~lib/builtins/i64x2.ge_s\";\n  export const i64x2_ge_u = \"~lib/builtins/i64x2.ge_u\";\n  export const i64x2_extend_low_i32x4_s = \"~lib/builtins/i64x2.extend_low_i32x4_s\";\n  export const i64x2_extend_low_i32x4_u = \"~lib/builtins/i64x2.extend_low_i32x4_u\";\n  export const i64x2_extend_high_i32x4_s = \"~lib/builtins/i64x2.extend_high_i32x4_s\";\n  export const i64x2_extend_high_i32x4_u = \"~lib/builtins/i64x2.extend_high_i32x4_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n\n  export const i31_new = \"~lib/builtins/i31.new\";\n  export const i31_get = \"~lib/builtins/i31.get\";\n\n  // internals\n  export const data_end = \"~lib/memory/__data_end\";\n  export const stack_pointer = \"~lib/memory/__stack_pointer\";\n  export const heap_base = \"~lib/memory/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n  export const tostack = \"~lib/rt/__tostack\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/string.ts\n  export const String_raw = \"~lib/string/String.raw\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8: // not wrapped\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32\n                module.i32(31)\n              ),\n              false // i32\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32/i64\n                isWasm64 ? module.i64(63) : module.i32(31)\n              ),\n              false // i32/i64\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0, false), // i64\n                module.i64(63)\n              ),\n              false // i64\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32ToI32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64ToI64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64ToI64\n            : UnaryOp.ReinterpretF32ToI32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32ToF32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64ToF64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0, false), // f32\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0, false), // f64\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeAdd(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeSub(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeMul(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeDiv(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"div\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.div, builtin_div);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addAlignedMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === GC =====================================================================================\n\nfunction builtin_i31_new(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i31ref;\n  return module.i31_new(arg0);\n}\nbuiltins.set(BuiltinNames.i31_new, builtin_i31_new);\n\nfunction builtin_i31_get(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i31ref, Constraints.CONV_IMPLICIT);\n  if (ctx.contextualType.is(TypeFlags.UNSIGNED)) {\n    compiler.currentType = Type.u32;\n    return module.i31_get(arg0, false);\n  } else {\n    compiler.currentType = Type.i32;\n    return module.i31_get(arg0, true);\n  }\n}\nbuiltins.set(BuiltinNames.i31_get, builtin_i31_get);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: return module.if(module.ref_is(RefIsOp.RefIsNull, arg0), abort);\n\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0, false), // numeric\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0, false) // i64\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0, type.isManaged)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is(RefIsOp.RefIsNull,\n            module.local_tee(temp.index, arg0, false) // ref\n          ),\n          abort,\n          module.local_get(temp.index, type.toNativeType())\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var nativeParamTypes = new Array<NativeType>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    nativeParamTypes[i] = compiler.currentType.toNativeType();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(nativeParamTypes), returnType.toNativeType());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var functionArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, functionArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// String.raw(parts: TemplateStringsArray, ...values: unknown[]): string\nfunction builtin_string_raw(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = ctx.compiler.program.stringInstance.type;\n  compiler.error(\n    DiagnosticCode.Not_implemented_0,\n    ctx.reportNode.range, \"String.raw\"\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.String_raw, builtin_string_raw);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleI8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.Load8Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.Load16Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.Load64Splat, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.Load8x8S, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.Load8x8U, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.Load16x4S, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.Load16x4U, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.Load32x2S, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.Load32x2U, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.MulI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.MulI64x2 : BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_sat, builtin_v128_add_sat);\n\n// v128.sub_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_sat, builtin_v128_sub_sat);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.EqI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.EqI64x2 : BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.NeI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.NeI64x2 : BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LtI64x2, arg0, arg1);\n      // no LtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LtI64x2 : BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LeI64x2, arg0, arg1);\n      // no LeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LeI64x2 : BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GtI64x2, arg0, arg1);\n      // no GtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GtI64x2 : BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GeI64x2, arg0, arg1);\n      // no GeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GeI64x2 : BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.AbsI64x2, arg0);\n      case TypeKind.ISIZE: return module.unary(compiler.options.isWasm64 ? UnaryOp.AbsI64x2 : UnaryOp.AbsI32x4, arg0);\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.extend_low<T!>(a: v128) -> v128\nfunction builtin_v128_extend_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendLowU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendLowI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendLowU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_low, builtin_v128_extend_low);\n\n// v128.extend_high<T!>(a: v128) -> v128\nfunction builtin_v128_extend_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendHighU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendHighI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendHighU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_high, builtin_v128_extend_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndnotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  return module.unary(UnaryOp.AnyTrueV128, arg0);\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(compiler.options.isWasm64 ? UnaryOp.AllTrueI64x2 : UnaryOp.AllTrueI32x4, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.BitmaskI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.unary(compiler.options.isWasm64 ? UnaryOp.BitmaskI64x2 : UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.popcnt<T!>(a: v128) -> v128\nfunction builtin_v128_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.PopcntI8x16, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_popcnt, builtin_v128_popcnt);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32_div, builtin_f32_div);\n\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64_div, builtin_f64_div);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.load8x8_s -> v128.load_ext<i8>\nfunction builtin_v128_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_s, builtin_v128_load8x8_s);\n\n// v128.load8x8_u -> v128.load_ext<u8>\nfunction builtin_v128_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_u, builtin_v128_load8x8_u);\n\n// v128.load16x4_s -> v128.load_ext<i16>\nfunction builtin_v128_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_s, builtin_v128_load16x4_s);\n\n// v128.load16x4_u -> v128.load_ext<u16>\nfunction builtin_v128_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_u, builtin_v128_load16x4_u);\n\n// v128.load32x2_s -> v128.load_ext<i32>\nfunction builtin_v128_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_s, builtin_v128_load32x2_s);\n\n// v128.load32x2_u -> v128.load_ext<u32>\nfunction builtin_v128_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_u, builtin_v128_load32x2_u);\n\n// v128.load8_splat -> v128.load_splat<u8>\nfunction builtin_v128_load8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_splat, builtin_v128_load8_splat);\n\n// v128.load16_splat -> v128.load_splat<u16>\nfunction builtin_v128_load16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_splat, builtin_v128_load16_splat);\n\n// v128.load32_splat -> v128.load_splat<u32>\nfunction builtin_v128_load32_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_splat, builtin_v128_load32_splat);\n\n// v128.load64_splat -> v128.load_splat<u64>\nfunction builtin_v128_load64_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_splat, builtin_v128_load64_splat);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_sat_s -> v128.add_sat<i8>\nfunction builtin_i8x16_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_s, builtin_i8x16_add_sat_s);\n\n// i8x16.add_sat_u -> v128.add_sat<u8>\nfunction builtin_i8x16_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_u, builtin_i8x16_add_sat_u);\n\n// i8x16.sub_sat_s -> v128.sub_sat<i8>\nfunction builtin_i8x16_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_s, builtin_i8x16_sub_sat_s);\n\n// i8x16.sub_sat_u -> v128.sub_sat<u8>\nfunction builtin_i8x16_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_u, builtin_i8x16_sub_sat_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.popcnt -> v128.popcnt<i8>\nfunction builtin_i8x16_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_popcnt, builtin_i8x16_popcnt);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_i8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shuffle, builtin_i8x16_shuffle);\n\n// i8x16.swizzle -> v128.swizzle\nfunction builtin_i8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_swizzle, builtin_i8x16_swizzle);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_sat_s -> v128.add_sat<i16>\nfunction builtin_i16x8_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_s, builtin_i16x8_add_sat_s);\n\n// i16x8.add_sat_u -> v128.add_sat<u16>\nfunction builtin_i16x8_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_u, builtin_i16x8_add_sat_u);\n\n// i16x8.sub_sat_s -> v128.sub_sat<i16>\nfunction builtin_i16x8_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_s, builtin_i16x8_sub_sat_s);\n\n// i16x8.sub_sat_u -> v128.sub_sat<u16>\nfunction builtin_i16x8_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_u, builtin_i16x8_sub_sat_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.extend_low_i8x16_s -> v128.extend_low<i8>\nfunction builtin_i16x8_extend_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_s, builtin_i16x8_extend_low_i8x16_s);\n\n// i16x8.extend_low_i8x16_u -> v128.extend_low<u8>\nfunction builtin_i16x8_extend_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_u, builtin_i16x8_extend_low_i8x16_u);\n\n// i16x8.extend_high_i8x16_s -> v128.extend_high<i8>\nfunction builtin_i16x8_extend_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_s, builtin_i16x8_extend_high_i8x16_s);\n\n// i16x8.extend_high_i8x16_u -> v128.extend_high<u8>\nfunction builtin_i16x8_extend_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_u, builtin_i16x8_extend_high_i8x16_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.extend_low_i16x8_s -> // v128.extend_low<i16>\nfunction builtin_i32x4_extend_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_s, builtin_i32x4_extend_low_i16x8_s);\n\n// i32x4.extend_low_i16x8_u -> v128.extend_low<u16>\nfunction builtin_i32x4_extend_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_u, builtin_i32x4_extend_low_i16x8_u);\n\n// i32x4.extend_high_i16x8_s -> v128.extend_high<i16>\nfunction builtin_i32x4_extend_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_s, builtin_i32x4_extend_high_i16x8_s);\n\n// i32x4.extend_high_i16x8_u -> v128.extend_high<u16>\nfunction builtin_i32x4_extend_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_u, builtin_i32x4_extend_high_i16x8_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.mul -> v128.mul<i64>\nfunction builtin_i64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_mul, builtin_i64x2_mul);\n\n// i64x2.abs -> v128.abs<i64>\nfunction builtin_i64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_abs, builtin_i64x2_abs);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.bitmask -> v128.bitmask<i64>\nfunction builtin_i64x2_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_bitmask, builtin_i64x2_bitmask);\n\n// i64x2.eq -> v128.eq<i64>\nfunction builtin_i64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_eq, builtin_i64x2_eq);\n\n// i64x2.ne -> v128.ne<i64>\nfunction builtin_i64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ne, builtin_i64x2_ne);\n\n// i64x2.lt_s -> v128.lt<i64>\nfunction builtin_i64x2_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_lt_s, builtin_i64x2_lt_s);\n\n// i64x2.le_s -> v128.le<i64>\nfunction builtin_i64x2_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_le_s, builtin_i64x2_le_s);\n\n// i64x2.gt_s -> v128.gt<i64>\nfunction builtin_i64x2_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_gt_s, builtin_i64x2_gt_s);\n\n// i64x2.ge_s -> v128.ge<i64>\nfunction builtin_i64x2_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ge_s, builtin_i64x2_ge_s);\n\n// i64x2.extend_low_i32x4_s -> // v128.extend_low<i32>\nfunction builtin_i64x2_extend_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_s, builtin_i64x2_extend_low_i32x4_s);\n\n// i64x2.extend_low_i32x4_u -> v128.extend_low<u32>\nfunction builtin_i64x2_extend_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_u, builtin_i64x2_extend_low_i32x4_u);\n\n// i64x2.extend_high_i32x4_s -> v128.extend_high<i32>\nfunction builtin_i64x2_extend_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_s, builtin_i64x2_extend_high_i32x4_s);\n\n// i64x2.extend_high_i32x4_u -> v128.extend_high<u32>\nfunction builtin_i64x2_extend_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_u, builtin_i64x2_extend_high_i32x4_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value)),\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType),\n              false // internal\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Ensures that the visitor function of the specified class is compiled. */\nfunction ensureVisitMembersOf(compiler: Compiler, instance: Class): void {\n  assert(instance.type.isManaged);\n  if (instance.visitRef) return;\n\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var visitInstance = assert(program.visitInstance);\n  var body = new Array<ExpressionRef>();\n\n  // If the class has a base class, call its visitor first\n  var base = instance.base;\n  if (base) {\n    body.push(\n      module.call(base.internalName + \"~visit\", [\n        module.local_get(0, nativeSizeType), // this\n        module.local_get(1, NativeType.I32)  // cookie\n      ], NativeType.None)\n    );\n  }\n\n  // Some standard library components provide a custom visitor implementation,\n  // for example to visit all members of a collection, e.g. arrays and maps.\n  var hasVisitImpl = false;\n  if (instance.isDeclaredInLibrary) {\n    let visitPrototype = instance.lookupInSelf(\"__visit\");\n    if (visitPrototype) {\n      assert(visitPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitInstance = program.resolver.resolveFunction(<FunctionPrototype>visitPrototype, null);\n      if (!visitInstance || !compiler.compileFunction(visitInstance)) {\n        body.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSignature = visitInstance.signature;\n        let visitThisType = assert(visitSignature.thisType);\n        assert(\n          visitSignature.parameterTypes.length == 1 &&\n          visitSignature.parameterTypes[0] == Type.u32 &&\n          visitSignature.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        body.push(\n          module.call(visitInstance.internalName, [\n            module.local_get(0, nativeSizeType), // this\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n      hasVisitImpl = true;\n    }\n  }\n\n  // Otherwise, if there is no custom visitor, generate a visitor function\n  // according to class layout, visiting all _own_ managed members.\n  var needsTempValue = false;\n  if (!hasVisitImpl) {\n    let members = instance.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n        let member = unchecked(_values[j]);\n        if (member.kind == ElementKind.FIELD) {\n          if ((<Field>member).parent === instance) {\n            let fieldType = (<Field>member).type;\n            if (fieldType.isManaged) {\n              let fieldOffset = (<Field>member).memoryOffset;\n              assert(fieldOffset >= 0);\n              needsTempValue = true;\n              body.push(\n                // if ($2 = value) __visit($2, $1)\n                module.if(\n                  module.local_tee(2,\n                    module.load(nativeSizeSize, false,\n                      module.local_get(0, nativeSizeType),\n                      nativeSizeType, fieldOffset\n                    ),\n                    false // internal\n                  ),\n                  module.call(visitInstance.internalName, [\n                    module.local_get(2, nativeSizeType), // value\n                    module.local_get(1, NativeType.I32)  // cookie\n                  ], NativeType.None)\n                )\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Create the visitor function\n  instance.visitRef = module.addFunction(instance.internalName + \"~visit\",\n    createType([nativeSizeType, NativeType.I32]),\n    NativeType.None,\n    needsTempValue ? [ nativeSizeType ] : null,\n    module.flatten(body, NativeType.None)\n  );\n\n  // And make sure the base visitor function exists\n  if (base) ensureVisitMembersOf(compiler, base);\n}\n\n/** Compiles the `__visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  compiler.compileFunction(visitInstance, true); // is lazy, make sure it is compiled\n\n  // Prepare a mapping of class names to visitor calls. Each name corresponds to\n  // the respective sequential (0..N) class id.\n  var names = new Array<string>();\n  var cases = new Array<ExpressionRef>();\n  var nextId = 0;\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    assert(instanceId == nextId++);\n    let instance = assert(managedClasses.get(instanceId));\n    names[i] = instance.internalName;\n    if (instance.isPointerfree) {\n      cases[i] = module.return();\n    } else {\n      cases[i] = module.block(null, [\n        module.call(instance.internalName + \"~visit\", [\n          module.local_get(0, nativeSizeType), // this\n          module.local_get(1, NativeType.I32)  // cookie\n        ], NativeType.None),\n        module.return()\n      ], NativeType.None);\n      ensureVisitMembersOf(compiler, instance);\n    }\n  }\n\n  // Make a br_table of the mapping, calling visitor functions by unique class id\n  var current = module.block(names[0], [\n    module.switch(names, \"invalid\",\n      // load<u32>(changetype<usize>(this) - 8)\n      module.load(4, false,\n        nativeSizeType == NativeType.I64\n          ? module.binary(BinaryOp.SubI64,\n              module.local_get(0, nativeSizeType),\n              module.i64(8)\n            )\n          : module.binary(BinaryOp.SubI32,\n              module.local_get(0, nativeSizeType),\n              module.i32(8) // rtId is at -8\n            ),\n        NativeType.I32, 0\n      )\n    )\n  ], NativeType.None);\n\n  // Wrap blocks in order\n  for (let i = 0, k = names.length - 1; i < k; ++i) {\n    current = module.block(names[i + 1], [\n      current,\n      cases[i]\n    ], NativeType.None);\n  }\n\n  // Wrap the last id in an 'invalid' block to break out of on invalid ids\n  current = module.block(\"invalid\", [\n    current,\n    cases[names.length - 1]\n  ], NativeType.None);\n\n  // Add the function, executing an unreachable if breaking to 'invalid'\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ nativeSizeType, NativeType.I32 ]), // this, cookie\n    NativeType.None, // => void\n    null,\n    module.flatten([\n      current,\n      module.unreachable()\n    ])\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isPointerfree) flags |= TypeinfoFlags.POINTERFREE;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addAlignedMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const anyref = \"anyref\";\n  export const eqref = \"eqref\";\n  export const i31ref = \"i31ref\";\n  export const dataref = \"dataref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_EXPORT_RUNTIME = \"ASC_EXPORT_RUNTIME\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  export const ASC_VERSION_MAJOR = \"ASC_VERSION_MAJOR\";\n  export const ASC_VERSION_MINOR = \"ASC_VERSION_MINOR\";\n  export const ASC_VERSION_PATCH = \"ASC_VERSION_PATCH\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Anyref = \"Anyref\";\n  export const Eqref = \"Eqref\";\n  export const I31ref = \"I31ref\";\n  export const Dataref = \"Dataref\";\n  export const String = \"String\";\n  export const Object = \"Object\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const TemplateStringsArray = \"TemplateStringsArray\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const new_ = \"__new\";\n  export const renew = \"__renew\";\n  export const link = \"__link\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const newBuffer = \"__newBuffer\";\n  export const newArray = \"__newArray\";\n  export const BLOCK = \"~lib/rt/common/BLOCK\";\n  export const OBJECT = \"~lib/rt/common/OBJECT\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  RefIsOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags,\n  isConstZero\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  CompiledExpression,\n\n  TypeNode,\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero,\n  readI32\n} from \"./util\";\n\nimport {\n  RtraceMemory\n} from \"./passes/rtrace\";\n\nimport {\n  ShadowStackPass\n} from \"./passes/shadowstack\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n  /** If true, exports the runtime helpers. */\n  exportRuntime: bool = false;\n  /** Stack size in bytes, if using a stack. */\n  stackSize: i32 = 0;\n  /** Semantic major bundle version from root package.json */\n  bundleMajorVersion: i32 = 0;\n  /** Semantic minor bundle version from root package.json */\n  bundleMinorVersion: i32 = 0;\n  /** Semantic patch bundle version from root package.json */\n  bundlePatchVersion: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 4,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires data setup. */\n  DATA = 1 << 0,\n  /** Requires a stack. */\n  STACK = 1 << 1,\n  /** Requires heap setup. */\n  HEAP = 1 << 2,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 3,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 4,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 5,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 6\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Functions to export if `--exportRuntime` is set. */\nconst runtimeFunctions = [ \"__new\", \"__pin\", \"__unpin\", \"__collect\" ];\n/** Globals to export if `--exportRuntime` is set. */\nconst runtimeGlobals = [ \"__rtti_base\" ];\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n  /** Shadow stack reference. */\n  shadowStack!: ShadowStackPass;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create(options.stackSize > 0, options.nativeSizeType);\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n    this.shadowStack = new ShadowStackPass(this);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n    var hasShadowStack = options.stackSize > 0; // implies runtime=incremental\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable data, heap and rtti offset dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.data_end, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.data_end, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // compile and export runtime if requested\n    if (this.options.exportRuntime) {\n      for (let i = 0, k = runtimeFunctions.length; i < k; ++i) {\n        let name = runtimeFunctions[i];\n        let instance = program.requireFunction(name);\n        if (this.compileFunction(instance) && !module.hasExport(name)) {\n          module.addFunctionExport(instance.internalName, name);\n        }\n      }\n      for (let i = 0, k = runtimeGlobals.length; i < k; ++i) {\n        let name = runtimeGlobals[i];\n        let instance = program.requireGlobal(name);\n        if (this.compileGlobal(instance) && !module.hasExport(name)) {\n          module.addGlobalExport(instance.internalName, name);\n        }\n      }\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    while (virtualCalls.size) {\n      // finalizing a stub may discover more virtual calls, so do this in a loop\n      for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        this.finalizeVirtualStub(instance);\n        virtualCalls.delete(instance);\n      }\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    var memoryOffset = i64_align(this.memoryOffset, options.usizeType.byteSize);\n\n    // finalize data\n    module.removeGlobal(BuiltinNames.data_end);\n    if ((this.runtimeFeatures & RuntimeFeatures.DATA) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.data_end, NativeType.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.data_end, NativeType.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize stack (grows down from __heap_base to __data_end)\n    module.removeGlobal(BuiltinNames.stack_pointer);\n    if ((this.runtimeFeatures & RuntimeFeatures.STACK) != 0 || hasShadowStack) {\n      memoryOffset = i64_align(\n        i64_add(memoryOffset, i64_new(options.stackSize)),\n        options.usizeType.byteSize\n      );\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.stack_pointer, NativeType.I64, true,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.stack_pointer, NativeType.I32, true,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize heap\n    module.removeGlobal(BuiltinNames.heap_base);\n    if ((this.runtimeFeatures & RuntimeFeatures.HEAP) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.heap_base, NativeType.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.heap_base, NativeType.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    this.memoryOffset = memoryOffset;\n\n    // check that we didn't exceed lowMemoryLimit already\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.addFunctionTable(\"0\", tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(this.ensureArgumentsLength(), module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n\n    // NOTE: no more element compiles from here. may go to the start function!\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.global_set(BuiltinNames.started, module.i32(1))\n        );\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return()\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // Run custom passes\n    if (hasShadowStack) {\n      this.shadowStack.walkModule();\n    }\n    if (program.lookup(\"ASC_RTRACE\") != null) {\n      new RtraceMemory(this).walkModule();\n    }\n\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    var module = this.module;\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            functionPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            classPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else if (global.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else if (enumValue.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) {\n            let exportName = prefix + name;\n            if (!module.hasExport(exportName)) {\n              module.addFunctionExport(functionInstance.internalName, exportName);\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(exportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let getterExportName = prefix + GETTER_PREFIX + name;\n          if (this.compileFieldGetter(fieldInstance) && !module.hasExport(getterExportName)) {\n            module.addFunctionExport(fieldInstance.internalGetterName, getterExportName);\n            let signature = fieldInstance.internalGetterSignature;\n            if (signature.hasManagedOperands) {\n              this.shadowStack.noteExport(getterExportName, signature.getManagedOperandIndices());\n            }\n          }\n          if (!element.is(CommonFlags.READONLY)) {\n            let setterExportName = prefix + SETTER_PREFIX + name;\n            if (this.compileFieldSetter(fieldInstance) && !module.hasExport(setterExportName)) {\n              module.addFunctionExport(fieldInstance.internalSetterName, setterExportName);\n              let signature = fieldInstance.internalSetterSignature;\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(setterExportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      let internalName = global.internalName;\n      if (internalName == BuiltinNames.data_end) this.runtimeFeatures |= RuntimeFeatures.DATA;\n      else if (internalName == BuiltinNames.stack_pointer) this.runtimeFeatures |= RuntimeFeatures.STACK;\n      else if (internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type, global.declaration));\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      if (!this.compileFunctionBody(instance, stmts)) {\n        stmts.push(module.unreachable());\n      }\n\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n    var bodyStartIndex = stmts.length;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          this.makeConditionalAllocation(classInstance, thisLocal.index)\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n\n        // Insert right before the body\n        for (let i = stmts.length - 1; i >= bodyStartIndex; --i) {\n          stmts[i + 1] = stmts[i];\n        }\n        stmts[bodyStartIndex] = module.flatten(allocStmts, NativeType.None);\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        stmts.push(\n          module.local_get(thisLocal.index, this.options.nativeSizeType)\n        );\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    if (instance.getterRef) return true;\n    var module = this.module;\n    var valueType = instance.type;\n    var nativeValueType = valueType.toNativeType();\n    var nativeThisType = this.options.nativeSizeType;\n    // return this.field\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null,\n      module.load(valueType.byteSize, valueType.isSignedIntegerValue,\n        module.local_get(0, nativeThisType),\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    // void(this.field = value)\n    var bodyExpr = module.store(type.byteSize,\n      module.local_get(0, nativeThisType),\n      module.local_get(1, nativeValueType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      if ((<Class>parent).type.isManaged) {\n        let linkInstance = this.program.linkInstance;\n        this.compileFunction(linkInstance);\n        bodyExpr = module.block(null, [\n          bodyExpr,\n          module.call(linkInstance.internalName, [\n            module.local_get(0, nativeThisType),\n            module.local_get(1, nativeValueType),\n            module.i32(0)\n          ], NativeType.None)\n        ], NativeType.None);\n      }\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, null,\n      bodyExpr\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addAlignedMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Adds a static memory segment representing a runtime object. */\n  addRuntimeMemorySegment(buffer: Uint8Array): MemorySegment {\n    var memoryOffset = this.program.computeBlockStart64(this.memoryOffset);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer expression. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var ptr = this.ensureStaticStringPtr(stringValue);\n    this.currentType = this.program.stringInstance.type;\n    return this.module.usize(ptr);\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticStringPtr(stringValue: string): i64 {\n    var program = this.program;\n    var totalOverhead = program.totalOverhead;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, totalOverhead + (i << 1));\n      }\n      stringSegment = this.addRuntimeMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    return i64_add(stringSegment.offset, i64_new(totalOverhead));\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n    this.writeStaticBuffer(buf, program.totalOverhead, elementType, values);\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(\n    elementType: Type,\n    bufferSegment: MemorySegment,\n    /** Optional array instance override. */\n    arrayInstance: Class | null = null\n  ): MemorySegment {\n    var program = this.program;\n    if (!arrayInstance) {\n      arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ elementType ]));\n    }\n    var bufferLength = readI32(bufferSegment.buffer, program.OBJECTInstance.offsetof(\"rtSize\"));\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.totalOverhead));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n    flow.set(FlowFlags.BREAKS);\n    return module.br(breakLabel);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    flow.freeScopedLocals();\n    return module.br(continueLabel);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //                                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //                                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr, false) // bool\n        );\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations. Note that\n        // this may be necessary multiple times where locals depend on each other.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //                                │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    //                                ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations. Note that this\n      // may be necessary multiple times where locals depend on each other.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //                   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //                   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      expr = this.compileExpression(valueExpression, returnType, constraints);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      this.currentType = returnType;\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // Handle inline return\n    if (flow.isInline) {\n      return isLastInBody && expr != 0\n        ? expr\n        : module.br(assert(flow.inlineReturnLabel), 0, expr);\n    }\n\n    // Otherwise emit a normal return\n    return isLastInBody && expr != 0\n      ? expr\n      : module.return(expr);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      ),\n      false // u32\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    flow.freeScopedLocals();\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT\n          );\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto); // reports\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.makeLocalAssignment(local, initExpr, type, false)\n          );\n        } else {\n          // no need to assign zero\n          if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    this.currentType = Type.void;\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations. Note that\n      // this may be necessary multiple times where locals depend on each other.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMPILED: {\n        let compiled = <CompiledExpression>expression;\n        expr = compiled.expr;\n        this.currentType = compiled.type;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Converts an expression's result from one type to another. */\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit. */\n    explicit: bool,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32ToF64, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64ToF32, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI64 : UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI32 : UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU64 : UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU32 : UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI64 : UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI32 : UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU64 : UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU32 : UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64ToI32, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32ToI64 : UnaryOp.ExtendU32ToU64,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"+\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAdd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeSub(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"*\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeMul(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"**\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"/\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeDiv(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"%\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShl(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShr(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShru(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAnd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeOr(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeXor(leftExpr, rightExpr, commonType);\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            this.makeIsTrueish(rightExpr, rightType, right),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType, left),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr, leftType.isManaged), leftType, left),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType, right)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr, leftType.isManaged), leftType, left),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  makeLt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeLe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeI64\n            : BinaryOp.LeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeU64\n            : BinaryOp.LeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeI64\n            : BinaryOp.GeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeU64\n            : BinaryOp.GeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeEq(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.EqI64\n            : BinaryOp.EqI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AllTrueI8x16,\n          module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.ref_eq(leftExpr, rightExpr);\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeNe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueV128,\n          module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.unary(UnaryOp.EqzI32,\n          module.ref_eq(leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAdd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AddI64\n            : BinaryOp.AddI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeSub(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeMul(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.MulI64\n            : BinaryOp.MulI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makePow(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    let module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return module.select(\n          module.i32(1),\n          module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n          leftExpr\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let instance = this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        let expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n        if (type.size < 32) {\n          // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n          // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n          expr = this.ensureSmallIntegerWrap(expr, type);\n        }\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let instance = this.i64PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow64);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow64\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = this.options.isWasm64;\n        let instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          if (isWasm64) {\n            this.i64PowInstance = instance;\n          } else {\n            this.i32PowInstance = instance;\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      // Math.pow otherwise (result is f64)\n      case TypeKind.F64: {\n        let instance = this.f64PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeDiv(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivI64\n            : BinaryOp.DivI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivU64\n            : BinaryOp.DivU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeRem(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemI64\n            : BinaryOp.RemI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemU64\n            : BinaryOp.RemU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F64: {\n        let instance = this.f64ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShl(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr << (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShlI32,\n          leftExpr,\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShlI64\n            : BinaryOp.ShlI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n    // and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        // leftExpr >> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrI32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrI64\n            : BinaryOp.ShrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShru(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAnd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AndI64\n            : BinaryOp.AndI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeOr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.OrI64\n            : BinaryOp.OrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeXor(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.XorI64\n            : BinaryOp.XorI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having local flags that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, target.internalName\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr, returnType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let thisType = classInstance.type;\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          thisType,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        let elementType = this.currentType;\n        if (tee) {\n          let tempTarget = flow.getTempLocal(thisType);\n          let tempElement = flow.getTempLocal(elementType);\n          let returnType = getterInstance.signature.returnType;\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr, thisType.isManaged),\n              module.local_tee(tempElement.index, elementExpr, elementType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n    if (type.isShortIntegerValue) {\n      if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n    }\n    if (tee) { // local = value\n      this.currentType = type;\n      return module.local_tee(localIndex, valueExpr, type.isManaged);\n    } else { // void(local = value)\n      this.currentType = Type.void;\n      return module.local_set(localIndex, valueExpr, type.isManaged);\n    }\n  }\n\n  /** Makes an assignment to a global. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n    if (tee) { // (global = value), global\n      this.currentType = type;\n      return module.block(null, [\n        module.global_set(global.internalName, valueExpr),\n        module.global_get(global.internalName, nativeType)\n      ], nativeType);\n    } else { // global = value\n      this.currentType = Type.void;\n      return module.global_set(global.internalName,\n        valueExpr\n      );\n    }\n  }\n\n  /** Makes an assignment to a field. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (tee) {\n      this.compileField(field);\n      let tempThis = flow.getTempLocal(thisType);\n      let expr = module.block(null, [\n        module.call(field.internalSetterName, [ module.local_tee(tempThis.index, thisExpr, thisType.isManaged), valueExpr ], NativeType.None),\n        module.call(field.internalGetterName, [ module.local_get(tempThis.index, thisType.toNativeType()) ], nativeFieldType)\n      ], nativeFieldType);\n      flow.freeTempLocal(tempThis);\n      this.currentType = fieldType;\n      return expr;\n    } else {\n      this.compileFieldSetter(field);\n      let expr = module.call(field.internalSetterName, [ thisExpr, valueExpr ], NativeType.None);\n      this.currentType = Type.void;\n      return expr;\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = classInstance.base;\n      if (!baseClassInstance) {\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.expression.range\n        );\n        return module.unreachable();\n      }\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType)\n      );\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall, classInstance.type.isManaged);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var functionArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: first-class function (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            let inlinedValue = local.constantIntegerValue;\n            if (this.options.isWasm64) {\n              functionArg = module.i64(i64_low(inlinedValue), i64_high(inlinedValue));\n            } else {\n              assert(!i64_high(inlinedValue));\n              functionArg = module.i32(i64_low(inlinedValue));\n            }\n          } else {\n            functionArg = module.local_get(local.index, this.options.nativeSizeType);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          functionArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          let usizeType = this.options.usizeType;\n          functionArg = module.load(usizeType.byteSize, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            usizeType.toNativeType(),\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        let type = assert(this.resolver.getTypeOfElement(target));\n\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        functionArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          functionArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      functionArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  /** Compiles the given arguments like a call expression according to the specified context. */\n  private compileCallExpressionLike(\n    /** Called expression. */\n    expression: Expression,\n    /** Call type arguments. */\n    typeArguments: TypeNode[] | null,\n    /** Call arguments. */\n    args: Expression[],\n    /** Diagnostic range. */\n    range: Range,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // Desugaring like this can happen many times. Let's cache the intermediate allocation.\n    var call = this._reusableCallExpression;\n    if (call) {\n      call.expression = expression;\n      call.typeArguments = typeArguments;\n      call.args = args;\n      call.range = range;\n    } else {\n      this._reusableCallExpression = call = Node.createCallExpression(expression, typeArguments, args, range);\n    }\n    return this.compileCallExpression(call, contextualType, constraints);\n  }\n  private _reusableCallExpression: CallExpression | null = null;\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments), // don't update\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range, \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i], Constraints.CONV_IMPLICIT);\n        }\n        // make the inlined call\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      let paramType = parameterTypes[i];\n      let paramExpr = this.compileExpression(argumentExpressions[i], paramType, Constraints.CONV_IMPLICIT);\n      operands[index] = paramExpr;\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands, reportNode, (constraints & Constraints.WILL_DROP) != 0);\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr, paramType.isManaged)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg, thisType.isManaged)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      body.push(\n        this.makeLocalAssignment(argumentLocal, initExpr, initType, false)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    this.currentType = returnType;\n    return module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): string {\n    var name = BuiltinNames.argumentsLength;\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(name, NativeType.I32, true, module.i32(0));\n    }\n    return name;\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n    var stmts = new Array<ExpressionRef>();\n\n    // forward `this` if applicable\n    var module = this.module;\n    var thisType = originalSignature.thisType;\n    if (thisType) {\n      forwardedOperands[0] = module.local_get(0, thisType.toNativeType());\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      let paramType = originalParameterTypes[i];\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, paramType.toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var argumentsLength = this.ensureArgumentsLength();\n    var table = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = this.compileExpression(\n          initializer,\n          type,\n          Constraints.CONV_IMPLICIT\n        );\n        initExpr = module.local_set(operandIndex, initExpr, type.isManaged);\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      table = module.block(names[i + 1], [\n        table,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    stmts.push(\n      table\n    );\n    stmts.push(\n      module.call(original.internalName, forwardedOperands, returnType.toNativeType())\n    );\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 1; n <= numParameters; ++n) {\n            paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(this.ensureArgumentsLength(), module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  /** Marks managed call operands for the shadow stack. */\n  private operandsTostack(signature: Signature, operands: ExpressionRef[]): void {\n    if (!this.options.stackSize) return;\n    var module = this.module;\n    var operandIndex = 0;\n    var thisType = signature.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        let operand = operands[0];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n    }\n    var parameterIndex = 0;\n    var parameterTypes = signature.parameterTypes;\n    assert(parameterTypes.length >= operands.length - operandIndex);\n    while (operandIndex < operands.length) {\n      let paramType = parameterTypes[parameterIndex];\n      if (paramType.isManaged) {\n        let operand = operands[operandIndex];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n      ++parameterIndex;\n    }\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant && !instance.is(CommonFlags.MODULE_IMPORT)) {\n        let original = instance;\n        instance = this.ensureVarargsStub(instance);\n        if (!this.compileFunction(instance)) return module.unreachable();\n        instance.flow.flags = original.flow.flags;\n        let nativeReturnType = returnType.toNativeType();\n        // We know the last operand is optional and omitted, so inject setting\n        // ~argumentsLength into that operand, which is always safe.\n        let lastOperand = operands[maxOperands - 1];\n        assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n        let lastOperandType = parameterTypes[maxArguments - 1];\n        operands[maxOperands - 1] = module.block(null, [\n          module.global_set(this.ensureArgumentsLength(), module.i32(numArguments)),\n          lastOperand\n        ], lastOperandType.toNativeType());\n        this.operandsTostack(instance.signature, operands);\n        let expr = module.call(instance.internalName, operands, nativeReturnType);\n        if (returnType != Type.void && immediatelyDropped) {\n          expr = module.drop(expr);\n          this.currentType = Type.void;\n        } else {\n          this.currentType = returnType;\n        }\n        return expr;\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    if (operands) this.operandsTostack(instance.signature, operands);\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    return expr;\n  }\n\n  /** Compiles an indirect call to a first-class function. */\n  compileCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, functionArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to a first-class function. */\n  makeCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    var argumentsLength = this.ensureArgumentsLength();\n    var nativeSizeType = this.options.nativeSizeType;\n    if (getSideEffects(functionArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(functionArg));\n      functionArg = module.block(null, [\n        module.local_set(temp.index, functionArg, true), // Function\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      functionArg = module.block(null, [\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        functionArg\n      ], nativeSizeType);\n    }\n    if (operands) this.operandsTostack(signature, operands);\n    var expr = module.call_indirect(\n      module.load(4, false, functionArg, NativeType.I32), // ._index\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var isNamed = declaration.name.text.length > 0;\n    var isSemanticallyAnonymous = !isNamed || contextualType != Type.void;\n    var prototype = new FunctionPrototype(\n      isSemanticallyAnonymous\n        ? (isNamed ? declaration.name.text + \"|\" : \"anonymous|\") + (actualFunction.nextAnonymousId++).toString()\n        : declaration.name.text,\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n    var module = this.module;\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    var contextualSignature = contextualType.signatureReference;\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = contextualSignature.type;\n      if (!worked) return module.unreachable();\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n      if (!worked) return module.unreachable();\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    var expr = this.options.isWasm64\n      ? module.i64(i64_low(offset), i64_high(offset))\n      : module.i32(i64_low(offset));\n\n    // add a constant local referring to the function if applicable\n    if (!isSemanticallyAnonymous) {\n      let fname = instance.name;\n      let existingLocal = flow.getScopedLocal(fname);\n      if (existingLocal) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existingLocal.declaration.name.range,\n            fname\n          );\n        } else { // scoped locals are shared temps that don't track declarations\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, fname\n          );\n        }\n      } else {\n        let ftype = instance.type;\n        let local = flow.addScopedLocal(instance.name, ftype);\n        flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        expr = module.local_tee(local.index, expr, ftype.isManaged);\n      }\n    }\n\n    return expr;\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType, expression);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR) && !(constraints & Constraints.IS_THIS)) {\n          let parent = actualFunction.parent;\n          assert(parent.kind == ElementKind.CLASS);\n          this.checkFieldInitialization(<Class>parent, expression);\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toNativeType());\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName, NativeType.Funcref); // TODO\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.TEMPLATE: {\n        assert(!implicitlyNegate);\n        return this.compileTemplateLiteral(<TemplateLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  private compileTemplateLiteral(\n    expression: TemplateLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var tag = expression.tag;\n    var parts = expression.parts;\n    var numParts = parts.length;\n    var expressions = expression.expressions;\n    assert(numParts - 1 == expressions.length);\n\n    // Shortcut if just a (multi-line) string\n    if (tag === null && numParts == 1) {\n      return this.ensureStaticString(parts[0]);\n    }\n\n    var module = this.module;\n    var stringType = this.program.stringInstance.type;\n\n    // Compile to a `StaticArray<string>#join(\"\")` if untagged\n    if (tag === null) {\n      let length = 2 * numParts - 1;\n      let values = new Array<usize>(length);\n      values[0] = this.ensureStaticString(parts[0]);\n      for (let i = 1; i < numParts; ++i) {\n        values[2 * i - 1] = module.usize(0);\n        values[2 * i] = this.ensureStaticString(parts[i]);\n      }\n      let arrayInstance = assert(this.resolver.resolveClass(this.program.staticArrayPrototype, [ stringType ]));\n      let segment = this.addStaticBuffer(stringType, values, arrayInstance.id);\n      let offset = i64_add(segment.offset, i64_new(this.program.totalOverhead));\n      let joinInstance = assert(arrayInstance.getMethod(\"join\"));\n      let indexedSetInstance = assert(arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true));\n      let stmts = new Array<ExpressionRef>();\n      for (let i = 0, k = numParts - 1; i < k; ++i) {\n        let expression = expressions[i];\n        stmts.push(\n          this.makeCallDirect(indexedSetInstance, [\n            module.usize(offset),\n            module.i32(2 * i + 1),\n            this.makeToString(\n              this.compileExpression(expression, stringType),\n              this.currentType, expression\n            )\n          ], expression)\n        );\n      }\n      stmts.push(\n        this.makeCallDirect(joinInstance, [\n          module.usize(offset),\n          this.ensureStaticString(\"\")\n        ], expression)\n      );\n      return module.flatten(stmts, stringType.toNativeType());\n    }\n\n    // Try to find out whether the template function takes a full-blown TemplateStringsArray or if\n    // it is sufficient to compile to a normal array. While technically incorrect, this allows us\n    // to avoid generating unnecessary static data that is not explicitly signaled to be used.\n    var tsaArrayInstance = this.program.templateStringsArrayInstance;\n    var arrayInstance = tsaArrayInstance;\n    var target = this.resolver.lookupExpression(tag, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n    if (target) {\n      switch (target.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n          if (!instance) break;\n          target = instance;\n          // fall-through\n        }\n        case ElementKind.FUNCTION: {\n          let instance = <Function>target;\n          let parameterTypes = instance.signature.parameterTypes;\n          if (parameterTypes.length) {\n            let first = parameterTypes[0].getClass();\n            if (first !== null && !first.extends(tsaArrayInstance.prototype)) {\n              arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ stringType ]));\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    // Compile to a call to the tag function\n    var rawParts = expression.rawParts;\n    assert(rawParts.length == numParts);\n    var partExprs = new Array<ExpressionRef>(numParts);\n    for (let i = 0; i < numParts; ++i) {\n      partExprs[i] = this.ensureStaticString(parts[i]);\n    }\n    var arraySegment: MemorySegment;\n    if (arrayInstance == tsaArrayInstance) {\n      var rawExprs = new Array<ExpressionRef>(numParts);\n      for (let i = 0; i < numParts; ++i) {\n        rawExprs[i] = this.ensureStaticString(rawParts[i]);\n      }\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n      var rawHeaderSegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, rawExprs)\n      );\n      arrayInstance.writeField(\"raw\",\n        i64_add(rawHeaderSegment.offset, i64_new(this.program.totalOverhead)),\n        arraySegment.buffer\n      );\n    } else {\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n    }\n\n    // Desugar to compileCallExpression\n    var args = expressions.slice();\n    args.unshift(\n      Node.createCompiledExpression(\n        module.usize(i64_add(arraySegment.offset, i64_new(this.program.totalOverhead))),\n        arrayInstance.type,\n        this.program.nativeRange\n      )\n    );\n    // TODO: Requires ReadonlyArray to be safe\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      expression.range, \"Tagged template literals\"\n    );\n    return this.compileCallExpressionLike(tag, null, args, expression.range, stringType);\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let totalOverhead = program.totalOverhead;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(totalOverhead));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(totalOverhead));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __newArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.newArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.newArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], expression),\n        arrayType.isManaged\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        ),\n        true // ArrayBuffer\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // this[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, nativeArrayType),\n          module.i32(i),\n          values[i]\n        ], NativeType.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, nativeArrayType);\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __newBuffer(bufferSize, id, buffer)\n        let expr = this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id),\n          isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id)\n        ], expression),\n        arrayType.isManaged\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // array[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, nativeArrayType),\n          module.i32(i),\n          values[i]\n        ], NativeType.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, nativeArrayType);\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT);\n      exprs.push(\n        module.call(fieldInstance.internalSetterName, [\n          module.local_get(tempLocal.index, nativeClassType),\n          expr\n        ], NativeType.None)\n      );\n      this.compileFieldSetter(fieldInstance);\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.call(fieldInstance.internalSetterName, [\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType, expression)\n            ], NativeType.None)\n          );\n          this.compileFieldSetter(fieldInstance);\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.NONE, expression),\n        classType.isManaged\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.prototype == classPrototype &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      // e.g. `arr: Array<T> = new Array()`\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class. note that we cannot just\n      // call the base ctor since the derived class may have additional fields.\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n      }\n\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      if (classInstance.is(CommonFlags.MODULE_EXPORT)) {\n        instance.set(CommonFlags.MODULE_EXPORT);\n      }\n      classInstance.constructorInstance = instance;\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let nativeSizeType = this.options.nativeSizeType;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   this = <COND_ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      stmts.push(\n        this.makeConditionalAllocation(classInstance, 0)\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, nativeSizeType);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toNativeType());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false),\n            baseClass.type.isManaged\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      stmts.push(\n        module.local_get(0, nativeSizeType)\n      );\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n      }\n      let funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        varTypes,\n        module.flatten(stmts, nativeSizeType)\n      );\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect(\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        if (!getterInstance) return module.unreachable(); // failed earlier\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType);\n    var ifThenType = this.currentType;\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType);\n    var ifElseType = this.currentType;\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n    ifThenType = commonType;\n    ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n    ifElseType = commonType;\n    this.currentType = commonType;\n\n    ifThenFlow.freeScopedLocals();\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    return module.if(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue,\n        this.currentType.isManaged\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend8I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend16I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    var parameterNodes = reportNode.parameters;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      let parameterReportNode: Node;\n      if (parameterNodes.length > i) parameterReportNode = parameterNodes[i];\n      else parameterReportNode = reportNode;\n      if (!this.checkTypeSupported(parameterTypes[i], parameterReportNode)) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF: return module.ref_null(type.toNativeType());\n      case TypeKind.I31REF: return module.i31_new(module.i32(0));\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n      case TypeKind.I31REF: return module.i31_new(module.i32(1));\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32ToI32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64ToI64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        // Needs to be true (i.e. not zero) when the ref is _not_ null,\n        // which means `ref.is_null` returns false (i.e. zero).\n        return module.unary(UnaryOp.EqzI32, module.ref_is(RefIsOp.RefIsNull, expr));\n\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes a string conversion of the given expression. */\n  makeToString(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var stringType = this.program.stringInstance.type;\n    if (type == stringType) {\n      return expr;\n    }\n    var classType = type.getClassOrWrapper(this.program);\n    if (classType) {\n      let toStringInstance = classType.getMethod(\"toString\");\n      if (toStringInstance) {\n        let toStringSignature = toStringInstance.signature;\n        if (!this.checkCallSignature( // reports\n          toStringSignature,\n          0,\n          true,\n          reportNode\n        )) {\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        if (!type.isStrictlyAssignableTo(assert(toStringSignature.thisType))) {\n          this.errorRelated(\n            DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n            reportNode.range, toStringInstance.identifierAndSignatureRange\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        let toStringReturnType = toStringSignature.returnType;\n        if (!toStringReturnType.isStrictlyAssignableTo(stringType)) {\n          this.errorRelated(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            reportNode.range, toStringInstance.identifierAndSignatureRange, toStringReturnType.toString(), stringType.toString()\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        return this.makeCallDirect(toStringInstance, [ expr ], reportNode);\n      }\n    }\n    this.error(\n      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n      reportNode.range, type.toString(), stringType.toString()\n    );\n    this.currentType = stringType;\n    return this.module.unreachable();\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    if (classInstance.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let allocInstance = program.allocInstance;\n      this.compileFunction(allocInstance);\n      return module.call(allocInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset)\n      ], options.nativeSizeType);\n    } else {\n      let newInstance = program.newInstance;\n      this.compileFunction(newInstance);\n      return module.call(newInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset),\n        module.i32(classInstance.id)\n      ], options.nativeSizeType);\n    }\n  }\n\n  /** Makes a conditional allocation where `this` might not have been initialized yet. */\n  makeConditionalAllocation(\n    classInstance: Class,\n    thisIndex: i32\n  ): ExpressionRef {\n    var module = this.module;\n    var classType = classInstance.type;\n    var nativeClassType = classType.toNativeType();\n    assert(nativeClassType == this.options.nativeSizeType);\n    return module.if(\n      module.unary(nativeClassType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n        module.local_get(thisIndex, nativeClassType)\n      ),\n      module.local_set(thisIndex,\n        this.makeAllocation(classInstance),\n        classInstance.type.isManaged\n      )\n    );\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType, Constraints.CONV_IMPLICIT);\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType, fieldPrototype.declaration);\n      }\n\n      this.compileFieldSetter(field);\n      stmts.push(\n        module.call(field.internalSetterName, [\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr\n        ], NativeType.None)\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr, type.isManaged),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr, type.isManaged),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      sb.push(element.getParameterName(i));\n      if (i >= requiredParameters) sb.push(\"?\");\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    if (!isInterface) {\n      indent(sb, this.indentLevel);\n      sb.push(\"static wrap(ptr: usize): \");\n      sb.push(name);\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"valueOf(): usize;\\n\");\n    }\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = bigint;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = bigint;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = boolean | number;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Exported_generic_function_or_class_has_no_concrete_instances = 232,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime = 234,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal = 1351,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 232: return \"Exported generic function or class has no concrete instances.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 234: return \"Expression refers to a static element that does not compile to a value at runtime.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 1351: return \"An identifier or keyword cannot immediately follow a numeric literal.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak,\n  COLOR_CYAN,\n  COLOR_YELLOW,\n  COLOR_RED,\n  COLOR_MAGENTA,\n  COLOR_RESET,\n  isColorsEnabled,\n  setColorsEnabled\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_CYAN;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n  var wasColorsEnabled = setColorsEnabled(useColors);\n\n  // general information\n  var sb: string[] = [];\n  if (isColorsEnabled()) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  setColorsEnabled(wasColorsEnabled);\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nfunction formatDiagnosticContext(range: Range): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.TEMPLATE: {\n        this.visitTemplateLiteralExpression(<TemplateLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string): void {\n    var sb = this.sb;\n    sb.push(\"\\\"\");\n    this.visitRawString(str, CharCode.DOUBLEQUOTE);\n    sb.push(\"\\\"\");\n  }\n\n  private visitRawString(str: string, quote: CharCode): void {\n    var sb = this.sb;\n    var off = 0;\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (quote == CharCode.DOUBLEQUOTE) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (quote == CharCode.SINGLEQUOTE) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKTICK: {\n          if (quote == CharCode.BACKTICK) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\`\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitTemplateLiteralExpression(node: TemplateLiteralExpression): void {\n    var sb = this.sb;\n    var tag = node.tag;\n    var parts = node.parts;\n    var expressions = node.expressions;\n    if (tag) this.visitNode(tag);\n    sb.push(\"`\");\n    this.visitRawString(parts[0], CharCode.BACKTICK);\n    assert(parts.length == expressions.length + 1);\n    for (let i = 0, k = expressions.length; i < k; ++i) {\n      sb.push(\"${\");\n      this.visitNode(expressions[i]);\n      sb.push(\"}\");\n      this.visitRawString(parts[i + 1], CharCode.BACKTICK);\n    }\n    sb.push(\"`\");\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global,\n  Field,\n  Class\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Outer flow. Only relevant for first-class functions. */\n  outer: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    branch.outer = this.outer;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>NativeType.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>NativeType.Eqref: { temps = parentFunction.tempEqrefs; break; }\n      case <u32>NativeType.I31ref: { temps = parentFunction.tempI31refs; break; }\n      case <u32>NativeType.Dataref: { temps = parentFunction.tempDatarefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Eqref: {\n        let tempEqrefs = parentFunction.tempEqrefs;\n        if (tempEqrefs) temps = tempEqrefs;\n        else parentFunction.tempEqrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.I31ref: {\n        let tempI31refs = parentFunction.tempI31refs;\n        if (tempI31refs) temps = tempI31refs;\n        else parentFunction.tempI31refs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Dataref: {\n        let tempDatarefs = parentFunction.tempDatarefs;\n        if (tempDatarefs) temps = tempDatarefs;\n        else parentFunction.tempDatarefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) {\n      this.scopedLocals = scopedLocals = new Map();\n    } else if (scopedLocals.has(name)) {\n      let existingLocal = assert(scopedLocals.get(name));\n      if (reportNode) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.parentFunction.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range,\n            existingLocal.declaration.name.range,\n            name\n          );\n        } else {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range, name\n          );\n        }\n      }\n      return existingLocal;\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags != null && fieldFlags.has(field)) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      thisLocalFlags[i] = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        thisLocalFlags[i] = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\nexport { findUsedLocals } from \"./passes/findusedlocals\";\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sets the `exportRuntime` option. */\nexport function setExportRuntime(options: Options, exportRuntime: bool): void {\n  options.exportRuntime = exportRuntime;\n}\n\n/** Default stack size. */\nexport const DEFAULT_STACK_SIZE = 16384;\n\n/** Sets the `stackSize` option. */\nexport function setStackSize(options: Options, stackSize: i32): void {\n  options.stackSize = stackSize;\n}\n\n/** Sets the bundle semantic version. */\nexport function setBundleVersion(\n  options: Options,\n  bundleMajorVersion: i32,\n  bundleMinorVersion: i32,\n  bundlePatchVersion: i32,\n): void {\n  options.bundleMajorVersion = bundleMajorVersion;\n  options.bundleMinorVersion = bundleMinorVersion;\n  options.bundlePatchVersion = bundlePatchVersion;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { BuiltinNames } from \"./builtins\";\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\nexport type CString = usize;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: NativeType = 8 /* _BinaryenTypeExternref */;\n  export const Anyref: NativeType = 9 /* _BinaryenTypeAnyref */;\n  export const Eqref: NativeType = 10 /* _BinaryenTypeEqref */;\n  export const I31ref: NativeType = 11 /* _BinaryenTypeI31ref */;\n  export const Dataref: NativeType = 12 /* _BinaryenTypeDataref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048 /* _BinaryenFeatureMemory64 */,\n  TypedFunctionReferences  = 4096, /* _BinaryenTypedFunctionReferences */\n  All = 8191 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  Unreachable = 23 /* _BinaryenUnreachableId */,\n  AtomicRMW = 24 /* _BinaryenAtomicRMWId */,\n  AtomicCmpxchg = 25 /* _BinaryenAtomicCmpxchgId */,\n  AtomicWait = 26 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 27 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 28 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 29 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 30 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 31 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 32 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 33 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 34 /* _BinaryenSIMDLoadId */,\n  SIMDLoadStoreLane = 35 /* _BinaryenSIMDLoadStoreLaneId */,\n  MemoryInit = 36 /* _BinaryenMemoryInitId */,\n  DataDrop = 37 /* _BinaryenDataDropId */,\n  MemoryCopy = 38 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 39 /* _BinaryenMemoryFillId */,\n  Pop = 40 /* _BinaryenPopId */,\n  RefNull = 41 /* _BinaryenRefNullId */,\n  RefIs = 42 /* _BinaryenRefIsId */,\n  RefFunc = 43 /* _BinaryenRefFuncId */,\n  RefEq = 44 /* _BinaryenRefEqId */,\n  Try = 45 /* _BinaryenTryId */,\n  Throw = 46 /* _BinaryenThrowId */,\n  Rethrow = 47 /* _BinaryenRethrowId */,\n  TupleMake = 48 /* _BinaryenTupleMakeId */,\n  TupleExtract = 49 /* _BinaryenTupleExtractId */,\n  I31New = 50 /* _BinaryenI31NewId */,\n  I31Get = 51 /* _BinaryenI31GetId */,\n  CallRef = 52 /* _BinaryenCallRefId */,\n  RefTest = 53 /* _BinaryenRefTestId */,\n  RefCast = 54 /* _BinaryenRefCastId */,\n  BrOn = 55 /* _BinaryenBrOnId */,\n  RttCanon = 56 /* _BinaryenRttCanonId */,\n  RttSub = 57 /* _BinaryenRttSubId */,\n  StructNew = 58 /* _BinaryenStructNewId */,\n  StructGet = 59 /* _BinaryenStructGetId */,\n  StructSet = 60 /* _BinaryenStructSetId */,\n  ArrayNew = 61 /* _BinaryenArrayNewId */,\n  ArrayGet = 62 /* _BinaryenArrayGetId */,\n  ArraySet = 63 /* _BinaryenArraySetId */,\n  ArrayLen = 64 /* _BinaryenArrayLenId */,\n  RefAs = 65 /* _BinaryenRefAsId */\n}\n\nexport enum ExternalKind {\n  Function = 0, /* _BinaryenExternalFunction */\n  Table = 1, /* _BinaryenExternalTable */\n  Memory = 2, /* _BinaryenExternalMemory */\n  Global = 3, /* _BinaryenExternalGlobal */\n  Event = 4 /* _BinaryenExternalEvent */\n}\n\nexport enum UnaryOp {\n  /** i32.clz */\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  /** i64.clz */\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  /** i32.ctz */\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  /** i64.ctz */\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  /** i32.popcnt */\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  /** i64.popcnt */\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  /** f32.neg */\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  /** f64.neg */\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  /** f32.abs */\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  /** f64.abs */\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  /** f32.ceil */\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  /** f64.ceil */\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  /** f32.floor */\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  /** f64.floor */\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  /** f32.trunc */\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  /** f64.trunc */\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  /** f32.nearest */\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  /** f64.nearest */\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  /** f32.sqrt */\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  /** f64.sqrt */\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  /** i32.eqz */\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  /** i64.eqz */\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  /** i64.extend_i32_s */\n  ExtendI32ToI64 = 22 /* _BinaryenExtendSInt32 */,\n  /** i64.extend_i32_u */\n  ExtendU32ToU64 = 23 /* _BinaryenExtendUInt32 */,\n  /** i32.wrap_i64 */\n  WrapI64ToI32 = 24 /* _BinaryenWrapInt64 */,\n  /** i32.trunc_f32_s */\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  /** i64.trunc_f32_s */\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  /** i32.trunc_f32_u */\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  /** i64.trunc_f32_u */\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  /** i32.trunc_f64_s */\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  /** i64.trunc_f64_s */\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  /** i32.trunc_f64_u */\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  /** i64.trunc_f64_u */\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  /** i32.reinterpret_f32 */\n  ReinterpretF32ToI32 = 33 /* _BinaryenReinterpretFloat32 */,\n  /** i64.reinterpret_f64 */\n  ReinterpretF64ToI64 = 34 /* _BinaryenReinterpretFloat64 */,\n  /** f32.convert_i32_s */\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  /** f64.convert_i32_s */\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  /** f32.convert_i32_u */\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  /** f64.convert_i32_u */\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  /** f32.convert_i64_s */\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  /** f64.convert_i64_s */\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  /** f32.convert_i64_u */\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  /** f64.convert_i64_u */\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  /** f64.promote.f32 */\n  PromoteF32ToF64 = 43 /* _BinaryenPromoteFloat32 */,\n  /** f32.demote_f64 */\n  DemoteF64ToF32 = 44 /* _BinaryenDemoteFloat64 */,\n  /** f32.reinterpret_i32 */\n  ReinterpretI32ToF32 = 45 /* _BinaryenReinterpretInt32 */,\n  /** f64.reinterpret_i64 */\n  ReinterpretI64ToF64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n\n  /** i32.extend8_s */\n  Extend8I32 = 47 /* _BinaryenExtendS8Int32 */,\n  /** i32.extend16_s */\n  Extend16I32 = 48 /* _BinaryenExtendS16Int32 */,\n  /** i64.extend8_s */\n  Extend8I64 = 49 /* _BinaryenExtendS8Int64 */,\n  /** i64.extend16_s */\n  Extend16I64 = 50 /* _BinaryenExtendS16Int64 */,\n  /** i64.extend32_s (i64 in, i64 out) */\n  Extend32I64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n\n  /** i32.trunc_sat_f32_s */\n  TruncSatF32ToI32 = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  /** i32.trunc_sat_f32_u */\n  TruncSatF32ToU32 = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  /** i32.trunc_sat_f64_s */\n  TruncSatF64ToI32 = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  /** i32.trunc_sat_f64_u */\n  TruncSatF64ToU32 = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  /** i64.trunc_sat_f32_s */\n  TruncSatF32ToI64 = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  /** i64.trunc_sat_f32_u */\n  TruncSatF32ToU64 = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  /** i64.trunc_sat_f64_s */\n  TruncSatF64ToI64 = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  /** i64.trunc_sat_f64_u */\n  TruncSatF64ToU64 = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.splat */\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  /** i16x8.splat */\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  /** i32x4.splat */\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  /** i64x2.splat */\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  /** f32x4.splat */\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  /** f64x2.splat */\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  /** v128.not */\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  /** v128.any_true */\n  AnyTrueV128 = 67 /* _BinaryenAnyTrueVec128 */,\n  /** i8x16.abs */\n  AbsI8x16 = 68 /* _BinaryenAbsVecI8x16 */,\n  /** i8x16.neg */\n  NegI8x16 = 69 /* _BinaryenNegVecI8x16 */,\n  /** i8x16.all_true */\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  /** i8x16.bitmask */\n  BitmaskI8x16 = 71 /* _BinaryenBitmaskVecI8x16 */,\n  /** i8x16.popcnt */\n  PopcntI8x16 = 72 /* _BinaryenPopcntVecI8x16 */, // UNIMP\n  /** i16x8.abs */\n  AbsI16x8 = 73 /* _BinaryenAbsVecI16x8 */,\n  /** i16x8.neg */\n  NegI16x8 = 74 /* _BinaryenNegVecI16x8 */,\n  /** i16x8.all_true */\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  /** i16x8.bitmask */\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  /** i32x4.abs */\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  /** i32x4.neg */\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  /** i32x4.all_true */\n  AllTrueI32x4 = 79 /* _BinaryenAllTrueVecI32x4 */,\n  /** i32x4.bitmask */\n  BitmaskI32x4 = 80 /* _BinaryenBitmaskVecI32x4 */,\n  /** i64x2.abs */\n  AbsI64x2 = 81 /* _BinaryenAbsVecI64x2 */,\n  /** i64x2.neg */\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  /** i64x2.all_true */\n  AllTrueI64x2 = 83 /* _BinaryenAllTrueVecI64x2 */,\n  /** i64x2.bitmask */\n  BitmaskI64x2 = 84 /* _BinaryenBitmaskVecI64x2 */, // UNIMP\n  /** f32x4.abs */\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  /** f32x4.neg */\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  /** f32x4.sqrt */\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  /** f32x4.ceil */\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  /** f32x4.floor */\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  /** f32x4.trunc */\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  /** f32x4.nearest */\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  /** f64x2.abs */\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  /** f64x2.neg */\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  /** f64x2.sqrt */\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  /** f64x2.ceil */\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  /** f64x2.floor */\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  /** f64x2.trunc */\n  TruncF64x2 = 97 /* _BinaryenTruncVecF64x2 */,\n  /** f64x2.nearest */\n  NearestF64x2 = 98 /* _BinaryenNearestVecF64x2 */,\n  /** i16x8.extadd_pairwise_i8x16_s */\n  ExtaddPairwiseI8x16ToI16x8 = 99 /* _BinaryenExtAddPairwiseSVecI8x16ToI16x8 */, // UNIMP\n  /** i16x8.extadd_pairwise.i8x16_u */\n  ExtaddPairwiseU8x16ToU16x8 = 100 /* _BinaryenExtAddPairwiseUVecI8x16ToI16x8 */, // UNIMP\n  /** i32x4.extadd_pairwise.i16x8_s */\n  ExtaddPairwiseI16x8ToI32x4 = 101 /* _BinaryenExtAddPairwiseSVecI16x8ToI32x4 */, // UNIMP\n  /** i32x4.extadd_pairwise.i64x8_u */\n  ExtaddPairwiseU16x8ToU32x4 = 102 /* _BinaryenExtAddPairwiseUVecI16x8ToI32x4 */, // UNIMP\n  /** i32x4.trunc_sat_f32x4_s */\n  TruncSatF32x4ToI32x4 = 103 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  /** i32x4.trunc_sat_f32x4_u */\n  TruncSatF32x4ToU32x4 = 104 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertI32x4ToF32x4 = 105 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  /** f32x4.convert_i32x4_u */\n  ConvertU32x4ToF32x4 = 106 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  /** i16x8.extend_low_i8x16_s */\n  ExtendLowI8x16ToI16x8 = 107 /* _BinaryenExtendLowSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_s */\n  ExtendHighI8x16ToI16x8 = 108 /* _BinaryenExtendHighSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_low_i8x16_u */\n  ExtendLowU8x16ToU16x8 = 109 /* _BinaryenExtendLowUVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_u */\n  ExtendHighU8x16ToU16x8 = 110 /* _BinaryenExtendHighUVecI8x16ToVecI16x8 */,\n  /** i32x4.extend_low_i16x8_s */\n  ExtendLowI16x8ToI32x4 = 111 /* _BinaryenExtendLowSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_s */\n  ExtendHighI16x8ToI32x4 = 112 /* _BinaryenExtendHighSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_low_i16x8_u */\n  ExtendLowU16x8ToU32x4 = 113 /* _BinaryenExtendLowUVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_u */\n  ExtendHighU16x8ToU32x4 = 114 /* _BinaryenExtendHighUVecI16x8ToVecI32x4 */,\n  /** i64x2.extend_low_i32x4_s */\n  ExtendLowI32x4ToI64x2 = 115 /* _BinaryenExtendLowSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_s */\n  ExtendHighI32x4ToI64x2 = 116 /* _BinaryenExtendHighSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_low_i32x4_u */\n  ExtendLowU32x4ToU64x2 = 117 /* _BinaryenExtendLowUVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_u */\n  ExtendHighU32x4ToU64x2 = 118 /* _BinaryenExtendHighUVecI32x4ToVecI64x2 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertLowI32x4ToF64x2 = 119 /* _BinaryenConvertLowSVecI32x4ToVecF64x2 */, // UNIMP\n  /** f32x4.convert_i32x4_u */\n  ConvertLowU32x4ToF64x2 = 120 /* _BinaryenConvertLowUVecI32x4ToVecF64x2 */, // UNIMP\n  /** i32x4.trunc_sat_f64x2_s_zero */\n  TruncSatF64x2ToI32x4Zero = 121 /* _BinaryenTruncSatZeroSVecF64x2ToVecI32x4 */, // UNIMP\n  /** i32x4.trunc_sat_f64x2_u_zero */\n  TruncSatF64x2ToU32x4Zero = 122 /* _BinaryenTruncSatZeroUVecF64x2ToVecI32x4 */, // UNIMP\n  /** f32x4.demote_f64x2_zero */\n  DemoteZeroF64x2ToF32x4 = 123 /* _BinaryenDemoteZeroVecF64x2ToVecF32x4 */, // UNIMP\n  /** f64x2.promote_low_f32x4 */\n  PromoteLowF32x4ToF64x2 = 124 /* _BinaryenPromoteLowVecF32x4ToVecF64x2 */, // UNIMP\n\n  _last = PromoteLowF32x4ToF64x2,\n\n  // Target dependent\n\n  /** i32.clz or i64.clz, depending on target word size */\n  ClzSize,\n  /** i32.ctz or i64.ctz, depending on target word size */\n  CtzSize,\n  /** i32.popcnt or i64.popcnt, depending on target word size */\n  PopcntSize,\n  /** i32.eqz or i64.eqz, depending on target word size */\n  EqzSize\n}\n\nexport enum BinaryOp {\n  /** i32.add */\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  /** i32.sub */\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  /** i32.mul */\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  /** i32.div_s */\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  /** i32.div_u */\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  /** i32.rem_s */\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  /** i32.rem_u */\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  /** i32.and */\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  /** i32.or */\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  /** i32.xor */\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  /** i32.shl */\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  /** i32.shr_s */\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  /** i32.shr_u */\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  /** i32.rotl */\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  /** i32.rotr */\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  /** i32.eq */\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  /** i32.ne */\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  /** i32.lt_s */\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  /** i32.lt_u */\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  /** i32.le_s */\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  /** i32.le_u */\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  /** i32.gt_s */\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  /** i32.gt_u */\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  /** i32.ge_s */\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  /** i32.ge_u */\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  /** i64.add */\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  /** i64.sub */\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  /** i64.mul */\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  /** i64.div_s */\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  /** i64.div_u */\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  /** i64.rem_s */\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  /** i64.rem_u */\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  /** i64.and */\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  /** i64.or */\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  /** i64.xor */\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  /** i64.shl */\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  /** i64.shr_s */\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  /** i64.shr_u */\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  /** i64.rotl */\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  /** i64.rotr */\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  /** i64.eq */\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  /** i64.ne */\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  /** i64.lt_s */\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  /** i64.lt_u */\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  /** i64.le_s */\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  /** i64.le_u */\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  /** i64.gt_s */\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  /** i64.gt_u */\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  /** i64.ge_s */\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  /** i64.ge_u */\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  /** f32.add */\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  /** f32.sub */\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  /** f32.mul */\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  /** f32.div */\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  /** f32.copysign */\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  /** f32.min */\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  /** f32.max */\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  /** f32.eq */\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  /** f32.ne */\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  /** f32.lt */\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  /** f32.le */\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  /** f32.gt */\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  /** f32.ge */\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  /** f64.add */\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  /** f64.sub */\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  /** f64.mul */\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  /** f64.div */\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  /** f64.copysign */\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  /** f64.min */\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  /** f64.max */\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  /** f64.eq */\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  /** f64.ne */\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  /** f64.lt */\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  /** f64.le */\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  /** f64.gt */\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  /** f64.ge */\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.eq */\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  /** i8x16.he */\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  /** i8x16.lt_s */\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  /** i8x16.lt_u */\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  /** i8x16.gt_s */\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  /** i8x16.gt_u */\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  /** i8x16.le_s */\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  /** i8x16.le_u */\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  /** i8x16.ge_s */\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  /** i8x16.ge_u */\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  /** i16x8.eq */\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  /** i16x8.ne */\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  /** i16x8.lt_s */\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  /** i16x8.lt_u */\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  /** i16x8.gt_s */\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  /** i16x8.gt_u */\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  /** i16x8.le_s */\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  /** i16x8.le_u */\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  /** i16x8.ge_s */\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  /** i16x8.ge_u */\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  /** i32x4.eq */\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  /** i32x4.ne */\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  /** i32x4.lt_s */\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  /** i32x4.lt_u */\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  /** i32x4.gt_s */\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  /** i32x4.gt_u */\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  /** i32x4.le_s */\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  /** i32x4.le_u */\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  /** i32x4.ge_s */\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  /** i32x4.ge_u */\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  /** i64x2.eq */\n  EqI64x2 = 106 /* _BinaryenEqVecI64x2 */,\n  /** i64x2.ne */\n  NeI64x2 = 107 /* _BinaryenNeVecI64x2 */,\n  /** i64x2.lt_s */\n  LtI64x2 = 108 /* _BinaryenLtSVecI64x2 */,\n  /** i64x2.gt_s */\n  GtI64x2 = 109 /* _BinaryenGtSVecI64x2 */,\n  /** i64x2.le_s */\n  LeI64x2 = 110 /* _BinaryenLeSVecI64x2 */,\n  /** i64x2.ge_s */\n  GeI64x2 = 111 /* _BinaryenGeSVecI64x2 */,\n  /** f32x4.eq */\n  EqF32x4 = 112 /* _BinaryenEqVecF32x4 */,\n  /** f32x4.ne */\n  NeF32x4 = 113 /* _BinaryenNeVecF32x4 */,\n  /** f32x4.lt */\n  LtF32x4 = 114 /* _BinaryenLtVecF32x4 */,\n  /** f32x4.gt */\n  GtF32x4 = 115 /* _BinaryenGtVecF32x4 */,\n  /** f32x4.le */\n  LeF32x4 = 116 /* _BinaryenLeVecF32x4 */,\n  /** f32x4.ge */\n  GeF32x4 = 117 /* _BinaryenGeVecF32x4 */,\n  /** f64x2.eq */\n  EqF64x2 = 118 /* _BinaryenEqVecF64x2 */,\n  /** f64x2.ne */\n  NeF64x2 = 119 /* _BinaryenNeVecF64x2 */,\n  /** f64x2.lt */\n  LtF64x2 = 120 /* _BinaryenLtVecF64x2 */,\n  /** f64x2.gt */\n  GtF64x2 = 121 /* _BinaryenGtVecF64x2 */,\n  /** f64x2.le */\n  LeF64x2 = 122 /* _BinaryenLeVecF64x2 */,\n  /** f64x2.ge */\n  GeF64x2 = 123 /* _BinaryenGeVecF64x2 */,\n  /** v128.and */\n  AndV128 = 124 /* _BinaryenAndVec128 */,\n  /** v128.or */\n  OrV128 = 125 /* _BinaryenOrVec128 */,\n  /** v128.xor */\n  XorV128 = 126 /* _BinaryenXorVec128 */,\n  /** v128.andnot */\n  AndnotV128 = 127 /* _BinaryenAndNotVec128 */,\n  /** i8x16.add */\n  AddI8x16 = 128 /* _BinaryenAddVecI8x16 */,\n  /** i8x16.add_sat_s */\n  AddSatI8x16 = 129 /* _BinaryenAddSatSVecI8x16 */,\n  /** i8x16.add_sat_u */\n  AddSatU8x16 = 130 /* _BinaryenAddSatUVecI8x16 */,\n  /** i8x16.sub */\n  SubI8x16 = 131 /* _BinaryenSubVecI8x16 */,\n  /** i8x16.sub_sat_s */\n  SubSatI8x16 = 132 /* _BinaryenSubSatSVecI8x16 */,\n  /** i8x16.sub_sat_u */\n  SubSatU8x16 = 133 /* _BinaryenSubSatUVecI8x16 */,\n  /** i8x16.min_s */\n  MinI8x16 = 134 /* _BinaryenMinSVecI8x16 */,\n  /** i8x16.min_u */\n  MinU8x16 = 135 /* _BinaryenMinUVecI8x16 */,\n  /** i8x16.max_s */\n  MaxI8x16 = 136 /* _BinaryenMaxSVecI8x16 */,\n  /** i8x16.max_u */\n  MaxU8x16 = 137 /* _BinaryenMaxUVecI8x16 */,\n  /** i8x16.avgr_u */\n  AvgrU8x16 = 138 /* _BinaryenAvgrUVecI8x16 */,\n  /** i16x8.add */\n  AddI16x8 = 139 /* _BinaryenAddVecI16x8 */,\n  /** i16x8.add_sat_s */\n  AddSatI16x8 = 140 /* _BinaryenAddSatSVecI16x8 */,\n  /** i16x8.add_sat_u */\n  AddSatU16x8 = 141 /* _BinaryenAddSatUVecI16x8 */,\n  /** i16x8.sub */\n  SubI16x8 = 142 /* _BinaryenSubVecI16x8 */,\n  /** i16x8.sub_sat_s */\n  SubSatI16x8 = 143 /* _BinaryenSubSatSVecI16x8 */,\n  /** i16x8.sub_sat_u */\n  SubSatU16x8 = 144 /* _BinaryenSubSatUVecI16x8 */,\n  /** i16x8.mul */\n  MulI16x8 = 145 /* _BinaryenMulVecI16x8 */,\n  /** i16x8.min_s */\n  MinI16x8 = 146 /* _BinaryenMinSVecI16x8 */,\n  /** i16x8.min_u */\n  MinU16x8 = 147 /* _BinaryenMinUVecI16x8 */,\n  /** i16x8.max_s */\n  MaxI16x8 = 148 /* _BinaryenMaxSVecI16x8 */,\n  /** i16x8.max_u */\n  MaxU16x8 = 149 /* _BinaryenMaxUVecI16x8 */,\n  /** i16x8.avgr_u */\n  AvgrU16x8 = 150 /* _BinaryenAvgrUVecI16x8 */,\n  /** i16x8.q15mulr_sat_s */\n  Q15mulrSatI16x8 = 151 /* _BinaryenQ15MulrSatSVecI16x8 */, // UNIMP\n  /** i16x8.extmul_low_i8x16_s */\n  ExtmulLowI16x8 = 152 /* _BinaryenExtMulLowSVecI16x8 */, // UNIMP\n  /** i16x8.extmul_high_i8x16_s */\n  ExtmulHighI16x8 = 153 /* _BinaryenExtMulHighSVecI16x8 */, // UNIMP\n  /** i16x8.extmul_low_i8x16_u */\n  ExtmulLowU16x8 = 154 /* _BinaryenExtMulLowUVecI16x8 */, // UNIMP\n  /** i16x8.extmul_high_i8x16_u */\n  ExtmulHighU16x8 = 155 /* _BinaryenExtMulHighUVecI16x8 */, // UNIMP\n  /** i32x4.add */\n  AddI32x4 = 156 /* _BinaryenAddVecI32x4 */,\n  /** i32x4.sub */\n  SubI32x4 = 157 /* _BinaryenSubVecI32x4 */,\n  /** i32x4.mul */\n  MulI32x4 = 158 /* _BinaryenMulVecI32x4 */,\n  /** i32x4.min_s */\n  MinI32x4 = 159 /* _BinaryenMinSVecI32x4 */,\n  /** i32x4.min_u */\n  MinU32x4 = 160 /* _BinaryenMinUVecI32x4 */,\n  /** i32x4.max_s */\n  MaxI32x4 = 161 /* _BinaryenMaxSVecI32x4 */,\n  /** i32x4.max_u */\n  MaxU32x4 = 162 /* _BinaryenMaxUVecI32x4 */,\n  /** i32x4.dot_i16x8_s */\n  DotI16x8 = 163 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  /** i32x4.extmul_low_i16x8_s */\n  ExtmulLowI32x4 = 164 /* _BinaryenExtMulLowSVecI32x4 */, // UNIMP\n  /** i32x4.extmul_high_i16x8_s */\n  ExtmulHighI32x4 = 165 /* _BinaryenExtMulHighSVecI32x4 */, // UNIMP\n  /** i32x4.extmul_low_i16x8_u */\n  ExtmulLowU32x4 = 166 /* _BinaryenExtMulLowUVecI32x4 */, // UNIMP\n  /** i32x4.extmul_high_i16x8_u */\n  ExtmulHighU32x4 = 167 /* _BinaryenExtMulHighUVecI32x4 */, // UNIMP\n  /** i64x2.add */\n  AddI64x2 = 168 /* _BinaryenAddVecI64x2 */,\n  /** i64x2.sub */\n  SubI64x2 = 169 /* _BinaryenSubVecI64x2 */,\n  /** i64x2.mul */\n  MulI64x2 = 170 /* _BinaryenMulVecI64x2 */,\n  /** i64x2.extmul_low_i32x4_s */\n  ExtmulLowI64x2 = 171 /* _BinaryenExtMulLowSVecI64x2 */, // UNIMP\n  /** i64x2.extmul_high_i32x4_s */\n  ExtmulHighI64x2 = 172 /* _BinaryenExtMulHighSVecI64x2 */, // UNIMP\n  /** i64x2.extmul_low_i32x4_u */\n  ExtmulLowU64x2 = 173 /* _BinaryenExtMulLowUVecI64x2 */, // UNIMP\n  /** i64x2.extmul_high_i32x4_u */\n  ExtmulHighU64x2 = 174 /* _BinaryenExtMulHighUVecI64x2 */, // UNIMP\n  /** f32x4.add */\n  AddF32x4 = 175 /* _BinaryenAddVecF32x4 */,\n  /** f32x4.sub */\n  SubF32x4 = 176 /* _BinaryenSubVecF32x4 */,\n  /** f32x4.mul */\n  MulF32x4 = 177 /* _BinaryenMulVecF32x4 */,\n  /** f32x4.div */\n  DivF32x4 = 178 /* _BinaryenDivVecF32x4 */,\n  /** f32x4.min */\n  MinF32x4 = 179 /* _BinaryenMinVecF32x4 */,\n  /** f32x4.max */\n  MaxF32x4 = 180 /* _BinaryenMaxVecF32x4 */,\n  /** f32x4.pmin */\n  PminF32x4 = 181 /* _BinaryenPMinVecF32x4 */,\n  /** f32x4.pmax */\n  PmaxF32x4 = 182 /* _BinaryenPMaxVecF32x4 */,\n  /** f64x2.add */\n  AddF64x2 = 183 /* _BinaryenAddVecF64x2 */,\n  /** f64x2.sub */\n  SubF64x2 = 184 /* _BinaryenSubVecF64x2 */,\n  /** f64x2.mul */\n  MulF64x2 = 185 /* _BinaryenMulVecF64x2 */,\n  /** f64x2.div */\n  DivF64x2 = 186 /* _BinaryenDivVecF64x2 */,\n  /** f64x2.min */\n  MinF64x2 = 187 /* _BinaryenMinVecF64x2 */,\n  /** f64x2.max */\n  MaxF64x2 = 188 /* _BinaryenMaxVecF64x2 */,\n  /** f64x2.pmin */\n  PminF64x2 = 189 /* _BinaryenPMinVecF64x2 */,\n  /** f64x2.pmax */\n  PmaxF64x2 = 190 /* _BinaryenPMaxVecF64x2 */,\n  /** i8x16.narrow_i16x8_s */\n  NarrowI16x8ToI8x16 = 191 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  /** i8x16.narrow_i16x8_u */\n  NarrowU16x8ToU8x16 = 192 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  /** i16x8.narrow_i32x4_s */\n  NarrowI32x4ToI16x8 = 193 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  /** i16x8.narrow_i32x4_u */\n  NarrowU32x4ToU16x8 = 194 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  /** i8x16.swizzle */\n  SwizzleI8x16 = 195 /* _BinaryenSwizzleVec8x16 */,\n\n  _last = SwizzleI8x16,\n\n  // Target dependent\n\n  /** i32.add or i64.add, depending on target word size */\n  AddSize,\n  /** i32.sub or i64.sub, depending on target word size */\n  SubSize,\n  /** i32.mul or i64.mul, depending on target word size */\n  MulSize,\n  /** i32.div_s or i64.div_s, depending on target word size */\n  DivISize,\n  /** i32.div_u or i64.div_u, depending on target word size */\n  DivUSize,\n  /** i32.rem_s or i64.rem_s, depending on target word size */\n  RemISize,\n  /** i32.rem_u or i64.rem_u, depending on target word size */\n  RemUSize,\n  /** i32.and or i64.and, depending on target word size */\n  AndSize,\n  /** i32.or or i64.or, depending on target word size */\n  OrSize,\n  /** i32.xor or i64.xor, depending on target word size */\n  XorSize,\n  /** i32.shl or i64.shl, depending on target word size */\n  ShlSize,\n  /** i32.shr_s or i64.shr_s, depending on target word size */\n  ShrISize,\n  /** i32.shr_u or i64.shr_u, depending on target word size */\n  ShrUSize,\n  /** i32.rotl or i64.rotl, depending on target word size */\n  RotlSize,\n  /** i32.rotr or i64.rotr, depending on target word size */\n  RotrSize,\n  /** i32.eq or i64.eq, depending on target word size */\n  EqSize,\n  /** i32.ne or i64.ne, depending on target word size */\n  NeSize,\n  /** i32.lt_s or i64.lt_s, depending on target word size */\n  LtISize,\n  /** i32.lt_u or i64.lt_u, depending on target word size */\n  LtUSize,\n  /** i32.le_s or i64.le_s, depending on target word size */\n  LeISize,\n  /** i32.le_u or i64.le_u, depending on target word size */\n  LeUSize,\n  /** i32.gt_s or i64.gt_s, depending on target word size */\n  GtISize,\n  /** i32.gt_u or i64.gt_u, depending on target word size */\n  GtUSize,\n  /** i32.ge_s or i64.ge_s, depending on target word size */\n  GeISize,\n  /** i32.ge_u or i64.ge_u, depending on target word size */\n  GeUSize\n}\n\nexport enum AtomicRMWOp {\n  /** i32.atomic.rmw.add, i32.atomic.rmw8.add_u, i32.atomic.rmw16.add_u, i64.atomic.rmw.add, i64.atomic.rmw8.add_u, i64.atomic.rmw16.add_u, i64.atomic.rmw32.add_u */\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  /** i32.atomic.rmw.sub, i32.atomic.rmw8.sub_u, i32.atomic.rmw16.sub_u, i64.atomic.rmw.sub, i64.atomic.rmw8.sub_u, i64.atomic.rmw16.sub_u, i64.atomic.rmw32.sub_u */\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  /** i32.atomic.rmw.and, i32.atomic.rmw8.and_u, i32.atomic.rmw16.and_u, i64.atomic.rmw.and, i64.atomic.rmw8.and_u, i64.atomic.rmw16.and_u, i64.atomic.rmw32.and_u */\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  /** i32.atomic.rmw.or, i32.atomic.rmw8.or_u, i32.atomic.rmw16.or_u, i64.atomic.rmw.or, i64.atomic.rmw8.or_u, i64.atomic.rmw16.or_u, i64.atomic.rmw32.or_u */\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  /** i32.atomic.rmw.xor, i32.atomic.rmw8.xor_u, i32.atomic.rmw16.xor_u, i64.atomic.rmw.xor, i64.atomic.rmw8.xor_u, i64.atomic.rmw16.xor_u, i64.atomic.rmw32.xor_u */\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  /** i32.atomic.rmw.xchg, i32.atomic.rmw8.xchg_u, i32.atomic.rmw16.xchg_u, i64.atomic.rmw.xchg, i64.atomic.rmw8.xchg_u, i64.atomic.rmw16.xchg_u, i64.atomic.rmw32.xchg_u */\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  /** i8x16.extract_lane_s */\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  /** i8x16.extract_lane_u */\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  /** i16x8.extract_lane_s */\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  /** i16x8.extract_lane_u */\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  /** i32x4.extract_lane_s */\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  /** i32x4.extract_lane_u */\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  /** i64x2.extract_lane_s */\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  /** i64x2.extract_lane_u */\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  /** i8x16.replace_lane */\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  /** i16x8.replace_lane */\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  /** i32x4.replace_lane */\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  /** i64x2.replace_lane */\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  /** f32x4.replace_lane */\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  /** f64x2.replace_lane */\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  /** i8x16.shl */\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  /** i8x16.shr_s */\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  /** i8x16.shr_u */\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  /** i16x8.shl */\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  /** i16x8.shr_s */\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  /** i16x8.shr_u */\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  /** i16x8.shl */\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  /** i32x4.shr_s */\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  /** i32x4.shr_u */\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  /** i64x2.shl */\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDLoadOp {\n  /** v128.load8_splat */\n  Load8Splat = 0 /* _BinaryenLoad8SplatVec128 */,\n  /** v128.load16_splat */\n  Load16Splat = 1 /* _BinaryenLoad16SplatVec128 */,\n  /** v128.load32_splat */\n  Load32Splat = 2 /* _BinaryenLoad32SplatVec128 */,\n  /** v128.load64_splat */\n  Load64Splat = 3 /* _BinaryenLoad64SplatVec128 */,\n  /** v128.load8x8_s */\n  Load8x8S = 4 /* _BinaryenLoad8x8SVec128 */,\n  /** v128.load8x8_u */\n  Load8x8U = 5 /* _BinaryenLoad8x8UVec128 */,\n  /** v128.load16x4_s */\n  Load16x4S = 6 /* _BinaryenLoad16x4SVec128 */,\n  /** v128.load16x4_u */\n  Load16x4U = 7 /* _BinaryenLoad16x4UVec128 */,\n  /** v128.load32x2_s */\n  Load32x2S = 8 /* _BinaryenLoad32x2SVec128 */,\n  /** v128.load32x2_u */\n  Load32x2U = 9 /* _BinaryenLoad32x2UVec128 */,\n  /** v128.load32_zero */\n  Load32Zero = 10 /* _BinaryenLoad32ZeroVec128 */, // UNIMP\n  /** v128.load64_zero */\n  Load64Zero = 11 /* _BinaryenLoad64ZeroVec128 */, // UNIMP\n}\n\nexport enum SIMDLoadStoreLaneOp {\n  /** v128.load8_lane */\n  Load8Lane = 0 /* _BinaryenLoad8LaneVec128 */, // UNIMP\n  /** v128.load16_lane */\n  Load16Lane = 1 /* _BinaryenLoad16LaneVec128 */, // UNIMP\n  /** v128.load32_lane */\n  Load32Lane = 2 /* _BinaryenLoad32LaneVec128 */, // UNIMP\n  /** v128.load64_lane */\n  Load64Lane = 3 /* _BinaryenLoad64LaneVec128 */, // UNIMP\n  /** v128.store8_lane */\n  Store8Lane = 4 /* _BinaryenStore8LaneVec128 */, // UNIMP\n  /** v128.store16_lane */\n  Store16Lane = 5 /* _BinaryenStore16LaneVec128 */, // UNIMP\n  /** v128.store32_lane */\n  Store32Lane = 6 /* _BinaryenStore32LaneVec128 */, // UNIMP\n  /** v128.store64_lane */\n  Store64Lane = 7 /* _BinaryenStore64LaneVec128 */, // UNIMP\n}\n\nexport enum SIMDTernaryOp {\n  /** v128.bitselect */\n  Bitselect = 0 /* _BinaryenBitselectVec128 */\n}\n\nexport enum RefIsOp {\n  /** ref.is_null */\n  RefIsNull = 0 /* _BinaryenRefIsNull */,\n  /** ref.is_func */\n  RefIsFunc = 1 /* _BinaryenRefIsFunc */,\n  /** ref.is_data */\n  RefIsData = 2 /* _BinaryenRefIsData */,\n  /** ref.is_i31 */\n  RefIsI31 = 3 /* _BinaryenRefIsI31 */\n}\n\nexport enum RefAsOp {\n  /** ref.as_non_null */\n  RefAsNonNull = 0 /* _BinaryenRefAsNonNull */,\n  /** ref.as_func */\n  RefAsFunc = 1 /* _BinaryenRefAsFunc */,\n  /** ref.as_data */\n  RefAsData = 2 /* _BinaryenRefAsData */,\n  /** ref.as_i31 */\n  RefAsI31 = 3 /* _BinaryenRefAsI31 */\n}\n\nexport enum BrOnOp {\n  /** br_on_null */\n  BrOnNull = 0 /* TODO_BinaryenBrOnNull */,\n  /** br_on_cast */\n  BrOnCast = 1 /* TODO_BinaryenBrOnCast */,\n  /** br_on_func */\n  BrOnFunc = 2 /* TODO_BinaryenBrOnFunc */,\n  /** br_on_data */\n  BrOnData = 3 /* TODO_BinaryenBrOnData */,\n  /** br_on_i31 */\n  BrOnI31 = 4 /* TODO_BinaryenBrOnI31 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef,\n    /** Whether a shadow stack is used. */\n    public useShadowStack: bool,\n    /** Architecture-dependent size type. */\n    public sizeType: NativeType\n  ) {\n    assert(sizeType == NativeType.I32 || sizeType == NativeType.I64);\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(useShadowStack: bool, sizeType: NativeType): Module {\n    return new Module(binaryen._BinaryenModuleCreate(), useShadowStack, sizeType);\n  }\n\n  static createFrom(buffer: Uint8Array, useShadowStack: bool, sizeType: NativeType): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length), useShadowStack, sizeType);\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  // isize<T>(value: T): ExpressionRef {\n  //   if (i64_is(value)) {\n  //     if (this.sizeType == NativeType.I64) {\n  //       return this.i64(i64_low(value), i64_high(value));\n  //     }\n  //     assert(i64_is_i32(value));\n  //     return this.i32(i64_low(value));\n  //   }\n  //   return this.sizeType == NativeType.I64\n  //     ? this.i64(i32(value), i32(value) < 0 ? -1 : 0)\n  //     : this.i32(i32(value));\n  // }\n\n  usize<T>(value: T): ExpressionRef {\n    if (i64_is(value)) {\n      if (this.sizeType == NativeType.I64) {\n        return this.i64(i64_low(value), i64_high(value));\n      }\n      assert(i64_is_u32(value));\n      return this.i32(i64_low(value));\n    }\n    return this.sizeType == NativeType.I64\n      ? this.i64(i32(value))\n      : this.i32(i32(value));\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: NativeType): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  ref_eq(left: ExpressionRef, right: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenRefEq(this.ref, left, right);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    value: ExpressionRef\n  ): ExpressionRef {\n    if (op > UnaryOp._last) {\n      let isWam64 = this.sizeType == NativeType.I64;\n      switch (op) {\n        case UnaryOp.ClzSize: return this.unary(isWam64 ? UnaryOp.ClzI64 : UnaryOp.ClzI32, value);\n        case UnaryOp.CtzSize: return this.unary(isWam64 ? UnaryOp.CtzI64 : UnaryOp.CtzI32, value);\n        case UnaryOp.PopcntSize: return this.unary(isWam64 ? UnaryOp.PopcntI64 : UnaryOp.PopcntI32, value);\n        case UnaryOp.EqzSize: return this.unary(isWam64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, value);\n      }\n      assert(false);\n    }\n    return binaryen._BinaryenUnary(this.ref, op, value);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    if (op > BinaryOp._last) {\n      let isWasm64 = this.sizeType == NativeType.I64;\n      switch (op) {\n        case BinaryOp.AddSize: return this.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32, left, right);\n        case BinaryOp.SubSize: return this.binary(isWasm64 ? BinaryOp.SubI64 : BinaryOp.SubI32, left, right);\n        case BinaryOp.MulSize: return this.binary(isWasm64 ? BinaryOp.MulI64 : BinaryOp.MulI32, left, right);\n        case BinaryOp.DivISize: return this.binary(isWasm64 ? BinaryOp.DivI64 : BinaryOp.DivI32, left, right);\n        case BinaryOp.DivUSize: return this.binary(isWasm64 ? BinaryOp.DivU64 : BinaryOp.DivU32, left, right);\n        case BinaryOp.RemISize: return this.binary(isWasm64 ? BinaryOp.RemI64 : BinaryOp.RemI32, left, right);\n        case BinaryOp.RemUSize: return this.binary(isWasm64 ? BinaryOp.RemU64 : BinaryOp.RemU32, left, right);\n        case BinaryOp.AndSize: return this.binary(isWasm64 ? BinaryOp.AndI64 : BinaryOp.AndI32, left, right);\n        case BinaryOp.OrSize: return this.binary(isWasm64 ? BinaryOp.OrI64 : BinaryOp.OrI32, left, right);\n        case BinaryOp.XorSize: return this.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32, left, right);\n        case BinaryOp.ShlSize: return this.binary(isWasm64 ? BinaryOp.ShlI64 : BinaryOp.ShlI32, left, right);\n        case BinaryOp.ShrISize: return this.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32, left, right);\n        case BinaryOp.ShrUSize: return this.binary(isWasm64 ? BinaryOp.ShrU64 : BinaryOp.ShrU32, left, right);\n        case BinaryOp.RotlSize: return this.binary(isWasm64 ? BinaryOp.RotlI64 : BinaryOp.RotlI32, left, right);\n        case BinaryOp.RotrSize: return this.binary(isWasm64 ? BinaryOp.RotrI64 : BinaryOp.RotrI32, left, right);\n        case BinaryOp.EqSize: return this.binary(isWasm64 ? BinaryOp.EqI64 : BinaryOp.EqI32, left, right);\n        case BinaryOp.NeSize: return this.binary(isWasm64 ? BinaryOp.NeI64 : BinaryOp.NeI32, left, right);\n        case BinaryOp.LtISize: return this.binary(isWasm64 ? BinaryOp.LtI64 : BinaryOp.LtI32, left, right);\n        case BinaryOp.LtUSize: return this.binary(isWasm64 ? BinaryOp.LtU64 : BinaryOp.LtU32, left, right);\n        case BinaryOp.LeISize: return this.binary(isWasm64 ? BinaryOp.LeI64 : BinaryOp.LeI32, left, right);\n        case BinaryOp.LeUSize: return this.binary(isWasm64 ? BinaryOp.LeU64 : BinaryOp.LeU32, left, right);\n        case BinaryOp.GtISize: return this.binary(isWasm64 ? BinaryOp.GtI64 : BinaryOp.GtI32, left, right);\n        case BinaryOp.GtUSize: return this.binary(isWasm64 ? BinaryOp.GtU64 : BinaryOp.GtU32, left, right);\n        case BinaryOp.GeISize: return this.binary(isWasm64 ? BinaryOp.GeI64 : BinaryOp.GeI32, left, right);\n        case BinaryOp.GeUSize: return this.binary(isWasm64 ? BinaryOp.GeU64 : BinaryOp.GeU32, left, right);\n      }\n      assert(false);\n    }\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(): ExpressionRef {\n    return binaryen._BinaryenMemorySize(this.ref);\n  }\n\n  memory_grow(delta: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenMemoryGrow(this.ref, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  tostack(value: ExpressionRef): ExpressionRef {\n    if (this.useShadowStack) {\n      let type = binaryen._BinaryenExpressionGetType(value);\n      assert(type == NativeType.I32 || type == NativeType.Unreachable);\n      return this.call(BuiltinNames.tostack, [ value ], type);\n    }\n    return value;\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    isManaged: bool,\n    type: NativeType = NativeType.Auto,\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef,\n    isManaged: bool\n  ): ExpressionRef {\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(\"0\"); // TODO: multiple tables\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    tableName: string,\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  // try(\n  //   body: ExpressionRef,\n  //   catchEvents: string[],\n  //   catchBodies: ExpressionRef[]\n  // ): ExpressionRef {\n  //   var numCatchEvents = catchEvents.length;\n  //   var strs = new Array<usize>(numCatchEvents);\n  //   for (let i = 0; i < numCatchEvents; ++i) {\n  //     strs[i] = this.allocStringCached(catchEvents[i]);\n  //   }\n  //   var cArr1 = allocPtrArray(strs);\n  //   var cArr2 = allocPtrArray(catchBodies);\n  //   var ret = binaryen._BinaryenTry(this.ref, body, cArr1, numCatchEvents, cArr2, catchBodies.length);\n  //   binaryen._free(cArr2);\n  //   binaryen._free(cArr1);\n  //   return ret;\n  // }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    target: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    return binaryen._BinaryenRethrow(this.ref, cStr);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types / gc\n\n  ref_is(\n    op: RefIsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIs(this.ref, op, expr);\n  }\n\n  ref_as(\n    op: RefAsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefAs(this.ref, op, expr);\n  }\n\n  ref_func(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr, type);\n  }\n\n  i31_new(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenI31New(this.ref, value);\n  }\n\n  i31_get(\n    expr: ExpressionRef,\n    signed: bool\n  ): ExpressionRef {\n    return binaryen._BinaryenI31Get(this.ref, expr, signed);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  hasFunction(name: string): bool {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr) != 0;\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: NativeType,\n    paramTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  hasExport(externalName: string): bool {\n    var cStr = this.allocStringCached(externalName);\n    return binaryen._BinaryenGetExport(this.ref, cStr) != 0;\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(\n      this.ref, cStr1, cStr2, cStr3, attribute, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  addFunctionTable(\n    name: string,\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var cStr = this.allocStringCached(name);\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    var tableRef = binaryen._BinaryenGetTable(this.ref, cStr);\n    if (!tableRef) {\n      tableRef = binaryen._BinaryenAddTable(this.ref, cStr, initial, maximum);\n    } else {\n      binaryen._BinaryenTableSetInitial(tableRef, initial);\n      binaryen._BinaryenTableSetMax(tableRef, maximum);\n    }\n    binaryen._BinaryenAddActiveElementSegment(this.ref, cStr, cStr, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  /* setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  } */\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getFastMath(): bool {\n    return binaryen._BinaryenGetFastMath();\n  }\n\n  setFastMath(on: bool): void {\n    binaryen._BinaryenSetFastMath(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames - 1; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.setFastMath(true);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel <= 1 || shrinkLevel >= 2\n          ? 2\n          : 6\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"precompute-propagate\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"merge-locals\");\n\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n      }\n      passes.push(\"remove-unused-names\");\n      passes.push(\"remove-unused-brs\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"inlining\");\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(watFormat: bool = true): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStringsToPointers: Map<string,usize> = new Map();\n  private cachedPointersToStrings: Map<usize,string | null> = new Map();\n\n  allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cached = this.cachedStringsToPointers;\n    if (cached.has(str)) return changetype<usize>(cached.get(str));\n    var ptr = allocString(str);\n    cached.set(str, ptr);\n    return ptr;\n  }\n\n  readStringCached(ptr: usize): string | null {\n    // Binaryen internalizes names, so using this method where it's safe can\n    // avoid quite a bit of unnecessary garbage.\n    if (ptr == 0) return null;\n    var cached = this.cachedPointersToStrings;\n    if (cached.has(ptr)) return changetype<string>(this.cachedPointersToStrings.get(ptr));\n    var str = readString(ptr);\n    cached.set(ptr, str);\n    return str;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStringsToPointers), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStringsToPointers.clear();\n    this.cachedPointersToStrings.clear();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an externref as it is opaque\n          case <u32>NativeType.Externref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function isConstZero(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == NativeType.I32) return getConstValueI32(expr) == 0;\n  if (type == NativeType.I64) return getConstValueI64Low(expr) == 0 && getConstValueI64High(expr) == 0;\n  if (type == NativeType.F32) return getConstValueF32(expr) == 0;\n  if (type == NativeType.F64) return getConstValueF64(expr) == 0;\n  return false;\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition, false); // u32\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  Any = 4095 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nexport function allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  CharCode,\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.skip(Token.TEMPLATELITERAL)) {\n          return this.parseTemplateLiteral(tn, identifier);\n        }\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.TEMPLATELITERAL: {\n        return this.parseTemplateLiteral(tn);\n      }\n      case Token.INTEGERLITERAL: {\n        let value = tn.readInteger();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createIntegerLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        let value = tn.readFloat();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createFloatLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          if (tn.skip(Token.TEMPLATELITERAL)) {\n            expr = this.parseTemplateLiteral(tn, expr);\n            if (!expr) return null;\n          } else {\n            expr = this.maybeParseCallExpression(tn, expr, true);\n          }\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private parseTemplateLiteral(tn: Tokenizer, tag: Expression | null = null): Expression | null {\n    // at '`': ... '`'\n    var startPos = tag ? tag.range.start : tn.tokenPos;\n    var parts = new Array<string>();\n    var rawParts = new Array<string>();\n    var exprs = new Array<Expression>();\n    parts.push(tn.readString(0, tag != null));\n    rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    while (tn.readingTemplateString) {\n      let expr = this.parseExpression(tn);\n      if (!expr) return null;\n      exprs.push(expr);\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"}\"\n        );\n        return null;\n      }\n      parts.push(tn.readString(CharCode.BACKTICK, tag != null));\n      rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    }\n    return Node.createTemplateLiteralExpression(tag, parts, rawParts, exprs, tn.range(startPos, tn.pos));\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL:\n        case Token.TEMPLATELITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n    tn.readingTemplateString = false;\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Utility to find all locals used in an expression.\n * @license Apache-2.0\n */\n\nimport {\n  Visitor\n} from \"./pass\";\n\nimport {\n  ExpressionRef\n} from \"../module\";\n\nimport {\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex\n} from \"../glue/binaryen\";\n\nclass FindUsedLocalsVisitor extends Visitor {\n  used: Set<i32>;\n\n  constructor(used: Set<i32> = new Set()) {\n    super();\n    this.used = used;\n  }\n  \n  /** @override */\n  visitLocalGet(localGet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalGetGetIndex(localGet));\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalSetGetIndex(localSet));\n  }\n}\n\nvar singleton: FindUsedLocalsVisitor | null = null;\n\n/** Finds the indexes of all locals used in the specified expression. */\nexport function findUsedLocals(\n  expr: ExpressionRef,\n  used: Set<i32> = new Set()\n): Set<i32> {\n  var visitor = singleton;\n  if (!visitor) singleton = visitor = new FindUsedLocalsVisitor(used);\n  else visitor.used = used;\n  visitor.visit(expr);\n  return used;\n}\n","/**\n * @fileoverview Infrastructure for custom Binaryen passes.\n * @license Apache-2.0\n */\n\nimport {\n  Module,\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  GlobalRef,\n  Index,\n  CString\n} from \"../module\";\n\nimport {\n  _BinaryenExpressionGetId,\n  _BinaryenBlockGetNumChildren,\n  _BinaryenBlockGetChildAt,\n  _BinaryenIfGetCondition,\n  _BinaryenIfGetIfTrue,\n  _BinaryenIfGetIfFalse,\n  _BinaryenLoopGetBody,\n  _BinaryenBreakGetCondition,\n  _BinaryenBreakGetValue,\n  _BinaryenGetNumFunctions,\n  _BinaryenGetFunctionByIndex,\n  _BinaryenGetNumGlobals,\n  _BinaryenGetGlobalByIndex,\n  _BinaryenFunctionGetBody,\n  _BinaryenSwitchGetCondition,\n  _BinaryenSwitchGetValue,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenLocalSetGetValue,\n  _BinaryenGlobalSetGetValue,\n  _BinaryenGlobalGetInitExpr,\n  _BinaryenLoadGetPtr,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreGetValue,\n  _BinaryenUnaryGetValue,\n  _BinaryenBinaryGetLeft,\n  _BinaryenBinaryGetRight,\n  _BinaryenSelectGetIfTrue,\n  _BinaryenSelectGetIfFalse,\n  _BinaryenSelectGetCondition,\n  _BinaryenDropGetValue,\n  _BinaryenBlockSetChildAt,\n  _BinaryenCallIndirectGetTarget,\n  _BinaryenReturnGetValue,\n  _BinaryenMemoryGrowGetDelta,\n  _BinaryenAtomicRMWGetPtr,\n  _BinaryenAtomicRMWGetValue,\n  _BinaryenAtomicCmpxchgGetPtr,\n  _BinaryenAtomicCmpxchgGetExpected,\n  _BinaryenAtomicCmpxchgGetReplacement,\n  _BinaryenAtomicWaitGetPtr,\n  _BinaryenAtomicWaitGetExpected,\n  _BinaryenAtomicWaitGetTimeout,\n  _BinaryenAtomicNotifyGetPtr,\n  _BinaryenSIMDExtractGetVec,\n  _BinaryenSIMDReplaceGetVec,\n  _BinaryenSIMDReplaceGetValue,\n  _BinaryenSIMDShuffleGetLeft,\n  _BinaryenSIMDShuffleGetRight,\n  _BinaryenSIMDTernaryGetA,\n  _BinaryenSIMDTernaryGetB,\n  _BinaryenSIMDTernaryGetC,\n  _BinaryenSIMDShiftGetVec,\n  _BinaryenSIMDShiftGetShift,\n  _BinaryenSIMDLoadGetPtr,\n  _BinaryenMemoryInitGetDest,\n  _BinaryenMemoryInitGetOffset,\n  _BinaryenMemoryInitGetSize,\n  _BinaryenMemoryCopyGetDest,\n  _BinaryenMemoryCopyGetSource,\n  _BinaryenMemoryCopyGetSize,\n  _BinaryenMemoryFillGetDest,\n  _BinaryenMemoryFillGetValue,\n  _BinaryenMemoryFillGetSize,\n  _BinaryenRefIsGetValue,\n  _BinaryenTryGetBody,\n  _BinaryenTryGetNumCatchBodies,\n  _BinaryenTryGetCatchBodyAt,\n  _BinaryenThrowGetNumOperands,\n  _BinaryenThrowGetOperandAt,\n  _BinaryenTupleMakeGetOperandAt,\n  _BinaryenTupleMakeGetNumOperands,\n  _BinaryenIfSetCondition,\n  _BinaryenIfSetIfTrue,\n  _BinaryenIfSetIfFalse,\n  _BinaryenLoopSetBody,\n  _BinaryenBreakSetCondition,\n  _BinaryenBreakSetValue,\n  _BinaryenSwitchSetCondition,\n  _BinaryenSwitchSetValue,\n  _BinaryenCallSetOperandAt,\n  _BinaryenCallIndirectSetTarget,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenLocalSetSetValue,\n  _BinaryenGlobalSetSetValue,\n  _BinaryenLoadSetPtr,\n  _BinaryenStoreSetPtr,\n  _BinaryenStoreSetValue,\n  _BinaryenUnarySetValue,\n  _BinaryenExpressionFinalize,\n  _BinaryenBinarySetLeft,\n  _BinaryenBinarySetRight,\n  _BinaryenSelectSetIfTrue,\n  _BinaryenSelectSetIfFalse,\n  _BinaryenSelectSetCondition,\n  _BinaryenDropSetValue,\n  _BinaryenReturnSetValue,\n  _BinaryenMemoryGrowSetDelta,\n  _BinaryenAtomicRMWSetPtr,\n  _BinaryenAtomicRMWSetValue,\n  _BinaryenAtomicCmpxchgSetPtr,\n  _BinaryenAtomicCmpxchgSetExpected,\n  _BinaryenAtomicCmpxchgSetReplacement,\n  _BinaryenAtomicWaitSetPtr,\n  _BinaryenAtomicWaitSetExpected,\n  _BinaryenAtomicWaitSetTimeout,\n  _BinaryenAtomicNotifySetPtr,\n  _BinaryenSIMDExtractSetVec,\n  _BinaryenSIMDReplaceSetVec,\n  _BinaryenSIMDReplaceSetValue,\n  _BinaryenSIMDShuffleSetLeft,\n  _BinaryenSIMDShuffleSetRight,\n  _BinaryenSIMDTernarySetA,\n  _BinaryenSIMDTernarySetB,\n  _BinaryenSIMDTernarySetC,\n  _BinaryenSIMDShiftSetVec,\n  _BinaryenSIMDShiftSetShift,\n  _BinaryenSIMDLoadSetPtr,\n  _BinaryenMemoryInitSetDest,\n  _BinaryenMemoryInitSetOffset,\n  _BinaryenMemoryInitSetSize,\n  _BinaryenMemoryCopySetDest,\n  _BinaryenMemoryCopySetSource,\n  _BinaryenMemoryCopySetSize,\n  _BinaryenMemoryFillSetDest,\n  _BinaryenMemoryFillSetValue,\n  _BinaryenMemoryFillSetSize,\n  _BinaryenRefIsSetValue,\n  _BinaryenTrySetBody,\n  _BinaryenTrySetCatchBodyAt,\n  _BinaryenThrowSetOperandAt,\n  _BinaryenTupleMakeSetOperandAt,\n  _BinaryenBlockGetName,\n  _BinaryenLoopGetName,\n  _BinaryenBreakGetName,\n  _BinaryenSwitchGetDefaultName,\n  _BinaryenSwitchGetNumNames,\n  _BinaryenSwitchGetNameAt,\n  _BinaryenCallGetTarget,\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenGlobalGetGetName,\n  _BinaryenGlobalSetGetName,\n  _BinaryenAtomicNotifyGetNotifyCount,\n  _BinaryenAtomicNotifySetNotifyCount,\n  _BinaryenRefFuncGetFunc,\n  _BinaryenThrowGetEvent,\n  _BinaryenTupleExtractGetTuple,\n  _BinaryenTupleExtractSetTuple,\n  _BinaryenRefEqGetLeft,\n  _BinaryenRefEqGetRight,\n  _BinaryenRefEqSetLeft,\n  _BinaryenRefEqSetRight,\n  _BinaryenFunctionSetBody,\n  _BinaryenI31NewGetValue,\n  _BinaryenI31GetGetI31,\n  _BinaryenI31NewSetValue,\n  _BinaryenI31GetSetI31\n} from \"../glue/binaryen\";\n\n/** Base class of custom Binaryen visitors. */\nexport abstract class Visitor {\n  /** Expression stack. */\n  private stack: ExpressionRef[] = new Array<ExpressionRef>();\n\n  /** Gets the current expression being walked. */\n  get currentExpression(): ExpressionRef {\n    var currentExpression = this._currentExpression;\n    if (!currentExpression) throw new Error(\"not walking expressions\");\n    return currentExpression;\n  }\n  _currentExpression: ExpressionRef = 0;\n\n  /** Gets the parent expression of the current expression being walked. Returns zero if already the top-most expression. */\n  get parentExpressionOrNull(): ExpressionRef {\n    var stack = this.stack;\n    var length = stack.length;\n    return length ? stack[length - 1] : 0;\n  }\n\n  // Expressions\n\n  visitBlock(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitIf(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBreak(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSwitch(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCall(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirectPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStore(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitConst(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBinary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSelect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitReturn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemorySize(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryGrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitNop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnreachable(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicRMW(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicCmpxchg(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicWait(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicNotify(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicFence(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDReplace(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShuffle(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDTernary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShift(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryInit(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDataDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryCopy(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryFill(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitPop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefNull(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefIs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefFunc(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefEq(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTry(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitThrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRethrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleMake(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31New(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31Get(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallRef(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefTest(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefCast(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBrOn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttCanon(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttSub(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArraySet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayLen(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefAs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  // Immediates\n\n  visitName(name: CString): void {\n    // unimp\n  }\n\n  visitLabel(name: CString): void {\n    // unimp\n  }\n\n  visitIndex(index: Index): void {\n    // unimp\n  }\n\n  visitEvent(name: CString): void {\n    // unimp\n  }\n\n  // Delegate\n\n  /** Visits any expression, delegating to the respective visitor methods. */\n  visit(expr: ExpressionRef): void {\n    let previousExpression = this._currentExpression;\n    this._currentExpression = assert(expr);\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Block: {\n        this.stack.push(expr);\n        let name = _BinaryenBlockGetName(expr);\n        if (name) this.visitLabel(name);\n        for (let i: Index = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n          this.visit(_BinaryenBlockGetChildAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitBlock(expr);\n        break;\n      }\n      case ExpressionId.If: {\n        this.stack.push(expr);\n        this.visit(_BinaryenIfGetCondition(expr));\n        this.visit(_BinaryenIfGetIfTrue(expr));\n        let ifFalse = _BinaryenIfGetIfFalse(expr);\n        if (ifFalse) this.visit(ifFalse);\n        assert(this.stack.pop() == expr);\n        this.visitIf(expr);\n        break;\n      }\n      case ExpressionId.Loop: {\n        this.stack.push(expr);\n        let name = _BinaryenLoopGetName(expr);\n        if (name) this.visitLabel(name);\n        this.visit(_BinaryenLoopGetBody(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoop(expr);\n        break;\n      }\n      case ExpressionId.Break: {\n        this.stack.push(expr);\n        this.visitLabel(_BinaryenBreakGetName(expr));\n        let condition = _BinaryenBreakGetCondition(expr);\n        if (condition) this.visit(condition);\n        let value = _BinaryenBreakGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitBreak(expr);\n        break;\n      }\n      case ExpressionId.Switch: {\n        this.stack.push(expr);\n        let defaultName = _BinaryenSwitchGetDefaultName(expr);\n        if (defaultName) this.visitLabel(defaultName);\n        let numNames = _BinaryenSwitchGetNumNames(expr);\n        for (let i: Index = 0; i < numNames; ++i) {\n          this.visitLabel(_BinaryenSwitchGetNameAt(expr, i));\n        }\n        this.visit(_BinaryenSwitchGetCondition(expr));\n        let value = _BinaryenSwitchGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitSwitch(expr);\n        break;\n      }\n      case ExpressionId.Call: {\n        this.visitCallPre(expr);\n        this.stack.push(expr);\n        this.visitName(_BinaryenCallGetTarget(expr));\n        let numOperands = _BinaryenCallGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenCallGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCall(expr);\n        break;\n      }\n      case ExpressionId.CallIndirect: {\n        this.visitCallIndirectPre(expr);\n        this.stack.push(expr);\n        this.visit(_BinaryenCallIndirectGetTarget(expr));\n        for (let i: Index = 0, k = _BinaryenCallIndirectGetNumOperands(expr); i < k; ++i) {\n          this.visit(_BinaryenCallIndirectGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCallIndirect(expr);\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalGetGetIndex(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalGet(expr);\n        break;\n      }\n      case ExpressionId.LocalSet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalSetGetIndex(expr));\n        this.visit(_BinaryenLocalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalSet(expr);\n        break;\n      }\n      case ExpressionId.GlobalGet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalGetGetName(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalGet(expr);\n        break;\n      }\n      case ExpressionId.GlobalSet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalSetGetName(expr));\n        this.visit(_BinaryenGlobalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalSet(expr);\n        break;\n      }\n      case ExpressionId.Load: {\n        this.stack.push(expr);\n        this.visit(_BinaryenLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoad(expr);\n        break;\n      }\n      case ExpressionId.Store: {\n        this.stack.push(expr);\n        this.visit(_BinaryenStoreGetPtr(expr));\n        this.visit(_BinaryenStoreGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitStore(expr);\n        break;\n      }\n      case ExpressionId.Const: {\n        this.visitConst(expr);\n        break;\n      }\n      case ExpressionId.Unary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenUnaryGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitUnary(expr);\n        break;\n      }\n      case ExpressionId.Binary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenBinaryGetLeft(expr));\n        this.visit(_BinaryenBinaryGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitBinary(expr);\n        break;\n      }\n      case ExpressionId.Select: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSelectGetIfTrue(expr));\n        this.visit(_BinaryenSelectGetIfFalse(expr));\n        this.visit(_BinaryenSelectGetCondition(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSelect(expr);\n        break;\n      }\n      case ExpressionId.Drop: {\n        this.stack.push(expr);\n        this.visit(_BinaryenDropGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitDrop(expr);\n        break;\n      }\n      case ExpressionId.Return: {\n        let value = _BinaryenReturnGetValue(expr);\n        if (value) {\n          this.stack.push(expr);\n          this.visit(value);\n          assert(this.stack.pop() == expr);\n        }\n        this.visitReturn(expr);\n        break;\n      }\n      case ExpressionId.MemorySize: {\n        this.visitMemorySize(expr);\n        break;\n      }\n      case ExpressionId.MemoryGrow: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryGrowGetDelta(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryGrow(expr);\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.visitNop(expr);\n        break;\n      }\n      case ExpressionId.Unreachable: {\n        this.visitUnreachable(expr);\n        break;\n      }\n      case ExpressionId.AtomicRMW: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicRMWGetPtr(expr));\n        this.visit(_BinaryenAtomicRMWGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicRMW(expr);\n        break;\n      }\n      case ExpressionId.AtomicCmpxchg: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicCmpxchgGetPtr(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetExpected(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetReplacement(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicCmpxchg(expr);\n        break;\n      }\n      case ExpressionId.AtomicWait: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicWaitGetPtr(expr));\n        this.visit(_BinaryenAtomicWaitGetExpected(expr));\n        this.visit(_BinaryenAtomicWaitGetTimeout(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicWait(expr);\n        break;\n      }\n      case ExpressionId.AtomicNotify: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicNotifyGetPtr(expr));\n        this.visit(_BinaryenAtomicNotifyGetNotifyCount(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicNotify(expr);\n        break;\n      }\n      case ExpressionId.AtomicFence: {\n        this.visitAtomicFence(expr);\n        break;\n      }\n      case ExpressionId.SIMDExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDExtractGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDExtract(expr);\n        break;\n      }\n      case ExpressionId.SIMDReplace: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDReplaceGetVec(expr));\n        this.visit(_BinaryenSIMDReplaceGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDReplace(expr);\n        break;\n      }\n      case ExpressionId.SIMDShuffle: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShuffleGetLeft(expr));\n        this.visit(_BinaryenSIMDShuffleGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShuffle(expr);\n        break;\n      }\n      case ExpressionId.SIMDTernary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDTernaryGetA(expr));\n        this.visit(_BinaryenSIMDTernaryGetB(expr));\n        this.visit(_BinaryenSIMDTernaryGetC(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDTernary(expr);\n        break;\n      }\n      case ExpressionId.SIMDShift: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShiftGetVec(expr));\n        this.visit(_BinaryenSIMDShiftGetShift(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShift(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoad: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoad(expr);\n        break;\n      }\n      // TODO: SIMDLoadStoreLane\n      case ExpressionId.MemoryInit: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryInitGetDest(expr));\n        this.visit(_BinaryenMemoryInitGetOffset(expr));\n        this.visit(_BinaryenMemoryInitGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryInit(expr);\n        break;\n      }\n      case ExpressionId.DataDrop: {\n        this.visitDataDrop(expr);\n        break;\n      }\n      case ExpressionId.MemoryCopy: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryCopyGetDest(expr));\n        this.visit(_BinaryenMemoryCopyGetSource(expr));\n        this.visit(_BinaryenMemoryCopyGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryCopy(expr);\n        break;\n      }\n      case ExpressionId.MemoryFill: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryFillGetDest(expr));\n        this.visit(_BinaryenMemoryFillGetValue(expr));\n        this.visit(_BinaryenMemoryFillGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryFill(expr);\n        break;\n      }\n      case ExpressionId.Pop: {\n        this.visitPop(expr);\n        break;\n      }\n      case ExpressionId.RefNull: {\n        this.visitRefNull(expr);\n        break;\n      }\n      case ExpressionId.RefIs: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefIsGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefIs(expr);\n        break;\n      }\n      case ExpressionId.RefFunc: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenRefFuncGetFunc(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefFunc(expr);\n        break;\n      }\n      case ExpressionId.RefEq: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefEqGetLeft(expr));\n        this.visit(_BinaryenRefEqGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefEq(expr);\n        break;\n      }\n      case ExpressionId.Try: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTryGetBody(expr));\n        let numCatchBodies = _BinaryenTryGetNumCatchBodies(expr);\n        for (let i: Index = 0; i < numCatchBodies; ++i) {\n          this.visit(_BinaryenTryGetCatchBodyAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitTry(expr);\n        break;\n      }\n      case ExpressionId.Throw: {\n        this.stack.push(expr);\n        this.visitEvent(_BinaryenThrowGetEvent(expr));\n        let numOperands = _BinaryenThrowGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenThrowGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitThrow(expr);\n        break;\n      }\n      case ExpressionId.Rethrow: {\n        this.visitRethrow(expr);\n        break;\n      }\n      case ExpressionId.TupleMake: {\n        let numOperands = _BinaryenTupleMakeGetNumOperands(expr);\n        if (numOperands) {\n          this.stack.push(expr);\n          for (let i: Index = 0; i < numOperands; ++i) {\n            this.visit(_BinaryenTupleMakeGetOperandAt(expr, i));\n          }\n          assert(this.stack.pop() == expr);\n        }\n        this.visitTupleMake(expr);\n        break;\n      }\n      case ExpressionId.TupleExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTupleExtractGetTuple(expr));\n        assert(this.stack.pop() == expr);\n        this.visitTupleExtract(expr);\n        break;\n      }\n      case ExpressionId.I31New: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31NewGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31New(expr);\n        break;\n      }\n      case ExpressionId.I31Get: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31GetGetI31(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31Get(expr);\n        break;\n      }\n      case ExpressionId.CallRef: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitCallRef(expr);\n        break;\n      }\n      case ExpressionId.RefTest: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefTest(expr);\n        break;\n      }\n      case ExpressionId.RefCast: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefCast(expr);\n        break;\n      }\n      case ExpressionId.BrOn: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitBrOn(expr);\n        break;\n      }\n      case ExpressionId.RttCanon: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttCanon(expr);\n        break;\n      }\n      case ExpressionId.RttSub: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttSub(expr);\n        break;\n      }\n      case ExpressionId.StructNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructNew(expr);\n        break;\n      }\n      case ExpressionId.StructGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructGet(expr);\n        break;\n      }\n      case ExpressionId.StructSet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructSet(expr);\n        break;\n      }\n      case ExpressionId.ArrayNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayNew(expr);\n        break;\n      }\n      case ExpressionId.ArrayGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayGet(expr);\n        break;\n      }\n      case ExpressionId.ArraySet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArraySet(expr);\n        break;\n      }\n      case ExpressionId.ArrayLen: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayLen(expr);\n        break;\n      }\n      case ExpressionId.RefAs: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefAs(expr);\n        break;\n      }\n      default: throw new Error(\"unexpected expression kind\");\n    }\n    this._currentExpression = previousExpression;\n  }\n}\n\n/** Base class of custom Binaryen passes. */\nexport abstract class Pass extends Visitor {\n\n  /** Gets the current function being walked. */\n  get currentFunction(): FunctionRef {\n    var currentFunction = this._currentFunction;\n    if (!currentFunction) throw new Error(\"not walking a function\");\n    return currentFunction;\n  }\n  private _currentFunction: FunctionRef = 0;\n\n  /** Gets the current global being walked. */\n  get currentGlobal(): GlobalRef {\n    var currentGlobal = this._currentGlobal;\n    if (!currentGlobal) throw new Error(\"not walking a global\");\n    return currentGlobal;\n  }\n  private _currentGlobal: GlobalRef = 0;\n\n  /** Constructs a new Binaryen pass. */\n  constructor(readonly module: Module) {\n    super();\n  }\n\n  // Walking\n\n  /** Walks the entire module. */\n  walkModule(): void {\n    this.walkFunctions();\n    this.walkGlobals();\n  }\n\n  /** Walks all functions. */\n  walkFunctions(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumFunctions(moduleRef); i < k; ++i) {\n      this.walkFunction(_BinaryenGetFunctionByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific function. */\n  walkFunction(func: FunctionRef): void {\n    var body = _BinaryenFunctionGetBody(func);\n    if (body) {\n      this._currentFunction = func;\n      this.visit(body);\n      this._currentFunction = 0;\n    }\n  }\n\n  /** Walks all global variables. */\n  walkGlobals(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumGlobals(moduleRef); i < k; ++i) {\n      this.walkGlobal(_BinaryenGetGlobalByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific global variable. */\n  walkGlobal(global: GlobalRef): void {\n    this._currentGlobal = global;\n    var init = _BinaryenGlobalGetInitExpr(global);\n    if (init) this.visit(init);\n    this._currentGlobal = 0;\n  }\n\n  // Utility\n\n  /** Replaces the current expression with the specified replacement. */\n  replaceCurrent(replacement: ExpressionRef): void {\n    var search = this.currentExpression;\n    var func = this.currentFunction;\n    var body = _BinaryenFunctionGetBody(func);\n    if (body == search) {\n      _BinaryenFunctionSetBody(func, replacement);\n    } else {\n      var parent = assert(this.parentExpressionOrNull);\n      var replaced = replaceChild(parent, search, replacement);\n      if (!replaced) throw Error(\"failed to replace expression\");\n      _BinaryenExpressionFinalize(parent);\n    }\n  }\n}\n\n/** Replaces an expression within a parent expression. Returns the replaced expression on success, otherwise `0`. */\nexport function replaceChild(\n  /** Parent expression containing `search`. */\n  parent: ExpressionRef,\n  /** Expression to replace. */\n  search: ExpressionRef,\n  /** Expression to replace `search` with. */\n  replacement: ExpressionRef\n): ExpressionRef {\n  switch (_BinaryenExpressionGetId(parent)) {\n    case ExpressionId.Block: {\n      let numChildren = _BinaryenBlockGetNumChildren(parent);\n      for (let i: Index = 0; i < numChildren; ++i) {\n        let child = _BinaryenBlockGetChildAt(parent, i);\n        if (child == search) {\n          _BinaryenBlockSetChildAt(parent, i, replacement);\n          return child;\n        }\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      let condition = _BinaryenIfGetCondition(parent);\n      if (condition == search) {\n        _BinaryenIfSetCondition(parent, replacement);\n        return condition;\n      }\n      let ifTrue = _BinaryenIfGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenIfSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenIfGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenIfSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      break;\n    }\n    case ExpressionId.Loop: {\n      let body = _BinaryenLoopGetBody(parent);\n      if (body == search) {\n        _BinaryenLoopSetBody(parent, replacement);\n        return body;\n      }\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(parent);\n      if (condition == search) {\n        _BinaryenBreakSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenBreakGetValue(parent);\n      if (value == search) {\n        _BinaryenBreakSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Switch: {\n      let condition = _BinaryenSwitchGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSwitchSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenSwitchGetValue(parent);\n      if (value == search) {\n        _BinaryenSwitchSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Call: {\n      let numOperands = _BinaryenCallGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      let target = _BinaryenCallIndirectGetTarget(parent);\n      if (target == search) {\n        _BinaryenCallIndirectSetTarget(parent, replacement);\n        return target;\n      }\n      let numOperands = _BinaryenCallIndirectGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallIndirectGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallIndirectSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      let value = _BinaryenLocalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenLocalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      let value = _BinaryenGlobalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenGlobalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Load: {\n      let ptr = _BinaryenLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.Store: {\n      let ptr = _BinaryenStoreGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenStoreSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenStoreGetValue(parent);\n      if (value == search) {\n        _BinaryenStoreSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      let value = _BinaryenUnaryGetValue(parent);\n      if (value == search) {\n        _BinaryenUnarySetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Binary: {\n      let left = _BinaryenBinaryGetLeft(parent);\n      if (left == search) {\n        _BinaryenBinarySetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenBinaryGetRight(parent);\n      if (right == search) {\n        _BinaryenBinarySetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Select: {\n      let ifTrue = _BinaryenSelectGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenSelectSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenSelectGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenSelectSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      let condition = _BinaryenSelectGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSelectSetCondition(parent, replacement);\n        return condition;\n      }\n      break;\n    }\n    case ExpressionId.Drop: {\n      let value = _BinaryenDropGetValue(parent);\n      if (value == search) {\n        _BinaryenDropSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Return: {\n      let value = _BinaryenReturnGetValue(parent);\n      if (value == search) {\n        _BinaryenReturnSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.MemorySize: {\n      break;\n    }\n    case ExpressionId.MemoryGrow: {\n      let delta = _BinaryenMemoryGrowGetDelta(parent);\n      if (delta == search) {\n        _BinaryenMemoryGrowSetDelta(parent, replacement);\n        return delta;\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      let ptr = _BinaryenAtomicRMWGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicRMWSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenAtomicRMWGetValue(parent);\n      if (value == search) {\n        _BinaryenAtomicRMWSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      let ptr = _BinaryenAtomicCmpxchgGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicCmpxchgSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicCmpxchgGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicCmpxchgSetExpected(parent, replacement);\n        return expected;\n      }\n      let repl = _BinaryenAtomicCmpxchgGetReplacement(parent);\n      if (repl == search) {\n        _BinaryenAtomicCmpxchgSetReplacement(parent, replacement);\n        return repl;\n      }\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      let ptr = _BinaryenAtomicWaitGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicWaitSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicWaitGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicWaitSetExpected(parent, replacement);\n        return expected;\n      }\n      let timeout = _BinaryenAtomicWaitGetTimeout(parent);\n      if (timeout == search) {\n        _BinaryenAtomicWaitSetTimeout(parent, replacement);\n        return timeout;\n      }\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      let ptr = _BinaryenAtomicNotifyGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicNotifySetPtr(parent, replacement);\n        return ptr;\n      }\n      let notifyCount = _BinaryenAtomicNotifyGetNotifyCount(parent);\n      if (notifyCount == search) {\n        _BinaryenAtomicNotifySetNotifyCount(parent, replacement);\n        return notifyCount;\n      }\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      let vec = _BinaryenSIMDExtractGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDExtractSetVec(parent, replacement);\n        return vec;\n      }\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      let vec = _BinaryenSIMDReplaceGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDReplaceSetVec(parent, replacement);\n        return vec;\n      }\n      let value = _BinaryenSIMDReplaceGetValue(parent);\n      if (value == search) {\n        _BinaryenSIMDReplaceSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      let left = _BinaryenSIMDShuffleGetLeft(parent);\n      if (left == search) {\n        _BinaryenSIMDShuffleSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenSIMDShuffleGetRight(parent);\n      if (right == search) {\n        _BinaryenSIMDShuffleSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      let a = _BinaryenSIMDTernaryGetA(parent);\n      if (a == search) {\n        _BinaryenSIMDTernarySetA(parent, replacement);\n        return a;\n      }\n      let b = _BinaryenSIMDTernaryGetB(parent);\n      if (b == search) {\n        _BinaryenSIMDTernarySetB(parent, replacement);\n        return b;\n      }\n      let c = _BinaryenSIMDTernaryGetC(parent);\n      if (c == search) {\n        _BinaryenSIMDTernarySetC(parent, replacement);\n        return c;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      let vec = _BinaryenSIMDShiftGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDShiftSetVec(parent, replacement);\n        return vec;\n      }\n      let shift = _BinaryenSIMDShiftGetShift(parent);\n      if (shift == search) {\n        _BinaryenSIMDShiftSetShift(parent, replacement);\n        return shift;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      let ptr = _BinaryenSIMDLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    // TODO: SIMDLoadStoreLane\n    case ExpressionId.MemoryInit: {\n      let dest = _BinaryenMemoryInitGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryInitSetDest(parent, replacement);\n        return dest;\n      }\n      let offset = _BinaryenMemoryInitGetOffset(parent);\n      if (offset == search) {\n        _BinaryenMemoryInitSetOffset(parent, replacement);\n        return offset;\n      }\n      let size = _BinaryenMemoryInitGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryInitSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      let dest = _BinaryenMemoryCopyGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryCopySetDest(parent, replacement);\n        return dest;\n      }\n      let source = _BinaryenMemoryCopyGetSource(parent);\n      if (source == search) {\n        _BinaryenMemoryCopySetSource(parent, replacement);\n        return source;\n      }\n      let size = _BinaryenMemoryCopyGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryCopySetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      let dest = _BinaryenMemoryFillGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryFillSetDest(parent, replacement);\n        return dest;\n      }\n      let value = _BinaryenMemoryFillGetValue(parent);\n      if (value == search) {\n        _BinaryenMemoryFillSetValue(parent, replacement);\n        return value;\n      }\n      let size = _BinaryenMemoryFillGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryFillSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIs: {\n      let value = _BinaryenRefIsGetValue(parent);\n      if (value == search) {\n        _BinaryenRefIsSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.RefEq: {\n      let left = _BinaryenRefEqGetLeft(parent);\n      if (left == search) {\n        _BinaryenRefEqSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenRefEqGetRight(parent);\n      if (right == search) {\n        _BinaryenRefEqSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Try: {\n      let body = _BinaryenTryGetBody(parent);\n      if (body == search) {\n        _BinaryenTrySetBody(parent, replacement);\n        return body;\n      }\n      let numCatchBodies = _BinaryenTryGetNumCatchBodies(parent);\n      for (let i: Index = 0; i < numCatchBodies; ++i) {\n        let catchBody = _BinaryenTryGetCatchBodyAt(parent, i);\n        if (catchBody == search) {\n          _BinaryenTrySetCatchBodyAt(parent, i, replacement);\n          return catchBody;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Throw: {\n      let numOperands = _BinaryenThrowGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenThrowGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenThrowSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      let numOperands = _BinaryenTupleMakeGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenTupleMakeGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenTupleMakeSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      let tuple = _BinaryenTupleExtractGetTuple(parent);\n      if (tuple == search) {\n        _BinaryenTupleExtractSetTuple(parent, replacement);\n        return tuple;\n      }\n      break;\n    }\n    case ExpressionId.I31New: {\n      let value = _BinaryenI31NewGetValue(parent);\n      if (value == search) {\n        _BinaryenI31NewSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.I31Get: {\n      let i31Expr = _BinaryenI31GetGetI31(parent);\n      if (i31Expr == search) {\n        _BinaryenI31GetSetI31(parent, replacement);\n        return i31Expr;\n      }\n      break;\n    }\n    case ExpressionId.CallRef: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefTest: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefCast: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.BrOn: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttCanon: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttSub: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructSet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArraySet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayLen: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefAs: {\n      assert(false); // TODO\n      break;\n    }\n    default: throw new Error(\"unexpected expression id\");\n  }\n  return 0;\n}\n","/**\n * @fileoverview A lightweight store instrumentation pass.\n * \n * Can be used to find rogue stores to protected memory addresses like object\n * headers or similar, without going overboard with instrumentation. Also\n * passes a flag whether a store originates within the runtime or other code.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  Compiler\n} from \"../compiler\";\n\nimport {\n  createType,\n  ExpressionRef,\n  NativeType\n} from \"../module\";\n\nimport {\n  _BinaryenFunctionGetName,\n  _BinaryenStoreGetBytes,\n  _BinaryenStoreGetOffset,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreSetPtr\n} from \"../glue/binaryen\";\n\n/** Instruments stores to also call an import. */\nexport class RtraceMemory extends Pass {\n  /** Whether we've seen any stores. */\n  seenStores: bool = false;\n  /** Target pointer type. */\n  ptrType: NativeType;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.ptrType = compiler.options.nativeSizeType;\n  }\n\n  checkRT(): bool {\n    var functionName = this.module.readStringCached(_BinaryenFunctionGetName(this.currentFunction))!;\n    return functionName.startsWith(\"~lib/rt/\");\n  }\n\n  /** @override */\n  visitStore(store: ExpressionRef): void {\n    var module = this.module;\n    var ptr = _BinaryenStoreGetPtr(store);\n    var offset = _BinaryenStoreGetOffset(store);\n    var bytes = _BinaryenStoreGetBytes(store);\n    // onstore(ptr: usize, offset: i32, bytes: i32, isRT: bool) -> ptr\n    _BinaryenStoreSetPtr(store,\n      module.call(\"~onstore\", [\n        ptr,\n        module.i32(offset),\n        module.i32(bytes),\n        module.i32(i32(this.checkRT()))\n      ], this.ptrType)\n    );\n    this.seenStores = true;\n  }\n\n  // TODO: MemoryFill, Atomics\n\n  /** @override */\n  walkModule(): void {\n    super.walkModule();\n    if (this.seenStores) {\n      this.module.addFunctionImport(\"~onstore\", \"rtrace\", \"onstore\",\n        createType([ this.ptrType, NativeType.I32, NativeType.I32, NativeType.I32 ]),\n        this.ptrType\n      );\n    }\n  }\n}\n","/**\n * @fileoverview Shadow stack instrumentation for a precise GC.\n * \n * Instruments function arguments and local assignments marked with a 'tostack'\n * call to also do stores to a shadow stack of managed values only.\n * \n * Consider a simple call to a function looking like the following, taking\n * managed arguments, plus assigning managed values to locals:\n * \n *   function foo(a: Obj, b: Obj): Obj {\n *     var c = __tostack(a) // slot 2\n *     __collect()\n *     return b\n *   }\n *   \n *   foo(__tostack(a), __tostack(b)) // slot 0, 1\n * \n * At the call to `__collect()` the 32-bit stack frame of the function is:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed argument 'a'\n *      4   | Second managed argument 'b'\n *   -------|----------------------------\n *      8   | First managed local 'c'\n * \n * We are splitting the frame in two halves as annotated since both halves are\n * only known separately for indirect calls, with the first half becoming an\n * extension of the calling function's stack frame by means of treating the\n * arguments as if these were locals beyond the caller's `numLocals`. Function\n * arguments stay a bit longer on the stack than usually, but we also don't have\n * to modify the stack pointer pre-call at all this way. The caller's amended\n * stack frame when assuming one managed local may look like this:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local '?'\n *      4   | Extended with first managed argument 'a'\n *      8   | Extended with second managed argument 'b'\n * \n * with the callee's stack frame becoming just:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local 'c'\n * \n * Instrumentation added below looks about like the following, with the stack\n * growing downwards and 't' and 'r' being new temporary locals:\n * \n *   // callee frameSize = 1 * sizeof<usize>()\n *   function foo(a: usize, b: usize): usize {\n *     memory.fill(__stack_pointer -= frameSize, 0, frameSize)\n *     store<usize>(__stack_pointer, c = a, 0 * sizeof<usize>())\n *     __collect()\n *     var r = b\n *     __stack_pointer += frameSize\n *     return r\n *   }\n * \n *   // caller frameSize = (numLocalSlots + 2 [by extension]) * sizeof<usize>()\n *   (\n *     r = foo(\n *       ( t = a,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 0) * sizeof<usize>()),\n *         t ),\n *       ( t = b,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 1) * sizeof<usize>()),\n *         t )\n *     ),\n *     r\n *   )\n * \n * Also note that we have to `memory.fill` the second half because the first\n * assignment to a local may happen at a later point within the function. The\n * invariant we need to maintain for a precise GC is that it only sees zeroes\n * or valid pointers, but never an invalid pointer left on the stack earlier.\n * Since most frames are small, we unroll a sequence of `store`s up to a frame\n * size of 16 bytes, and `memory.fill`, if available, beyond.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  _BinaryenAddFunction,\n  _BinaryenAddFunctionExport,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallGetTarget,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenCallSetOperandAt,\n  _BinaryenExportGetKind,\n  _BinaryenExportGetName,\n  _BinaryenExportGetValue,\n  _BinaryenExpressionGetId,\n  _BinaryenExpressionGetType,\n  _BinaryenFunctionGetBody,\n  _BinaryenFunctionGetName,\n  _BinaryenFunctionGetNumLocals,\n  _BinaryenFunctionGetNumVars,\n  _BinaryenFunctionGetParams,\n  _BinaryenFunctionGetResults,\n  _BinaryenFunctionGetVar,\n  _BinaryenFunctionSetBody,\n  _BinaryenGetExport,\n  _BinaryenGetFunction,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenLocalSetGetValue,\n  _BinaryenLocalSetIsTee,\n  _BinaryenLocalSetSetValue,\n  _BinaryenRemoveExport,\n  _BinaryenRemoveFunction,\n  _BinaryenReturnGetValue,\n  _BinaryenReturnSetValue,\n  _free\n} from \"../glue/binaryen\";\n\nimport {\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  Index,\n  BinaryOp,\n  NativeType,\n  allocPtrArray,\n  Module,\n  ExternalKind,\n  ExportRef,\n  expandType,\n  isConstZero\n} from \"../module\";\n\nimport {\n  Compiler,\n  Options\n} from \"../compiler\";\n\nimport {\n  Feature\n} from \"../common\";\n\nimport {\n  BuiltinNames\n} from \"../builtins\";\n\ntype LocalIndex = Index;\ntype SlotIndex = Index;\ntype SlotMap = Map<LocalIndex,SlotIndex>;\ntype TempMap = Map<NativeType,LocalIndex>;\n\n/** Attempts to match the `__tostack(value)` pattern. Returns `value` if a match, otherwise `0`.  */\nfunction matchPattern(module: Module, expr: ExpressionRef): ExpressionRef {\n  if (_BinaryenExpressionGetId(expr) == ExpressionId.Call && module.readStringCached(_BinaryenCallGetTarget(expr)) == BuiltinNames.tostack) {\n    assert(_BinaryenCallGetNumOperands(expr) == 1);\n    return _BinaryenCallGetOperandAt(expr, 0);\n  }\n  return 0;\n}\n\n/** Tests whether a `value` matched by `matchTostack` needs a slot. */\nfunction needsSlot(module: Module, value: ExpressionRef): bool {\n  switch (_BinaryenExpressionGetId(value)) {\n    // no need to stack null pointers\n    case ExpressionId.Const: return !isConstZero(value);\n    // already kept in another slot\n    case ExpressionId.LocalGet:\n    case ExpressionId.LocalSet: return false; // tee\n  }\n  return true;\n}\n\n/** Instruments a module with a shadow stack for precise GC. */\nexport class ShadowStackPass extends Pass {\n  /** Stack frame slots, per function. */\n  slotMaps: Map<FunctionRef, SlotMap> = new Map();\n  /** Temporary locals, per function. */\n  tempMaps: Map<FunctionRef, TempMap> = new Map();\n  /** Exports (with managed operands) map. */\n  exportMap: Map<string,i32[]> = new Map();\n  /** Compiler reference. */\n  compiler: Compiler;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.compiler = compiler;\n  }\n\n  /** Compiler options. */\n  get options(): Options { return this.compiler.options; }\n  /** Target pointer type. */\n  get ptrType(): NativeType { return this.options.nativeSizeType; }\n  /** Target pointer size. */\n  get ptrSize(): i32 { return this.ptrType == NativeType.I64 ? 8 : 4; }\n  /** Target pointer addition operation. */\n  get ptrBinaryAdd(): BinaryOp { return this.ptrType == NativeType.I64 ? BinaryOp.AddI64 : BinaryOp.AddI32; }\n  /** Target pointer subtraction operation. */\n  get ptrBinarySub(): BinaryOp { return this.ptrType == NativeType.I64 ? BinaryOp.SubI64 : BinaryOp.SubI32; }\n\n  /** Gets a constant with the specified value of the target pointer type. */\n  ptrConst(value: i32): ExpressionRef {\n    return this.ptrType == NativeType.I64\n      ? this.module.i64(value)\n      : this.module.i32(value);\n  }\n\n  /** Notes the presence of a slot for the specified (imaginary) local, returning the slot index. */\n  noteSlot(func: FunctionRef, localIndex: Index): i32 {\n    let slotMap: SlotMap;\n    if (this.slotMaps.has(func)) {\n      slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      if (slotMap.has(localIndex)) {\n        return changetype<i32>(slotMap.get(localIndex));\n      }\n    } else {\n      slotMap = new Map();\n      this.slotMaps.set(func, slotMap);\n    }\n    let slotIndex = slotMap.size;\n    slotMap.set(localIndex, slotIndex);\n    return slotIndex;\n  }\n\n  /** Notes the presence of an exported function taking managed operands. */\n  noteExport(name: string, managedOperandIndices: i32[]): void {\n    if (!managedOperandIndices.length) return;\n    this.exportMap.set(name, managedOperandIndices);\n  }\n\n  /** Gets a shared temporary local of the given type in the specified functions. */\n  getSharedTemp(func: FunctionRef, type: NativeType): Index {\n    let tempMap: TempMap;\n    if (this.tempMaps.has(func)) {\n      tempMap = changetype<TempMap>(this.tempMaps.get(func));\n      if (tempMap.has(type)) {\n        return changetype<Index>(tempMap.get(type));\n      }\n    } else {\n      tempMap = new Map();\n      this.tempMaps.set(func, tempMap);\n    }\n    let numLocals = _BinaryenFunctionGetNumLocals(func);\n    let localIndex = numLocals + tempMap.size;\n    tempMap.set(type, localIndex);\n    return localIndex;\n  }\n\n  /** Makes an expression modifying the stack pointer by the given offset. */\n  makeStackOffset(offset: i32): ExpressionRef {\n    assert(offset != 0);\n    var module = this.module;\n    var expr = module.global_set(BuiltinNames.stack_pointer,\n      module.binary(offset >= 0 ? this.ptrBinaryAdd : this.ptrBinarySub,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        this.ptrConst(abs(offset))\n      )\n    );\n    if (offset > 0) return expr;\n    return module.block(null, [\n      expr,\n      this.makeStackCheck()\n    ], NativeType.None);\n  }\n\n  /** Makes a sequence of expressions zeroing the stack frame. */\n  makeStackFill(frameSize: i32, stmts: ExpressionRef[]): void {\n    assert(frameSize > 0);\n    var module = this.module;\n    if (this.options.hasFeature(Feature.BULK_MEMORY) && frameSize > 16) {\n      stmts.push(\n        module.memory_fill(\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.i32(0), // TODO: Wasm64 also i32?\n          this.ptrConst(frameSize)\n        )\n      );\n    } else {\n      let remain = frameSize;\n      while (remain >= 8) {\n        // store<i64>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(8,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i64(0),\n            NativeType.I64,\n            frameSize - remain\n          )\n        );\n        remain -= 8;\n      }\n      if (remain) {\n        assert(remain == 4);\n        // store<i32>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(4,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i32(0),\n            NativeType.I32,\n            frameSize - remain\n          )\n        );\n      }\n    }\n  }\n\n  private hasStackCheckFunction: bool = false;\n\n  /** Makes a check that the current stack pointer is valid. */\n  makeStackCheck(): ExpressionRef {\n    var module = this.module;\n    if (!this.hasStackCheckFunction) {\n      this.hasStackCheckFunction = true;\n      module.addFunction(\"~stack_check\", NativeType.None, NativeType.None, null,\n        module.if(\n          module.binary(BinaryOp.LtI32,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.global_get(BuiltinNames.data_end, this.ptrType)\n          ),\n          this.compiler.makeStaticAbort(this.compiler.ensureStaticString(\"stack overflow\"), this.compiler.program.nativeSource)\n        )\n      );\n    }\n    return module.call(\"~stack_check\", null, NativeType.None);\n  }\n\n  private updateCallOperands(operands: ExpressionRef[]): i32 {\n    var module = this.module;\n    var numSlots = 0;\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      let operand = operands[i];\n      let match = matchPattern(module, operand);\n      if (!match) continue;\n      if (!needsSlot(module, match)) {\n        operands[i] = match;\n        continue;\n      }\n      let currentFunction = this.currentFunction;\n      let numLocals = _BinaryenFunctionGetNumLocals(currentFunction);\n      let slotIndex = this.noteSlot(currentFunction, numLocals + this.callSlotOffset + i);\n      let temp = this.getSharedTemp(currentFunction, this.ptrType);\n      let stmts = new Array<ExpressionRef>();\n      // t = value\n      stmts.push(\n        module.local_set(temp, match, false)\n      );\n      // store<usize>(__stack_pointer, t, slotIndex * ptrSize)\n      stmts.push(\n        module.store(this.ptrSize,\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.local_get(temp, this.ptrType),\n          this.ptrType, slotIndex * this.ptrSize\n        )\n      );\n      // -> t\n      stmts.push(\n        module.local_get(temp, this.ptrType)\n      );\n      operands[i] = module.block(null, stmts, this.ptrType);\n      ++numSlots;\n    }\n    return numSlots;\n  }\n\n  /** Slot offset accounting for nested calls. */\n  private callSlotOffset: i32 = 0;\n  /** Slot offset stack in nested calls. */\n  private callSlotStack: i32[] = new Array();\n\n  /** @override */\n  visitCallPre(call: ExpressionRef): void {\n    var numOperands = _BinaryenCallGetNumOperands(call);\n    var operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallGetOperandAt(call, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallSetOperandAt(call, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCall(call: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitCallIndirectPre(callIndirect: ExpressionRef): void {\n    let numOperands = _BinaryenCallIndirectGetNumOperands(callIndirect);\n    let operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallIndirectGetOperandAt(callIndirect, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallIndirectSetOperandAt(callIndirect, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCallIndirect(callIndirect: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    let module = this.module;\n    let value = _BinaryenLocalSetGetValue(localSet);\n    let match = matchPattern(module, value);\n    if (!match) return;\n    if (!needsSlot(module, match)) {\n      _BinaryenLocalSetSetValue(localSet, match);\n      return;\n    }\n    let index = _BinaryenLocalSetGetIndex(localSet);\n    let slotIndex = this.noteSlot(this.currentFunction, index);\n    let stmts = new Array<ExpressionRef>();\n    // store<usize>(__stack_pointer, local = match, slotIndex * ptrSize)\n    stmts.push(\n      module.store(this.ptrSize,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        module.local_tee(index, match, false),\n        this.ptrType, slotIndex * this.ptrSize\n      )\n    );\n    if (_BinaryenLocalSetIsTee(localSet)) {\n      // -> local\n      stmts.push(\n        module.local_get(index, this.ptrType)\n      );\n      this.replaceCurrent(module.flatten(stmts, this.ptrType));\n    } else {\n      this.replaceCurrent(module.flatten(stmts, NativeType.None));\n    }\n  }\n\n  /** Updates a function with additional locals etc. */\n  updateFunction(funcRef: FunctionRef): void {\n    let name = _BinaryenFunctionGetName(funcRef);\n    let params = _BinaryenFunctionGetParams(funcRef);\n    let results = _BinaryenFunctionGetResults(funcRef);\n    let body = assert(_BinaryenFunctionGetBody(funcRef));\n    let numVars = _BinaryenFunctionGetNumVars(funcRef);\n    let vars = new Array<NativeType>();\n    for (let i: Index = 0; i < numVars; ++i) {\n      vars[i] = _BinaryenFunctionGetVar(funcRef, i);\n    }\n    let tempMaps = this.tempMaps;\n    if (tempMaps.has(funcRef)) {\n      let tempMap = changetype<TempMap>(tempMaps.get(funcRef));\n      for (let _keys = Map_keys(tempMap), i = 0, k = _keys.length; i < k; ++i) {\n        vars.push(_keys[i]);\n      }\n    }\n    let moduleRef = this.module.ref;\n    _BinaryenRemoveFunction(moduleRef, name);\n    let cArr = allocPtrArray(vars);\n    _BinaryenAddFunction(moduleRef, name, params, results, cArr, vars.length, body);\n    _free(cArr);\n  }\n\n  /** Updates a function export taking managed arguments. */\n  updateExport(exportRef: ExportRef, managedOperandIndices: i32[]): void {\n    var module = this.module;\n    var moduleRef = module.ref;\n    assert(_BinaryenExportGetKind(exportRef) == ExternalKind.Function);\n\n    var internalNameRef = _BinaryenExportGetValue(exportRef);\n    var internalName = module.readStringCached(internalNameRef)!;\n    var externalNameRef = _BinaryenExportGetName(exportRef);\n    var funcRef = _BinaryenGetFunction(moduleRef, internalNameRef);\n    var params = _BinaryenFunctionGetParams(funcRef);\n    var paramTypes = expandType(params);\n    var numParams = paramTypes.length;\n    var results = _BinaryenFunctionGetResults(funcRef);\n    var numLocals = numParams;\n    var vars = new Array<NativeType>();\n    var numSlots = assert(managedOperandIndices.length);\n    var frameSize = numSlots * this.ptrSize;\n    var wrapperName = \"export:\" + internalName;\n    var wrapperNameRef = module.allocStringCached(wrapperName);\n\n    if (_BinaryenGetFunction(moduleRef, wrapperNameRef) == 0) {\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      for (let slotIndex = 0; slotIndex < numSlots; ++slotIndex) {\n        // store<usize>(__stack_pointer, $local, slotIndex * ptrSize)\n        stmts.push(\n          module.store(this.ptrSize,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.local_get(managedOperandIndices[slotIndex], this.ptrType),\n            this.ptrType, slotIndex * this.ptrSize\n          )\n        );\n      }\n      let forwardedOperands = new Array<ExpressionRef>(numParams);\n      for (let i = 0; i < numParams; ++i) {\n        forwardedOperands[i] = module.local_get(i, paramTypes[i]);\n      }\n      if (results != NativeType.None) {\n        let tempIndex = numLocals++;\n        vars.push(results);\n        // t = original(...)\n        stmts.push(\n          module.local_set(tempIndex,\n            module.call(internalName, forwardedOperands, results),\n            false // internal\n          )\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(tempIndex, results)\n        );\n      } else {\n        // original(...)\n        stmts.push(\n          module.call(internalName, forwardedOperands, results)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      }\n      let cArr = allocPtrArray(vars);\n      _BinaryenAddFunction(moduleRef, wrapperNameRef, params, results, cArr, vars.length,\n        module.block(null, stmts, results)\n      );\n      _free(cArr);\n    }\n    _BinaryenRemoveExport(moduleRef, externalNameRef);\n    _BinaryenAddFunctionExport(moduleRef, wrapperNameRef, externalNameRef);\n  }\n\n  /** @override */\n  walkModule(): void {\n    // Run the pass normally\n    super.walkModule();\n\n    // Instrument returns in functions utilizing stack slots\n    var module = this.module;\n    var instrumentReturns = new InstrumentReturns(this);\n    for (let _keys = Map_keys(this.slotMaps), i = 0, k = _keys.length; i < k; ++i) {\n      let func = _keys[i];\n      let slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      let frameSize = slotMap.size * this.ptrSize;\n\n      // Instrument function returns\n      instrumentReturns.frameSize = frameSize;\n      instrumentReturns.walkFunction(func);\n\n      // Instrument function entry\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      // memory.fill(__stack_pointer, 0, frameSize)\n      this.makeStackFill(frameSize, stmts);\n      \n      // Handle implicit return\n      let body = _BinaryenFunctionGetBody(func);\n      let bodyType = _BinaryenExpressionGetType(body);\n      if (bodyType == NativeType.Unreachable) {\n        // body\n        stmts.push(\n          body\n        );\n      } else if (bodyType == NativeType.None) {\n        // body\n        stmts.push(\n          body\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      } else {\n        let temp = this.getSharedTemp(func, bodyType);\n        // t = body\n        stmts.push(\n          module.local_set(temp, body, false)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(temp, bodyType)\n        );\n      }\n      _BinaryenFunctionSetBody(func, module.flatten(stmts, bodyType));\n    }\n\n    // Update functions we added more locals to\n    // TODO: _BinaryenFunctionAddVar ?\n    for (let _keys = Map_keys(this.tempMaps), i = 0, k = _keys.length; i < k; ++i) {\n      this.updateFunction(_keys[i]);\n    }\n\n    // Update exports taking managed arguments\n    var exportMap = this.exportMap;\n    for (let _keys = Map_keys(exportMap), i = 0, k = _keys.length; i < k; ++i) {\n      let exportName = _keys[i];\n      let exportRef = _BinaryenGetExport(module.ref, module.allocStringCached(exportName));\n      let managedOperandIndices = changetype<i32[]>(exportMap.get(exportName));\n      this.updateExport(exportRef, managedOperandIndices);\n    }\n  }\n}\n\n/** Companion pass instrumenting `return` statements to restore the stack frame. */\nclass InstrumentReturns extends Pass {\n  /** Parent pass. */\n  parentPass: ShadowStackPass;\n  /** Frame size of the current function being processed. */\n  frameSize: i32 = 0;\n\n  constructor(shadowStack: ShadowStackPass) {\n    super(shadowStack.module);\n    this.parentPass = shadowStack;\n  }\n\n  /** @override */\n  visitReturn(ret: ExpressionRef): void {\n    assert(this.frameSize);\n    var module = this.module;\n    var value = _BinaryenReturnGetValue(ret);\n    var stmts = new Array<ExpressionRef>();\n    if (value) {\n      let returnType = _BinaryenExpressionGetType(value);\n      let temp = this.parentPass.getSharedTemp(this.currentFunction, returnType);\n      // t = value\n      stmts.push(\n        module.local_set(temp, value, false)\n      );\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return t\n      _BinaryenReturnSetValue(ret, module.local_get(temp, returnType));\n    } else {\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return\n    }\n    stmts.push(\n      ret\n    );\n    this.replaceCurrent(module.flatten(stmts, NativeType.Unreachable));\n  }\n}","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n// Memory manager constants\nconst AL_SIZE = 16;\nconst AL_MASK = AL_SIZE - 1;\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code range. */\n  get nativeRange(): Range { return this.nativeSource.range; }\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `Object` instance. */\n  get objectInstance(): Class {\n    var cached = this._objectInstance;\n    if (!cached) this._objectInstance = cached = this.requireClass(CommonNames.Object);\n    return cached;\n  }\n  private _objectInstance: Class | null = null;\n\n  /** Gets the standard `TemplateStringsArray` instance. */\n  get templateStringsArrayInstance(): Class {\n    var cached = this._templateStringsArrayInstance;\n    if (!cached) this._templateStringsArrayInstance = cached = this.requireClass(CommonNames.TemplateStringsArray);\n    return cached;\n  }\n  private _templateStringsArrayInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    var prototype = this.lookup(CommonNames.abort);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n  get newInstance(): Function {\n    var cached = this._newInstance;\n    if (!cached) this._newInstance = cached = this.requireFunction(CommonNames.new_);\n    return cached;\n  }\n  private _newInstance: Function | null = null;\n\n  /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n  get renewInstance(): Function {\n    var cached = this._renewInstance;\n    if (!cached) this._renewInstance = cached = this.requireFunction(CommonNames.renew);\n    return cached;\n  }\n  private _renewInstance: Function | null = null;\n\n  /** Gets the runtime `__link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void` instance. */\n  get linkInstance(): Function {\n    var cached = this._linkInstance;\n    if (!cached) this._linkInstance = cached = this.requireFunction(CommonNames.link);\n    return cached;\n  }\n  private _linkInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get newBufferInstance(): Function {\n    var cached = this._newBufferInstance;\n    if (!cached) this._newBufferInstance = cached = this.requireFunction(CommonNames.newBuffer);\n    return cached;\n  }\n  private _newBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get newArrayInstance(): Function {\n    var cached = this._newArrayInstance;\n    if (!cached) this._newArrayInstance = cached = this.requireFunction(CommonNames.newArray);\n    return cached;\n  }\n  private _newArrayInstance: Function | null = null;\n\n  /** Gets the runtime's internal `BLOCK` instance. */\n  get BLOCKInstance(): Class {\n    var cached = this._BLOCKInstance;\n    if (!cached) this._BLOCKInstance = cached = this.requireClass(CommonNames.BLOCK);\n    return cached;\n  }\n  private _BLOCKInstance: Class | null = null;\n\n  /** Gets the runtime's internal `OBJECT` instance. */\n  get OBJECTInstance(): Class {\n    var cached = this._OBJECTInstance;\n    if (!cached) this._OBJECTInstance = cached = this.requireClass(CommonNames.OBJECT);\n    return cached;\n  }\n  private _OBJECTInstance: Class | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the overhead of a memory manager block. */\n  get blockOverhead(): i32 {\n    // BLOCK | data...\n    //       ^ 16b alignment\n    return this.BLOCKInstance.nextMemoryOffset;\n  }\n\n  /** Gets the overhead of a managed object, excl. block overhead, incl. alignment. */\n  get objectOverhead(): i32 {\n    // OBJECT+align | data...\n    //        └ 0 ┘ ^ 16b alignment\n    return (this.OBJECTInstance.nextMemoryOffset - this.blockOverhead + AL_MASK) & ~AL_MASK;\n  }\n\n  /** Gets the total overhead of a managed object, incl. block overhead. */\n  get totalOverhead(): i32 {\n    // BLOCK | OBJECT+align | data...\n    // └     = TOTAL      ┘ ^ 16b alignment\n    return this.blockOverhead + this.objectOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart(currentOffset: i32): i32 {\n    var blockOverhead = this.blockOverhead;\n    return ((currentOffset + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart64(currentOffset: i64): i64 {\n    var blockOverhead = i64_new(this.blockOverhead);\n    return i64_sub(i64_align(i64_add(currentOffset, blockOverhead), AL_SIZE), blockOverhead);\n  }\n\n  /** Computes the size of a memory manager block, excl. block overhead. */\n  computeBlockSize(payloadSize: i32, isManaged: bool): i32 {\n    // see: std/rt/tlsf.ts, computeSize; becomes mmInfo\n    if (isManaged) payloadSize += this.objectOverhead;\n    // we know that payload must be aligned, and that block sizes must be chosen\n    // so that blocks are adjacent with the next payload aligned. hence, block\n    // size is payloadSize rounded up to where the next block would start:\n    var blockSize = this.computeBlockStart(payloadSize);\n    // make sure that block size is valid according to TLSF requirements\n    var blockOverhead = this.blockOverhead;\n    var blockMinsize = ((3 * this.options.usizeType.byteSize + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n    if (blockSize < blockMinsize) blockSize = blockMinsize;\n    const blockMaxsize = 1 << 30; // 1 << (FL_BITS + SB_BITS - 1), exclusive\n    const tagsMask = 3;\n    if (blockSize >= blockMaxsize || (blockSize & tagsMask) != 0) {\n      throw new Error(\"invalid block size\");\n    }\n    return blockSize;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n    this.registerNativeType(CommonNames.eqref, Type.eqref);\n    this.registerNativeType(CommonNames.i31ref, Type.i31ref);\n    this.registerNativeType(CommonNames.dataref, Type.dataref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n    this.registerConstantInteger(CommonNames.ASC_EXPORT_RUNTIME, Type.bool,\n      i64_new(options.exportRuntime ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MAJOR, Type.i32,\n      i64_new(options.bundleMajorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MINOR, Type.i32,\n      i64_new(options.bundleMinorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_PATCH, Type.i32,\n      i64_new(options.bundlePatchVersion));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        // File must be found here, as it would otherwise already have been reported by the parser\n        let foreignFile = assert(this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt));\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            foreignFile,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asAliasNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n          queuedImports.splice(i, 1);\n          madeProgress = true;\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          // File must be found here, as it would otherwise already have been reported by the parser\n          let foreignFile = assert(this.lookupForeignFile(foreignPath, assert(queuedExport.foreignPathAlt)));\n          let element = this.lookupForeign(localName, foreignFile, queuedExports);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookup(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n        this.registerWrapperClass(Type.eqref, CommonNames.Eqref);\n        this.registerWrapperClass(Type.i31ref, CommonNames.I31ref);\n        this.registerWrapperClass(Type.dataref, CommonNames.Dataref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range,\n                  baseMember.identifierNode.text\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookup(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookup(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component kind: \" + name);\n    return element;\n  }\n\n  /** Requires that a global variable is present and returns it. */\n  requireGlobal(name: string): Global {\n    return <Global>this.require(name, ElementKind.GLOBAL);\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Requires that a global function is present and returns it. */\n  requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookup(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** The other file. */\n    foreignFile: File,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      // check if already resolved\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // follow queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n\n          // re-exported from another file\n          if (queuedExportForeignPath) {\n            let otherFile = this.lookupForeignFile(queuedExportForeignPath, assert(queuedExport.foreignPathAlt));\n            if (!otherFile) return null;\n            foreignName = queuedExport.localIdentifier.text;\n            foreignFile = otherFile;\n            continue;\n          }\n\n          // exported from this file\n          element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n          if (element) return element;\n        }\n      }\n      break;\n    } while (true);\n\n    // follow star exports\n    var exportsStar = foreignFile.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = this.lookupForeign(foreignName, exportsStar[i], queuedExports);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n    if (foreignFile) {\n      var element = this.lookupForeign(declaration.foreignName.text, foreignFile, queuedExports);\n      if (element) {\n        parent.add(declaration.name.text, element, declaration.name /* isImport */);\n        return;\n      }\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // keep original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookup(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string,\n    parent: Element,\n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n  /** Original function, if a stub. Otherwise `this`. */\n  original!: Function;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.original = this;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.original.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.original = this.original;\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempEqrefs: Local[] | null = null;\n  tempI31refs: Local[] | null = null;\n  tempDatarefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the field's `this` type. */\n  get thisType(): Type {\n    var parent = this.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    return (<Class>parent).type;\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    var cached = this._internalGetterName;\n    if (cached === null) this._internalGetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalGetterName: string | null = null;\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    var cached = this._internalSetterName;\n    if (cached === null) this._internalSetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalSetterName: string | null = null;\n\n  /** Gets the signature of the respective getter function. */\n  get internalGetterSignature(): Signature {\n    var cached = this._internalGetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, null, this.type, this.thisType);\n    return cached;\n  }\n  private _internalGetterSignature: Signature | null = null;\n\n  /** Gets the signature of the respective setter function. */\n  get internalSetterSignature(): Signature {\n    var cached = this._internalSetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, [ this.type ], Type.void, this.thisType);\n    return cached;\n  }\n  private _internalSetterSignature: Signature | null = null;\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n  /** Runtime visitor function reference. */\n  visitRef: FunctionRef = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads != null && overloads.has(kind)) {\n        return assert(overloads.get(kind));\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Gets the method of the specified name, resolved with the given type arguments. */\n  getMethod(name: string, typeArguments: Type[] | null = null): Function | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) {\n      let bound = changetype<Element>(members.get(name));\n      if (bound.kind == ElementKind.FUNCTION_PROTOTYPE) {\n        return this.program.resolver.resolveFunction(<FunctionPrototype>bound, typeArguments);\n      }\n    }\n    return null;\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var program = this.program;\n    var payloadSize = this.nextMemoryOffset + overhead;\n    var blockSize = program.computeBlockSize(payloadSize, true); // excl. overhead\n    var buffer = new Uint8Array(program.blockOverhead + blockSize);\n    var OBJECT = program.OBJECTInstance;\n    OBJECT.writeField(\"mmInfo\", blockSize, buffer, 0);\n    OBJECT.writeField(\"gcInfo\", 0, buffer, 0);\n    OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n    OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n    OBJECT.writeField(\"rtSize\", payloadSize, buffer, 0);\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.totalOverhead): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is pointerfree. Useful to know for the GC. */\n  get isPointerfree(): bool {\n    var program = this.program;\n\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n\n      // Check that there are no managed instance fields\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isManaged) return false;\n        }\n      }\n\n      // Check that this isn't a managed collection\n      if (instanceMembers.has(CommonNames.visit)) {\n        let prototype = this.prototype;\n        if (\n          prototype == program.arrayPrototype ||\n          prototype == program.staticArrayPrototype ||\n          prototype == program.setPrototype ||\n          prototype == program.mapPrototype\n        ) {\n          // Note that we cannot know for sure anymore as soon as the collection\n          // is extended, because user code may implement a custom visitor.\n          let typeArguments = assert(this.getTypeArgumentsTo(prototype));\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (typeArguments[i].isManaged) return false;\n          }\n          return true;\n        }\n        return false; // has a custom __visit\n      }\n    }\n    return true;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // update\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. Updated in place with the new set of contextual types. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    var oldCtxTypes = uniqueMap<string,Type>(ctxTypes);\n    ctxTypes.clear();\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            oldCtxTypes, // update\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            uniqueMap<string,Type>(ctxTypes), // don't update\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let typeParameterNode = typeParameterNodes[i];\n        let name = typeParameterNode.name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n          let defaultType = typeParameterNode.defaultType;\n          if (defaultType) {\n            let resolvedDefaultType = this.resolveType(defaultType, ctxFlow.actualFunction, contextualTypeArguments, reportMode);\n            if (!resolvedDefaultType) return null;\n            resolvedTypeArguments[i] = resolvedDefaultType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    var outerFlow = ctxFlow.outer;\n    if (outerFlow) {\n      if (element = outerFlow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let members = target.members;\n          if (!members || !members.has(propertyName)) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING:\n      case LiteralKind.TEMPLATE: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n                node.range, \"T\"\n              );\n            }\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n      case LiteralKind.OBJECT: {\n        if (ctxType.isClass) return ctxType.classReference;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            node.range\n          );\n        }\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n  TEMPLATELITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE: {\n          this.pos = pos;\n          return Token.STRINGLITERAL;\n        }\n        case CharCode.BACKTICK: {\n          this.pos = pos;\n          return Token.TEMPLATELITERAL;\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            let posBefore = pos;\n            while (\n              ++pos < end &&\n              isIdentifierPart(c = text.charCodeAt(pos))\n            ) { /* nop */ }\n            if (identifierHandling != IdentifierHandling.ALWAYS) {\n              let maybeKeywordToken = tokenFromKeyword(text.substring(posBefore, pos));\n              if (\n                maybeKeywordToken !== Token.INVALID &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(maybeKeywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return maybeKeywordToken;\n              }\n            }\n            this.pos = posBefore;\n            return Token.IDENTIFIER;\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readingTemplateString: bool = false;\n  readStringStart: i32 = 0;\n  readStringEnd: i32 = 0;\n\n  readString(quote: i32 = 0, isTaggedTemplate: bool = false): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    if (!quote) quote = text.charCodeAt(pos++);\n    var start = pos;\n    this.readStringStart = start;\n    var result = \"\";\n\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        this.readStringEnd = end;\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        this.readStringEnd = pos;\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence(isTaggedTemplate);\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (quote == CharCode.BACKTICK) {\n        if (c == CharCode.DOLLAR && pos + 1 < end && text.charCodeAt(pos + 1) == CharCode.OPENBRACE) {\n          result += text.substring(start, pos);\n          this.readStringEnd = pos;\n          this.pos = pos + 2;\n          this.readingTemplateString = true;\n          return result;\n        }\n      } else if (isLineBreak(c)) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        this.readStringEnd = pos;\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    this.readingTemplateString = false;\n    return result;\n  }\n\n  readEscapeSequence(isTaggedTemplate: bool = false): string {\n    // for context on isTaggedTemplate, see: https://tc39.es/proposal-template-literal-revision/\n    var start = this.pos;\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: {\n        if (isTaggedTemplate && this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n          return text.substring(start, this.pos);\n        }\n        return \"\\0\";\n      }\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(isTaggedTemplate ? start : -1); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(isTaggedTemplate ? start : -1); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(2, isTaggedTemplate ? start : - 1); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2, startIfTaggedTemplate: i32 = -1): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else if (~startIfTaggedTemplate) {\n        this.pos = --pos;\n        return text.substring(startIfTaggedTemplate, pos);\n      } else {\n        this.pos = pos;\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) { // invalid\n      this.pos = pos;\n      if (~startIfTaggedTemplate) {\n        return text.substring(startIfTaggedTemplate, pos);\n      }\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  checkForIdentifierStartAfterNumericLiteral(): void {\n    // TODO: BigInt n\n    var pos = this.pos;\n    if (pos < this.end && isIdentifierStart(this.source.text.charCodeAt(pos))) {\n      this.error(\n        DiagnosticCode.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal,\n        this.range(pos)\n      );\n    }\n  }\n\n  readUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    return this.readHexadecimalEscape(4, startIfTaggedTemplate);\n  }\n\n  private readExtendedUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unexpected_end_of_text,\n          this.range(start, end)\n        );\n      }\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unterminated_Unicode_escape_sequence,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    if (invalid) {\n      return ~startIfTaggedTemplate\n        ? text.substring(startIfTaggedTemplate, this.pos)\n        : \"\";\n    }\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Any reference. */\n  ANYREF,\n  /** Equatable reference. */\n  EQREF,\n  /** 31-bit integer reference. */\n  I31REF,\n  /** Data reference. */\n  DATAREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference && (this.kind == target.kind || (target.kind == TypeKind.ANYREF && this.kind != TypeKind.EXTERNREF))) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      // TODO: nullable/non-nullable refs have different native types\n      case TypeKind.FUNCREF: return NativeType.Funcref;\n      case TypeKind.EXTERNREF: return NativeType.Externref;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EQREF: return NativeType.Eqref;\n      case TypeKind.I31REF: return NativeType.I31ref;\n      case TypeKind.DATAREF: return NativeType.Dataref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Equatable reference. */\n  static readonly eqref: Type = new Type(TypeKind.EQREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** 31-bit integer reference. */\n  static readonly i31ref: Type = new Type(TypeKind.I31REF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Data reference. */\n  static readonly dataref: Type = new Type(TypeKind.DATAREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Tests if this signature has at least one managed operand. */\n  get hasManagedOperands(): bool {\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) return true;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) return true;\n    }\n    return false;\n  }\n\n  /** Gets the indices of all managed operands. */\n  getManagedOperandIndices(): i32[] {\n    var indices = new Array<i32>();\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    return indices;\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8\n       | i32(buffer[offset + 2]) << 16\n       | i32(buffer[offset + 3]) << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./terminal\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Terminal utility.\n * @license Apache-2.0\n */\n\n/** Gray terminal color code. */\nexport const COLOR_GRAY = \"\\u001b[90m\";\n/** Red terminal color code. */\nexport const COLOR_RED = \"\\u001b[91m\";\n/** Green terminal color code. */\nexport const COLOR_GREEN = \"\\u001b[92m\";\n/** Yellow terminal color code. */\nexport const COLOR_YELLOW = \"\\u001b[93m\";\n/** Blue terminal color code. */\nexport const COLOR_BLUE = \"\\u001b[94m\";\n/** Magenta terminal color code. */\nexport const COLOR_MAGENTA = \"\\u001b[95m\";\n/** Cyan terminal color code. */\nexport const COLOR_CYAN = \"\\u001b[96m\";\n/** White terminal color code. */\nexport const COLOR_WHITE = \"\\u001b[97m\";\n/** Terminal color reset code. */\nexport const COLOR_RESET = \"\\u001b[0m\";\n\n/** Whether terminal colors are enabled or not. */\nvar colorsEnabled = true;\n\n/** Checks whether terminal colors are enabled or not. */\nexport function isColorsEnabled(): bool {\n  return colorsEnabled;\n}\n\n/** Sets whether terminal colors are enabled or not. */\nexport function setColorsEnabled(isEnabled: bool): bool {\n  var wasEnabled = isEnabled;\n  colorsEnabled = isEnabled;\n  return wasEnabled;\n}\n\n/** Wraps the specified text in the specified terminal color code. */\nexport function colorize(text: string, color: string): string {\n  return colorsEnabled ? color + text + COLOR_RESET : text;\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid hexadecimal digit. */\nexport function isHexDigit(c: i32): bool {\n  return isDecimalDigit(c) || ((c | 32) >= CharCode.a && (c | 32) <= CharCode.f);\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  let c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11 // see: https://github.com/WebAssembly/memory64\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type has no outgoing pointers. */\n  POINTERFREE = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText(watFormat = true) {\n  if (watFormat) {\n    // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n    // of unreachable statements not actually emitted by the compiler. Optimizing\n    // StackIR removes these again, but may also suppress useless code emitted by\n    // the compiler that's then no longer visible in tests. Both not ideal.\n    return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n  } else {\n    return binaryen.wrapModule(this.ref).emitText();\n  }\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @fileoverview Floating point glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n    \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n    \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.at) {\n  Object.defineProperty(String.prototype, \"at\", {\n    value: function at(index) {\n      return this.charAt(index >= 0 ? index : index + this.length);\n    },\n    configurable: true\n  });\n}\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    },\n    configurable: true\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\n[ Array,\n  Uint8ClampedArray,\n  Uint8Array, Int8Array,\n  Uint16Array, Int16Array,\n  Uint32Array, Int32Array,\n  Float32Array, Float64Array\n].forEach(Ctr => {\n  if (!Ctr.prototype.at) {\n    Object.defineProperty(Ctr.prototype, \"at\", {\n      value: function at(index) {\n        return this[index >= 0 ? index : index + this.length];\n      },\n      configurable: true\n    });\n  }\n});\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean(U64[1] >>> 31);\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__911__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n__webpack_require__(308);\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(780);\n"],"sourceRoot":""}